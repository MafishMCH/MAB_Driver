
Silniki2_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008060  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  2 .ram_code     00000448  10000800  0c008060  00010800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         0000032c  20000000  0c0084a8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000474  2000032c  0c0087d4  0001832c  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  6 .debug_aranges 00001988  00000000  00000000  00018330  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002d544  00000000  00000000  00019cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004fb6  00000000  00000000  000471fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000b61c  00000000  00000000  0004c1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00006c00  00000000  00000000  000577d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00010764  00000000  00000000  0005e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e03a  00000000  00000000  0006eb34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001648  00000000  00000000  0007cb6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000c2a  00000000  00000000  0007e1b6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	cd 30 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     .0..............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	31 56 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     1V..............
 800009c:	b1 02 00 08 b1 02 00 08 41 56 00 08 51 56 00 08     ........AV..QV..
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 21 69 00 08 b1 02 00 08     ........!i......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 2d 66 00 08     ............-f..
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 6d 2a 00 08     ............m*..
 80001ac:	5d 2a 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ]*..............
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0084a8 	.word	0x0c0084a8
 800024c:	20000000 	.word	0x20000000
 8000250:	0000032c 	.word	0x0000032c
 8000254:	0c0087d4 	.word	0x0c0087d4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0084a8 	.word	0x0c0084a8
 8000264:	10000c48 	.word	0x10000c48
 8000268:	00000000 	.word	0x00000000
 800026c:	0c008060 	.word	0x0c008060
 8000270:	10000800 	.word	0x10000800
 8000274:	00000448 	.word	0x00000448

08000278 <__copy_table_end__>:
 8000278:	2000032c 	.word	0x2000032c
 800027c:	00000474 	.word	0x00000474
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000c48 	.word	0x10000c48
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800730d 	.word	0x0800730d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08005ded 	.word	0x08005ded

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f004 fec9 	bl	800505c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f004 ff31 	bl	8005130 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f004 ff10 	bl	800511c <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a37      	ldr	r2, [pc, #220]	; (80004e0 <XMC_GPIO_Init+0x138>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a36      	ldr	r2, [pc, #216]	; (80004e4 <XMC_GPIO_Init+0x13c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e03c      	b.n	80004a0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	409a      	lsls	r2, r3
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	7afb      	ldrb	r3, [r7, #11]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3210      	adds	r2, #16
 8000446:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	f003 0307 	and.w	r3, r3, #7
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4619      	mov	r1, r3
 8000454:	2307      	movs	r3, #7
 8000456:	408b      	lsls	r3, r1
 8000458:	43db      	mvns	r3, r3
 800045a:	ea02 0103 	and.w	r1, r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	f100 0210 	add.w	r2, r0, #16
 8000464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4618      	mov	r0, r3
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3210      	adds	r2, #16
 800047c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7a1b      	ldrb	r3, [r3, #8]
 8000484:	4619      	mov	r1, r3
 8000486:	7afb      	ldrb	r3, [r7, #11]
 8000488:	f003 0307 	and.w	r3, r3, #7
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	ea42 0103 	orr.w	r1, r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f100 0210 	add.w	r2, r0, #16
 800049c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	7afb      	ldrb	r3, [r7, #11]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3204      	adds	r2, #4
 80004b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	f003 0303 	and.w	r3, r3, #3
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	ea42 0103 	orr.w	r1, r2, r3
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	1d02      	adds	r2, r0, #4
 80004d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	48028e00 	.word	0x48028e00
 80004e4:	48028f00 	.word	0x48028f00

080004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004ee:	681b      	ldr	r3, [r3, #0]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000ffc0 	.word	0x2000ffc0

08000500 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <XMC_SCU_GetMirrorStatus+0x14>)
 8000506:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	50004000 	.word	0x50004000

08000518 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000520:	f7ff fed8 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <XMC_SCU_lDelay+0x3c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <XMC_SCU_lDelay+0x40>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	0c9a      	lsrs	r2, r3, #18
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	fb02 f303 	mul.w	r3, r2, r3
 8000536:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e003      	b.n	8000546 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800053e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3301      	adds	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	d3f7      	bcc.n	800053e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000ffc0 	.word	0x2000ffc0
 8000558:	431bde83 	.word	0x431bde83

0800055c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000564:	2000      	movs	r0, #0
 8000566:	f000 f8bf 	bl	80006e8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800056a:	f000 fa51 	bl	8000a10 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	79db      	ldrb	r3, [r3, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00a      	beq.n	800058c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000576:	f000 fa89 	bl	8000a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800057a:	bf00      	nop
 800057c:	f000 fa74 	bl	8000a68 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000580:	4603      	mov	r3, r0
 8000582:	f083 0301 	eor.w	r3, r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f7      	bne.n	800057c <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7a5b      	ldrb	r3, [r3, #9]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f923 	bl	80007dc <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000596:	bf00      	nop
 8000598:	f7ff ffb2 	bl	8000500 <XMC_SCU_GetMirrorStatus>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1fa      	bne.n	8000598 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a1b      	ldrb	r3, [r3, #8]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fa0c 	bl	80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7c1b      	ldrb	r3, [r3, #16]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f931 	bl	8000818 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	7c5b      	ldrb	r3, [r3, #17]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f954 	bl	8000868 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7c9b      	ldrb	r3, [r3, #18]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f93b 	bl	8000840 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7cdb      	ldrb	r3, [r3, #19]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f95e 	bl	8000890 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	799b      	ldrb	r3, [r3, #6]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00a      	beq.n	80005f2 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005dc:	f000 fa8a 	bl	8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005e0:	bf00      	nop
 80005e2:	f000 faaf 	bl	8000b44 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005e6:	4603      	mov	r3, r0
 80005e8:	f083 0301 	eor.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f7      	bne.n	80005e2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	78db      	ldrb	r3, [r3, #3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80005fa:	f000 fac7 	bl	8000b8c <XMC_SCU_CLOCK_DisableSystemPll>
 80005fe:	e014      	b.n	800062a <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000600:	f000 fab4 	bl	8000b6c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	8899      	ldrh	r1, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000610:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000616:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4608      	mov	r0, r1
 8000620:	4611      	mov	r1, r2
 8000622:	462a      	mov	r2, r5
 8000624:	4623      	mov	r3, r4
 8000626:	f000 fac1 	bl	8000bac <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000632:	d103      	bne.n	800063c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000634:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000638:	f000 f856 	bl	80006e8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800063c:	f7ff fe4a 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bdb0      	pop	{r4, r5, r7, pc}
 8000646:	bf00      	nop

08000648 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0f1b      	lsrs	r3, r3, #28
 8000654:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800065c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	461a      	mov	r2, r3
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 800066c:	4413      	add	r3, r2
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	50004414 	.word	0x50004414

08000680 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	0f1b      	lsrs	r3, r3, #28
 800068c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000694:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006a4:	4413      	add	r3, r2
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4013      	ands	r3, r2
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf14      	ite	ne
 80006b0:	2301      	movne	r3, #1
 80006b2:	2300      	moveq	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	5000440c 	.word	0x5000440c

080006c8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006cc:	f7ff ff0c 	bl	80004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006d0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006d4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006de:	4618      	mov	r0, r3
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	50004600 	.word	0x50004600

080006e8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006f0:	4906      	ldr	r1, [pc, #24]	; (800070c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	50004600 	.word	0x50004600

08000710 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000718:	4906      	ldr	r1, [pc, #24]	; (8000734 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	50004600 	.word	0x50004600

08000738 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	50004600 	.word	0x50004600

08000760 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d108      	bne.n	8000782 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800077a:	f023 0301 	bic.w	r3, r3, #1
 800077e:	60d3      	str	r3, [r2, #12]
 8000780:	e007      	b.n	8000792 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000782:	4a06      	ldr	r2, [pc, #24]	; (800079c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	60d3      	str	r3, [r2, #12]
  }
}
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	50004710 	.word	0x50004710

080007a0 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007aa:	bf00      	nop
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f8      	bne.n	80007ac <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ba:	4907      	ldr	r1, [pc, #28]	; (80007d8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007c4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007c6:	4313      	orrs	r3, r2
 80007c8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	50004000 	.word	0x50004000
 80007d8:	50004300 	.word	0x50004300

080007dc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007e6:	bf00      	nop
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f8      	bne.n	80007e8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007f6:	4907      	ldr	r1, [pc, #28]	; (8000814 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000800:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000802:	4313      	orrs	r3, r2
 8000804:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	50004000 	.word	0x50004000
 8000814:	50004300 	.word	0x50004300

08000818 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800082e:	4313      	orrs	r3, r2
 8000830:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	50004600 	.word	0x50004600

08000840 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000848:	4906      	ldr	r1, [pc, #24]	; (8000864 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000856:	4313      	orrs	r3, r2
 8000858:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	50004600 	.word	0x50004600

08000868 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000870:	4906      	ldr	r1, [pc, #24]	; (800088c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800087e:	4313      	orrs	r3, r2
 8000880:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	50004600 	.word	0x50004600

08000890 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000898:	4906      	ldr	r1, [pc, #24]	; (80008b4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008a6:	4313      	orrs	r3, r2
 80008a8:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	50004600 	.word	0x50004600

080008b8 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008ce:	4313      	orrs	r3, r2
 80008d0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	50004600 	.word	0x50004600

080008e0 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008e8:	4906      	ldr	r1, [pc, #24]	; (8000904 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008f6:	4313      	orrs	r3, r2
 80008f8:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	50004600 	.word	0x50004600

08000908 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000910:	4906      	ldr	r1, [pc, #24]	; (800092c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800091e:	4313      	orrs	r3, r2
 8000920:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	50004600 	.word	0x50004600

08000930 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	6053      	str	r3, [r2, #4]
}
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	50004600 	.word	0x50004600

08000950 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800095a:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000966:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000972:	4913      	ldr	r1, [pc, #76]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	3b01      	subs	r3, #1
 8000978:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3b01      	subs	r3, #1
 800097e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000980:	4313      	orrs	r3, r2
 8000982:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f023 0310 	bic.w	r3, r3, #16
 800099a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800099c:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009a8:	bf00      	nop
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f9      	beq.n	80009aa <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	50004710 	.word	0x50004710

080009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009d8:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d10e      	bne.n	80009fe <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009ea:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009ec:	2064      	movs	r0, #100	; 0x64
 80009ee:	f7ff fd93 	bl	8000518 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009f2:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009fc:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f7ff fd8a 	bl	8000518 <XMC_SCU_lDelay>
}
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	50004710 	.word	0x50004710

08000a10 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d109      	bne.n	8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a26:	bf00      	nop
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f9      	beq.n	8000a28 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00a      	beq.n	8000a56 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a48:	bf00      	nop
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f9      	bne.n	8000a4a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	50004200 	.word	0x50004200
 8000a64:	50004400 	.word	0x50004400

08000a68 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	bf0c      	ite	eq
 8000a78:	2301      	moveq	r3, #1
 8000a7a:	2300      	movne	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	50004300 	.word	0x50004300

08000a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a90:	bf00      	nop
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f8      	bne.n	8000a92 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000aaa:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000aac:	bf00      	nop
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000ab0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f8      	bne.n	8000aae <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000ac8:	bf00      	nop
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000acc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1f8      	bne.n	8000aca <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000ade:	bf00      	nop
 8000ae0:	f7ff fd0e 	bl	8000500 <XMC_SCU_GetMirrorStatus>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1fa      	bne.n	8000ae0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	50004000 	.word	0x50004000
 8000af0:	50004300 	.word	0x50004300

08000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000af8:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b02:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b04:	4d0d      	ldr	r5, [pc, #52]	; (8000b3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b0e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b12:	f004 fb03 	bl	800511c <OSCHP_GetFrequency>
 8000b16:	4602      	mov	r2, r0
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8000b1e:	0d1b      	lsrs	r3, r3, #20
 8000b20:	3b01      	subs	r3, #1
 8000b22:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b24:	4323      	orrs	r3, r4
 8000b26:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b32:	6053      	str	r3, [r2, #4]
}
 8000b34:	bdb0      	pop	{r4, r5, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	50004710 	.word	0x50004710
 8000b3c:	50004700 	.word	0x50004700
 8000b40:	6b5fca6b 	.word	0x6b5fca6b

08000b44 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b50:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b54:	bf0c      	ite	eq
 8000b56:	2301      	moveq	r3, #1
 8000b58:	2300      	movne	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	50004710 	.word	0x50004710

08000b6c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b70:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7a:	f023 0302 	bic.w	r3, r3, #2
 8000b7e:	6053      	str	r3, [r2, #4]
}
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	50004710 	.word	0x50004710

08000b8c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b90:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	6053      	str	r3, [r2, #4]
}
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	50004710 	.word	0x50004710

08000bac <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60ba      	str	r2, [r7, #8]
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	81fb      	strh	r3, [r7, #14]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fdcd 	bl	8000760 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000bc6:	7b7b      	ldrb	r3, [r7, #13]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	f040 8084 	bne.w	8000cd6 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000bd4:	f004 faa2 	bl	800511c <OSCHP_GetFrequency>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	4b4b      	ldr	r3, [pc, #300]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8000be0:	0c9b      	lsrs	r3, r3, #18
 8000be2:	059b      	lsls	r3, r3, #22
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	e002      	b.n	8000bee <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000be8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bec:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	fb02 f203 	mul.w	r2, r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4a42      	ldr	r2, [pc, #264]	; (8000d0c <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	0d9b      	lsrs	r3, r3, #22
 8000c0a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c0c:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c0e:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c18:	4a3d      	ldr	r2, [pc, #244]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1a:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c24:	493a      	ldr	r1, [pc, #232]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c2c:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	3a01      	subs	r2, #1
 8000c32:	0212      	lsls	r2, r2, #8
 8000c34:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c3c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c44:	4313      	orrs	r3, r2
 8000c46:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c48:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c52:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c54:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f023 0310 	bic.w	r3, r3, #16
 8000c5e:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c60:	4a2b      	ldr	r2, [pc, #172]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c62:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c6c:	bf00      	nop
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f9      	beq.n	8000c6e <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c7a:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c86:	bf00      	nop
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f9      	bne.n	8000c88 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	095b      	lsrs	r3, r3, #5
 8000c9e:	0d9b      	lsrs	r3, r3, #22
 8000ca0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000ca2:	6a3a      	ldr	r2, [r7, #32]
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d202      	bcs.n	8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000caa:	6938      	ldr	r0, [r7, #16]
 8000cac:	f000 f838 	bl	8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	085b      	lsrs	r3, r3, #1
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	0d9b      	lsrs	r3, r3, #22
 8000cbe:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cc0:	6a3a      	ldr	r2, [r7, #32]
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d202      	bcs.n	8000cce <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000cc8:	6938      	ldr	r0, [r7, #16]
 8000cca:	f000 f829 	bl	8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000cce:	6a38      	ldr	r0, [r7, #32]
 8000cd0:	f000 f826 	bl	8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000cd4:	e015      	b.n	8000d02 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ce8:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cf4:	bf00      	nop
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f9      	beq.n	8000cf6 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	aaaaaaab 	.word	0xaaaaaaab
 8000d10:	50004710 	.word	0x50004710
 8000d14:	f08080ff 	.word	0xf08080ff
 8000d18:	88888889 	.word	0x88888889
 8000d1c:	b60b60b7 	.word	0xb60b60b7

08000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d3c:	2032      	movs	r0, #50	; 0x32
 8000d3e:	f7ff fbeb 	bl	8000518 <XMC_SCU_lDelay>
}
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	50004710 	.word	0x50004710

08000d4c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60da      	str	r2, [r3, #12]
}
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <XMC_CCU4_lDeassertReset+0x4c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d103      	bne.n	8000d84 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	f7ff fc63 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d82:	e016      	b.n	8000db2 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <XMC_CCU4_lDeassertReset+0x50>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d103      	bne.n	8000d94 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000d8c:	2008      	movs	r0, #8
 8000d8e:	f7ff fc5b 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d92:	e00e      	b.n	8000db2 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <XMC_CCU4_lDeassertReset+0x54>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d103      	bne.n	8000da4 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000d9c:	2010      	movs	r0, #16
 8000d9e:	f7ff fc53 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000da2:	e006      	b.n	8000db2 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <XMC_CCU4_lDeassertReset+0x58>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d102      	bne.n	8000db2 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <XMC_CCU4_lDeassertReset+0x5c>)
 8000dae:	f7ff fc4b 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	4000c000 	.word	0x4000c000
 8000dbc:	40010000 	.word	0x40010000
 8000dc0:	40014000 	.word	0x40014000
 8000dc4:	48004000 	.word	0x48004000
 8000dc8:	10000001 	.word	0x10000001

08000dcc <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f7ff fdab 	bl	8000930 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffc6 	bl	8000d6c <XMC_CCU4_lDeassertReset>
#endif
}
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop

08000de8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffe9 	bl	8000dcc <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa6 	bl	8000d4c <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e0c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	039b      	lsls	r3, r3, #14
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	795b      	ldrb	r3, [r3, #5]
 8000e3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	051a      	lsls	r2, r3, #20
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	791b      	ldrb	r3, [r3, #4]
 8000e4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	795b      	ldrb	r3, [r3, #5]
 8000e6a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	791b      	ldrb	r3, [r3, #4]
 8000e7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ea6:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	2b09      	cmp	r3, #9
 8000eac:	d82c      	bhi.n	8000f08 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8000eae:	a201      	add	r2, pc, #4	; (adr r2, 8000eb4 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8000eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb4:	08000edd 	.word	0x08000edd
 8000eb8:	08000edd 	.word	0x08000edd
 8000ebc:	08000ee7 	.word	0x08000ee7
 8000ec0:	08000ee7 	.word	0x08000ee7
 8000ec4:	08000f09 	.word	0x08000f09
 8000ec8:	08000f09 	.word	0x08000f09
 8000ecc:	08000f09 	.word	0x08000f09
 8000ed0:	08000f09 	.word	0x08000f09
 8000ed4:	08000ef1 	.word	0x08000ef1
 8000ed8:	08000efd 	.word	0x08000efd
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000edc:	2303      	movs	r3, #3
 8000ede:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
      break;
 8000ee4:	e016      	b.n	8000f14 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000eea:	2302      	movs	r3, #2
 8000eec:	617b      	str	r3, [r7, #20]
      break;
 8000eee:	e011      	b.n	8000f14 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000ef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	617b      	str	r3, [r7, #20]
      break;
 8000efa:	e00b      	b.n	8000f14 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000efc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f00:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000f02:	230a      	movs	r3, #10
 8000f04:	617b      	str	r3, [r7, #20]
      break;
 8000f06:	e005      	b.n	8000f14 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000f08:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f0c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000f0e:	230c      	movs	r3, #12
 8000f10:	617b      	str	r3, [r7, #20]
      break;
 8000f12:	bf00      	nop
  }
  
  srs &= ~mask; 
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8000f1e:	78ba      	ldrb	r2, [r7, #2]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8000f34:	371c      	adds	r7, #28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	60da      	str	r2, [r3, #12]
}
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	611a      	str	r2, [r3, #16]
}
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <XMC_CCU8_lDeassertReset+0x30>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d103      	bne.n	8000f90 <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8000f88:	2080      	movs	r0, #128	; 0x80
 8000f8a:	f7ff fb5d 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000f8e:	e007      	b.n	8000fa0 <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a06      	ldr	r2, [pc, #24]	; (8000fac <XMC_CCU8_lDeassertReset+0x34>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d103      	bne.n	8000fa0 <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8000f98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f9c:	f7ff fb54 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40024000 	.word	0x40024000

08000fb0 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000fb8:	2010      	movs	r0, #16
 8000fba:	f7ff fcb9 	bl	8000930 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffda 	bl	8000f78 <XMC_CCU8_lDeassertReset>
#endif
}
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop

08000fcc <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffe9 	bl	8000fb0 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffae 	bl	8000f40 <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff0:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	039b      	lsls	r3, r3, #14
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	601a      	str	r2, [r3, #0]
}
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa4 	bl	8000f60 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	7b5b      	ldrb	r3, [r3, #13]
 8001024:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	051a      	lsls	r2, r3, #20
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	7b1b      	ldrb	r3, [r3, #12]
 8001034:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001038:	b2db      	uxtb	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	7b1b      	ldrb	r3, [r3, #12]
 8001044:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	7b5b      	ldrb	r3, [r3, #13]
 8001054:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001058:	b2db      	uxtb	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f083 0214 	eor.w	r2, r3, #20
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop

0800107c <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
 8001088:	4613      	mov	r3, r2
 800108a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f023 0303 	bic.w	r3, r3, #3
 8001098:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	4313      	orrs	r3, r2
 80010a0:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 80010ae:	78bb      	ldrb	r3, [r7, #2]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d104      	bne.n	80010be <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e003      	b.n	80010c6 <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	615a      	str	r2, [r3, #20]
}
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
 80010e4:	4613      	mov	r3, r2
 80010e6:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 800110a:	78bb      	ldrb	r3, [r7, #2]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e003      	b.n	8001122 <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001120:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d104      	bne.n	8001132 <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e003      	b.n	800113a <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001138:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	615a      	str	r2, [r3, #20]
}
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	460b      	mov	r3, r1
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	3b01      	subs	r3, #1
 800115e:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8001166:	7ffb      	ldrb	r3, [r7, #31]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	3310      	adds	r3, #16
 800116e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	461a      	mov	r2, r3
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	3316      	adds	r3, #22
 8001196:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	2201      	movs	r2, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	789b      	ldrb	r3, [r3, #2]
 80011ac:	461a      	mov	r2, r3
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80011ba:	7ffb      	ldrb	r3, [r7, #31]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	3319      	adds	r3, #25
 80011c2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	78db      	ldrb	r3, [r3, #3]
 80011d8:	461a      	mov	r2, r3
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	601a      	str	r2, [r3, #0]
#endif
}
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800122c:	887a      	ldrh	r2, [r7, #2]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
 8001248:	4613      	mov	r3, r2
 800124a:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8001252:	883a      	ldrh	r2, [r7, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	63da      	str	r2, [r3, #60]	; 0x3c
 8001258:	e002      	b.n	8001260 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 800125a:	883a      	ldrh	r2, [r7, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>:
  slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
}

/* Configures status ST1, ST2 mapping to STy */
void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_STATUS_t channel)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel));

  slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	615a      	str	r2, [r3, #20]
  slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	075b      	lsls	r3, r3, #29
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	615a      	str	r2, [r3, #20]
}
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <XMC_DAC_CH_EnableOutput>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 80012d4:	78f8      	ldrb	r0, [r7, #3]
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4413      	add	r3, r2
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	00c3      	lsls	r3, r0, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	609a      	str	r2, [r3, #8]
}
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop

080012f8 <XMC_DAC_CH_EnablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SIGNEN_Msk;
 8001304:	78f8      	ldrb	r0, [r7, #3]
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4413      	add	r3, r2
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	00c3      	lsls	r3, r0, #3
 8001318:	440b      	add	r3, r1
 800131a:	605a      	str	r2, [r3, #4]
}
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop

08001328 <XMC_DAC_CH_DisablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_EnablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_DisablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].low &= ~DAC_DAC0CFG0_SIGNEN_Msk;
 8001334:	78f8      	ldrb	r0, [r7, #3]
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	00c3      	lsls	r3, r0, #3
 8001348:	440b      	add	r3, r1
 800134a:	605a      	str	r2, [r3, #4]
}
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <XMC_DAC_CH_SetRampStart>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStop()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStart(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
 8001364:	4613      	mov	r3, r2
 8001366:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACDATA[channel] = start;
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	883a      	ldrh	r2, [r7, #0]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	3304      	adds	r3, #4
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	605a      	str	r2, [r3, #4]
}
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <XMC_DAC_CH_SetRampStop>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
 800138c:	4613      	mov	r3, r2
 800138e:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69da      	ldr	r2, [r3, #28]
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4619      	mov	r1, r3
 800139a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800139e:	408b      	lsls	r3, r1
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4013      	ands	r3, r2
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 80013a4:	883a      	ldrh	r2, [r7, #0]
 80013a6:	78f9      	ldrb	r1, [r7, #3]
 80013a8:	0109      	lsls	r1, r1, #4
 80013aa:	408a      	lsls	r2, r1
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	61da      	str	r2, [r3, #28]
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
}
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <XMC_DAC_CH_SetTrigger>:
 * \par
 * Channel \a channel trigger source is selected by \a TRIGSEL bit-field of \a DAC0CFG1 register (for channel 0) / DAC1CFG1 register(for channel 1).
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetTrigger(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	460b      	mov	r3, r1
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: trigger parameter not valid\n", XMC_DAC_IS_TRIGGER_VALID(trigger));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_TRIGSEL_Msk | DAC_DAC0CFG1_TRIGMOD_Msk)) |
 80013ca:	7af8      	ldrb	r0, [r7, #11]
 80013cc:	7afb      	ldrb	r3, [r7, #11]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4413      	add	r3, r2
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f423 22ce 	bic.w	r2, r3, #421888	; 0x67000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	431a      	orrs	r2, r3
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	00c3      	lsls	r3, r0, #3
 80013e2:	440b      	add	r3, r1
 80013e4:	609a      	str	r2, [r3, #8]
                              trigger;
}
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	460b      	mov	r3, r1
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 80013fe:	7af8      	ldrb	r0, [r7, #11]
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4413      	add	r3, r2
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	431a      	orrs	r2, r3
 8001412:	68f9      	ldr	r1, [r7, #12]
 8001414:	00c3      	lsls	r3, r0, #3
 8001416:	440b      	add	r3, r1
 8001418:	605a      	str	r2, [r3, #4]
                             mode;
}
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <XMC_DAC_Enable>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* API to enable the DAC module */
void XMC_DAC_Enable(XMC_DAC_t *const dac)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(dac);
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <XMC_DAC_Enable+0x14>)
 800142e:	f7ff f90b 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	10000020 	.word	0x10000020

0800143c <XMC_DAC_CH_Init>:
  return (status);
}

/* API to initialize DAC channel configuration */
void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	460b      	mov	r3, r1
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_Enable(dac);
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff ffea 	bl	8001424 <XMC_DAC_Enable>

  dac->DACCFG[channel].low = config->cfg0;
 8001450:	7afb      	ldrb	r3, [r7, #11]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	68f9      	ldr	r1, [r7, #12]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	605a      	str	r2, [r3, #4]
  dac->DACCFG[channel].high = config->cfg1;
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6852      	ldr	r2, [r2, #4]
 8001464:	68f9      	ldr	r1, [r7, #12]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	609a      	str	r2, [r3, #8]
  if (channel < XMC_DAC_NO_CHANNELS)
 800146c:	7afb      	ldrb	r3, [r7, #11]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d804      	bhi.n	800147c <XMC_DAC_CH_Init+0x40>
  {
    XMC_DAC_CH_EnableOutput(dac, channel);
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff ff26 	bl	80012c8 <XMC_DAC_CH_EnableOutput>
  }
}
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop

08001484 <XMC_DAC_CH_SetFrequency>:

/* API to set the waveform frequency except in Ramp and Pattern generation mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac,
                                            const uint8_t channel,
                                            const uint32_t frequency)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	460b      	mov	r3, r1
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	72fb      	strb	r3, [r7, #11]
  uint32_t divider;
  XMC_DAC_CH_STATUS_t status;

  XMC_ASSERT("XMC_DAC_CH_SetFrequency: frequency must be greater than zero", frequency > 0U);

  divider = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / frequency;
 8001492:	f7ff f919 	bl	80006c8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001496:	4602      	mov	r2, r0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	613b      	str	r3, [r7, #16]

  if (divider < XMC_DAC_MIN_FREQ_DIVIDER)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b0f      	cmp	r3, #15
 80014a4:	d802      	bhi.n	80014ac <XMC_DAC_CH_SetFrequency+0x28>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH;
 80014a6:	2304      	movs	r3, #4
 80014a8:	75fb      	strb	r3, [r7, #23]
 80014aa:	e016      	b.n	80014da <XMC_DAC_CH_SetFrequency+0x56>
  }
  else if (divider >= XMC_DAC_MAX_FREQ_DIVIDER)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014b2:	d302      	bcc.n	80014ba <XMC_DAC_CH_SetFrequency+0x36>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2LOW;
 80014b4:	2303      	movs	r3, #3
 80014b6:	75fb      	strb	r3, [r7, #23]
 80014b8:	e00f      	b.n	80014da <XMC_DAC_CH_SetFrequency+0x56>
  }
  else {
    dac->DACCFG[channel].low = (dac->DACCFG[channel].low & (uint32_t)(~DAC_DAC0CFG0_FREQ_Msk)) |
 80014ba:	7af8      	ldrb	r0, [r7, #11]
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	0d1b      	lsrs	r3, r3, #20
 80014c8:	051b      	lsls	r3, r3, #20
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	68f9      	ldr	r1, [r7, #12]
 80014d0:	00c3      	lsls	r3, r0, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	605a      	str	r2, [r3, #4]
                               (divider << DAC_DAC0CFG0_FREQ_Pos);
    status = XMC_DAC_CH_STATUS_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80014da:	7dfb      	ldrb	r3, [r7, #23]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <XMC_DAC_CH_SetRampFrequency>:

/* API to set the waveform frequency in Ramp Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac,
                                                const uint8_t channel,
                                                const uint32_t frequency)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	460b      	mov	r3, r1
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	72fb      	strb	r3, [r7, #11]
  uint32_t stop;
  uint32_t start;

  start = dac->DACDATA[channel];
 80014f2:	7afb      	ldrb	r3, [r7, #11]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	3304      	adds	r3, #4
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	617b      	str	r3, [r7, #20]
  stop = (dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & (uint32_t)DAC_DAC01DATA_DATA0_Msk;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	7afa      	ldrb	r2, [r7, #11]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	40d3      	lsrs	r3, r2
 800150a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150e:	613b      	str	r3, [r7, #16]

  return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	3301      	adds	r3, #1
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	7afa      	ldrb	r2, [r7, #11]
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	4611      	mov	r1, r2
 8001524:	461a      	mov	r2, r3
 8001526:	f7ff ffad 	bl	8001484 <XMC_DAC_CH_SetFrequency>
 800152a:	4603      	mov	r3, r0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <XMC_DAC_CH_StartSingleValueMode>:

/* API to start the operation in Single Value Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	4619      	mov	r1, r3
 8001546:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800154a:	f7ff ff51 	bl	80013f0 <XMC_DAC_CH_SetMode>

  return XMC_DAC_CH_STATUS_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <XMC_DAC_CH_StartDataMode>:
/* API to start the operation in Data Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
                                             const uint8_t channel,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	460b      	mov	r3, r1
 8001566:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 800156c:	7afb      	ldrb	r3, [r7, #11]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	4619      	mov	r1, r3
 8001572:	2200      	movs	r2, #0
 8001574:	f7ff ff3c 	bl	80013f0 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d107      	bne.n	800158e <XMC_DAC_CH_StartDataMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	4619      	mov	r1, r3
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	f7ff ff7d 	bl	8001484 <XMC_DAC_CH_SetFrequency>
 800158a:	4603      	mov	r3, r0
 800158c:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10c      	bne.n	80015ae <XMC_DAC_CH_StartDataMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001594:	7afb      	ldrb	r3, [r7, #11]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	f7ff ff0e 	bl	80013bc <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_DATA);
 80015a0:	7afb      	ldrb	r3, [r7, #11]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015aa:	f7ff ff21 	bl	80013f0 <XMC_DAC_CH_SetMode>
  }

  return status;
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <XMC_DAC_CH_StartRampMode>:
                                             const uint8_t channel,
                                             const uint16_t start,
                                             const uint16_t stop,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	4608      	mov	r0, r1
 80015c2:	4611      	mov	r1, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	72fb      	strb	r3, [r7, #11]
 80015ca:	460b      	mov	r3, r1
 80015cc:	813b      	strh	r3, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	80fb      	strh	r3, [r7, #6]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	4619      	mov	r1, r3
 80015dc:	2200      	movs	r2, #0
 80015de:	f7ff ff07 	bl	80013f0 <XMC_DAC_CH_SetMode>

  XMC_DAC_CH_SetRampStart(dac, channel, start);
 80015e2:	7afa      	ldrb	r2, [r7, #11]
 80015e4:	893b      	ldrh	r3, [r7, #8]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	4611      	mov	r1, r2
 80015ea:	461a      	mov	r2, r3
 80015ec:	f7ff feb4 	bl	8001358 <XMC_DAC_CH_SetRampStart>
  XMC_DAC_CH_SetRampStop(dac, channel, stop);
 80015f0:	7afa      	ldrb	r2, [r7, #11]
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	f7ff fec1 	bl	8001380 <XMC_DAC_CH_SetRampStop>
  XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	4619      	mov	r1, r3
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	f7ff fed9 	bl	80013bc <XMC_DAC_CH_SetTrigger>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d107      	bne.n	8001620 <XMC_DAC_CH_StartRampMode+0x68>
  {
    status = XMC_DAC_CH_SetRampFrequency(dac, channel, frequency);
 8001610:	7afb      	ldrb	r3, [r7, #11]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	4619      	mov	r1, r3
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	f7ff ff64 	bl	80014e4 <XMC_DAC_CH_SetRampFrequency>
 800161c:	4603      	mov	r3, r0
 800161e:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <XMC_DAC_CH_StartRampMode+0x7c>
  {
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_RAMP);
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	4619      	mov	r1, r3
 800162c:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8001630:	f7ff fede 	bl	80013f0 <XMC_DAC_CH_SetMode>
  }

  return status;
 8001634:	7dfb      	ldrb	r3, [r7, #23]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop

08001640 <XMC_DAC_CH_StartPatternMode>:
                                                const uint8_t channel,
                                                const uint8_t *const pattern,
                                                const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
                                                const XMC_DAC_CH_TRIGGER_t trigger,
                                                const uint32_t frequency)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	72fb      	strb	r3, [r7, #11]
 8001650:	4613      	mov	r3, r2
 8001652:	72bb      	strb	r3, [r7, #10]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001658:	7afb      	ldrb	r3, [r7, #11]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	2200      	movs	r2, #0
 8001660:	f7ff fec6 	bl	80013f0 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <XMC_DAC_CH_StartPatternMode+0x3e>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	015b      	lsls	r3, r3, #5
 800166e:	7afa      	ldrb	r2, [r7, #11]
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	f7ff ff05 	bl	8001484 <XMC_DAC_CH_SetFrequency>
 800167a:	4603      	mov	r3, r0
 800167c:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d120      	bne.n	80016c6 <XMC_DAC_CH_StartPatternMode+0x86>
  {
    XMC_DAC_CH_SetPattern(dac, channel, pattern);
 8001684:	7afb      	ldrb	r3, [r7, #11]
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	4619      	mov	r1, r3
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	f000 f850 	bl	8001730 <XMC_DAC_CH_SetPattern>
    if (XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED == sign_output)
 8001690:	7abb      	ldrb	r3, [r7, #10]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d105      	bne.n	80016a2 <XMC_DAC_CH_StartPatternMode+0x62>
    {
      XMC_DAC_CH_EnablePatternSignOutput(dac, channel);
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff fe2c 	bl	80012f8 <XMC_DAC_CH_EnablePatternSignOutput>
 80016a0:	e004      	b.n	80016ac <XMC_DAC_CH_StartPatternMode+0x6c>
    }
    else
    {
      XMC_DAC_CH_DisablePatternSignOutput(dac, channel);
 80016a2:	7afb      	ldrb	r3, [r7, #11]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff fe3e 	bl	8001328 <XMC_DAC_CH_DisablePatternSignOutput>
    }
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	4619      	mov	r1, r3
 80016b2:	6a3a      	ldr	r2, [r7, #32]
 80016b4:	f7ff fe82 	bl	80013bc <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_PATTERN);
 80016b8:	7afb      	ldrb	r3, [r7, #11]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80016c2:	f7ff fe95 	bl	80013f0 <XMC_DAC_CH_SetMode>
  }

  return status;
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <XMC_DAC_CH_StartNoiseMode>:
/* API to start the operation in Noise Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
                                              const uint8_t channel,
                                              const XMC_DAC_CH_TRIGGER_t trigger,
                                              const uint32_t frequency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	460b      	mov	r3, r1
 80016de:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80016e4:	7afb      	ldrb	r3, [r7, #11]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	4619      	mov	r1, r3
 80016ea:	2200      	movs	r2, #0
 80016ec:	f7ff fe80 	bl	80013f0 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <XMC_DAC_CH_StartNoiseMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	4619      	mov	r1, r3
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	f7ff fec1 	bl	8001484 <XMC_DAC_CH_SetFrequency>
 8001702:	4603      	mov	r3, r0
 8001704:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10c      	bne.n	8001726 <XMC_DAC_CH_StartNoiseMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 800170c:	7afb      	ldrb	r3, [r7, #11]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	4619      	mov	r1, r3
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	f7ff fe52 	bl	80013bc <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_NOISE);
 8001718:	7afb      	ldrb	r3, [r7, #11]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001722:	f7ff fe65 	bl	80013f0 <XMC_DAC_CH_SetMode>
  }

  return status;
 8001726:	7dfb      	ldrb	r3, [r7, #23]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <XMC_DAC_CH_SetPattern>:

/* API to write the pattern data table. */
void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, uint8_t channel, const uint8_t *const data)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	460b      	mov	r3, r1
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	72fb      	strb	r3, [r7, #11]

  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 8001744:	2301      	movs	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e010      	b.n	800176c <XMC_DAC_CH_SetPattern+0x3c>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
  for(index = 1U; index < 6U; ++index)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d9eb      	bls.n	800174a <XMC_DAC_CH_SetPattern+0x1a>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;
 8001772:	7afa      	ldrb	r2, [r7, #11]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3204      	adds	r2, #4
 8001778:	6939      	ldr	r1, [r7, #16]
 800177a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

  temp = data[6U];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3306      	adds	r3, #6
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 8001786:	2301      	movs	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e011      	b.n	80017b0 <XMC_DAC_CH_SetPattern+0x80>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3306      	adds	r3, #6
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;

  temp = data[6U];
  for(index = 1U; index < 6U; ++index)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	d9ea      	bls.n	800178c <XMC_DAC_CH_SetPattern+0x5c>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].high = temp;
 80017b6:	7afb      	ldrb	r3, [r7, #11]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	3304      	adds	r3, #4
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	605a      	str	r2, [r3, #4]
}
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
 80017dc:	4613      	mov	r3, r2
 80017de:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4619      	mov	r1, r3
 80017ea:	2303      	movs	r3, #3
 80017ec:	408b      	lsls	r3, r1
 80017ee:	43db      	mvns	r3, r3
 80017f0:	401a      	ands	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017fa:	78bb      	ldrb	r3, [r7, #2]
 80017fc:	78f9      	ldrb	r1, [r7, #3]
 80017fe:	0049      	lsls	r1, r1, #1
 8001800:	408b      	lsls	r3, r1
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop

08001814 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f922 	bl	8001a88 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	791b      	ldrb	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d106      	bne.n	800185a <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4619      	mov	r1, r3
 8001854:	2202      	movs	r2, #2
 8001856:	f000 f963 	bl	8001b20 <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <XMC_SPI_CH_Init+0x64>)
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8001866:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	791b      	ldrb	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d107      	bne.n	8001880 <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8001874:	f043 030b 	orr.w	r3, r3, #11
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f04f 32ff 	mov.w	r2, #4294967295
 8001886:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	88db      	ldrh	r3, [r3, #6]
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	073f0102 	.word	0x073f0102

0800189c <XMC_SPI_CH_EnableSlaveSelect>:
  return status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018aa:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <XMC_SPI_CH_DisableSlaveSelect>:

/* Disable the slave signals by clearing (SELO) bits in PCR register. */
void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	2101      	movs	r1, #1
 80018d4:	f7ff ff9e 	bl	8001814 <XMC_SPI_CH_ClearStatusFlag>
  
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop

080018ec <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80018fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d103      	bne.n	800190a <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	81fb      	strh	r3, [r7, #14]
 8001908:	e003      	b.n	8001912 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001910:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001912:	89fb      	ldrh	r3, [r7, #14]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001932:	b2db      	uxtb	r3, r3
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001966:	2310      	movs	r3, #16
 8001968:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f88c 	bl	8001a88 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	79db      	ldrb	r3, [r3, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	79db      	ldrb	r3, [r3, #7]
 800197c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4619      	mov	r1, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	f000 f8ca 	bl	8001b20 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	799b      	ldrb	r3, [r3, #6]
 8001990:	3b01      	subs	r3, #1
 8001992:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	3301      	adds	r3, #1
 800199a:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800199c:	4313      	orrs	r3, r2
 800199e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	791b      	ldrb	r3, [r3, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	795b      	ldrb	r3, [r3, #5]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	795b      	ldrb	r3, [r3, #5]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34
 80019d4:	e008      	b.n	80019e8 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	041b      	lsls	r3, r3, #16
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80019ee:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f04f 32ff 	mov.w	r2, #4294967295
 80019f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	891b      	ldrh	r3, [r3, #8]
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a1a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d110      	bne.n	8001a44 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001a22:	bf00      	nop
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff7b 	bl	8001920 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b80      	cmp	r3, #128	; 0x80
 8001a2e:	d0f9      	beq.n	8001a24 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a36:	f7ff ff83 	bl	8001940 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a42:	e003      	b.n	8001a4c <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop

08001a54 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001a62:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d103      	bne.n	8001a72 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6e:	81fb      	strh	r3, [r7, #14]
 8001a70:	e003      	b.n	8001a7a <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001a78:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <XMC_USIC_CH_Enable+0x74>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d003      	beq.n	8001aa0 <XMC_USIC_CH_Enable+0x18>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <XMC_USIC_CH_Enable+0x78>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d103      	bne.n	8001aa8 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001aa0:	4818      	ldr	r0, [pc, #96]	; (8001b04 <XMC_USIC_CH_Enable+0x7c>)
 8001aa2:	f000 f93d 	bl	8001d20 <XMC_USIC_Enable>
 8001aa6:	e016      	b.n	8001ad6 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <XMC_USIC_CH_Enable+0x80>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d003      	beq.n	8001ab8 <XMC_USIC_CH_Enable+0x30>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <XMC_USIC_CH_Enable+0x84>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d103      	bne.n	8001ac0 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001ab8:	4815      	ldr	r0, [pc, #84]	; (8001b10 <XMC_USIC_CH_Enable+0x88>)
 8001aba:	f000 f931 	bl	8001d20 <XMC_USIC_Enable>
 8001abe:	e00a      	b.n	8001ad6 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <XMC_USIC_CH_Enable+0x8c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d003      	beq.n	8001ad0 <XMC_USIC_CH_Enable+0x48>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <XMC_USIC_CH_Enable+0x90>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d102      	bne.n	8001ad6 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001ad0:	4812      	ldr	r0, [pc, #72]	; (8001b1c <XMC_USIC_CH_Enable+0x94>)
 8001ad2:	f000 f925 	bl	8001d20 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001adc:	bf00      	nop
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f9      	beq.n	8001ade <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f023 020f 	bic.w	r2, r3, #15
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40030000 	.word	0x40030000
 8001b00:	40030200 	.word	0x40030200
 8001b04:	40030008 	.word	0x40030008
 8001b08:	48020000 	.word	0x48020000
 8001b0c:	48020200 	.word	0x48020200
 8001b10:	48020008 	.word	0x48020008
 8001b14:	48024000 	.word	0x48024000
 8001b18:	48024200 	.word	0x48024200
 8001b1c:	48024008 	.word	0x48024008

08001b20 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08e      	sub	sp, #56	; 0x38
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b63      	cmp	r3, #99	; 0x63
 8001b30:	d958      	bls.n	8001be4 <XMC_USIC_CH_SetBaudrate+0xc4>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d055      	beq.n	8001be4 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001b38:	f7fe fdc6 	bl	80006c8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001b40:	fba3 2302 	umull	r2, r3, r3, r2
 8001b44:	095b      	lsrs	r3, r3, #5
 8001b46:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	095b      	lsrs	r3, r3, #5
 8001b52:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001b54:	2301      	movs	r3, #1
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001b5c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001b62:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
 8001b68:	e022      	b.n	8001bb0 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	0a9b      	lsrs	r3, r3, #10
 8001b84:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b8c:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b94:	d209      	bcs.n	8001baa <XMC_USIC_CH_SetBaudrate+0x8a>
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d205      	bcs.n	8001baa <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	3b01      	subs	r3, #1
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
 8001bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1d9      	bne.n	8001b6a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001bc6:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001bce:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001bd6:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001be2:	e002      	b.n	8001bea <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001bea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3738      	adds	r7, #56	; 0x38
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	51eb851f 	.word	0x51eb851f
 8001bfc:	fc0080ef 	.word	0xfc0080ef

08001c00 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c16:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001c28:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	0211      	lsls	r1, r2, #8
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001c32:	79fa      	ldrb	r2, [r7, #7]
 8001c34:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001c36:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001c38:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	f8ffc0c0 	.word	0xf8ffc0c0

08001c50 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c66:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001c78:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	0211      	lsls	r1, r2, #8
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001c82:	79fa      	ldrb	r2, [r7, #7]
 8001c84:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001c86:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	efffc0c0 	.word	0xefffc0c0

08001ca4 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	460b      	mov	r3, r1
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001cb8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001cc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001cd0:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
 8001cd4:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	2107      	movs	r1, #7
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <XMC_USIC_Enable+0x40>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d104      	bne.n	8001d3a <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001d30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d34:	f7fe fc88 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001d38:	e00e      	b.n	8001d58 <XMC_USIC_Enable+0x38>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <XMC_USIC_Enable+0x44>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d103      	bne.n	8001d4a <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001d42:	4809      	ldr	r0, [pc, #36]	; (8001d68 <XMC_USIC_Enable+0x48>)
 8001d44:	f7fe fc80 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001d48:	e006      	b.n	8001d58 <XMC_USIC_Enable+0x38>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <XMC_USIC_Enable+0x4c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d102      	bne.n	8001d58 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001d52:	4807      	ldr	r0, [pc, #28]	; (8001d70 <XMC_USIC_Enable+0x50>)
 8001d54:	f7fe fc78 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40030008 	.word	0x40030008
 8001d64:	48020008 	.word	0x48020008
 8001d68:	10000080 	.word	0x10000080
 8001d6c:	48024008 	.word	0x48024008
 8001d70:	10000100 	.word	0x10000100

08001d74 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001d7e:	783b      	ldrb	r3, [r7, #0]
 8001d80:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001d88:	78bb      	ldrb	r3, [r7, #2]
 8001d8a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001db2:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop

08001e04 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e12:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop

08001e28 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7fe fc0b 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001e3e:	f7ff fff3 	bl	8001e28 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop

08001e88 <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e016      	b.n	8001ed4 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001ebe:	bf00      	nop
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f8      	bne.n	8001ec0 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d9e5      	bls.n	8001ea6 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	08007390 	.word	0x08007390

08001ee8 <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2300      	movs	r3, #0
 8001efc:	f000 f828 	bl	8001f50 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f000 f821 	bl	8001f50 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	6899      	ldr	r1, [r3, #8]
 8001f14:	2200      	movs	r2, #0
 8001f16:	2301      	movs	r3, #1
 8001f18:	f000 f81a 	bl	8001f50 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	2201      	movs	r2, #1
 8001f24:	2301      	movs	r3, #1
 8001f26:	f000 f813 	bl	8001f50 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	f7ff ff16 	bl	8001d74 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop

08001f50 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b08d      	sub	sp, #52	; 0x34
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d113      	bne.n	8001f8e <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8001f66:	2308      	movs	r3, #8
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001f6a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8001f74:	231f      	movs	r3, #31
 8001f76:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001f78:	7a3b      	ldrb	r3, [r7, #8]
 8001f7a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001f82:	7a7b      	ldrb	r3, [r7, #9]
 8001f84:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	76fb      	strb	r3, [r7, #27]
 8001f8c:	e013      	b.n	8001fb6 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001f8e:	2318      	movs	r3, #24
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001f92:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001f98:	2310      	movs	r3, #16
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001f9c:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001fa0:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001fa2:	7abb      	ldrb	r3, [r7, #10]
 8001fa4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	3228      	adds	r2, #40	; 0x28
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001fcc:	7efa      	ldrb	r2, [r7, #27]
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	3228      	adds	r2, #40	; 0x28
 8001ff8:	6979      	ldr	r1, [r7, #20]
 8001ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001ffe:	3734      	adds	r7, #52	; 0x34
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800201a:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop

08002040 <XMC_VADC_GROUP_SetSyncSlave>:

/* API which programs a group as a slave group during sync conversions */
void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t slave_grp)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  
  #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )

  /* Determine the coding of SYNCTR */
  if (slave_grp > master_grp)
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	429a      	cmp	r2, r3
 8002052:	d902      	bls.n	800205a <XMC_VADC_GROUP_SetSyncSlave+0x1a>
  {
    master_grp = master_grp + 1U;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	3301      	adds	r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
  }
  #endif
  
  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002060:	617b      	str	r3, [r7, #20]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f023 0303 	bic.w	r3, r3, #3
 8002068:	617b      	str	r3, [r7, #20]
  synctr   |= master_grp;
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
  group_ptr->SYNCTR = synctr;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <XMC_VADC_GROUP_SetSyncMaster>:

/* API which programs a group as a master group during sync conversions */
void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t synctr;

  XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  synctr = group_ptr->SYNCTR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002092:	60fb      	str	r3, [r7, #12]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	60fb      	str	r3, [r7, #12]
  group_ptr->SYNCTR = synctr;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop

080020b0 <XMC_VADC_GROUP_CheckSlaveReadiness>:

/* API to enable checking of readiness of slaves before a synchronous conversion request is issued */
void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1))))

  master_grp_num =0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	e00b      	b.n	80020dc <XMC_VADC_GROUP_CheckSlaveReadiness+0x2c>
  {
    if(g_xmc_vadc_group_array[i] == group_ptr)
 80020c4:	4a13      	ldr	r2, [pc, #76]	; (8002114 <XMC_VADC_GROUP_CheckSlaveReadiness+0x64>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d101      	bne.n	80020d6 <XMC_VADC_GROUP_CheckSlaveReadiness+0x26>
    {
      master_grp_num = i;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1))))

  master_grp_num =0;
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3301      	adds	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d9f0      	bls.n	80020c4 <XMC_VADC_GROUP_CheckSlaveReadiness+0x14>
      master_grp_num = i;
    }
  }


  if(slave_group < master_grp_num)
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d202      	bcs.n	80020f0 <XMC_VADC_GROUP_CheckSlaveReadiness+0x40>
  {
    slave_group++;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	603b      	str	r3, [r7, #0]
  }
  group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	3303      	adds	r3, #3
 80020fa:	4619      	mov	r1, r3
 80020fc:	2301      	movs	r3, #1
 80020fe:	408b      	lsls	r3, r1
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	08007390 	.word	0x08007390

08002118 <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fe6e 	bl	8001e04 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
  
  reg = group_ptr->ARBPR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800212e:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <XMC_VADC_GROUP_QueueInit+0x48>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8002170:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d107      	bne.n	80021a6 <XMC_VADC_GROUP_QueueInit+0x8e>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800219c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fe1a 	bl	8001de0 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop

080021b4 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>:
  return ch_num;
}

/* Select a Service Request line for the request source event */
void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80021c6:	60fb      	str	r3, [r7, #12]

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 030f 	bic.w	r3, r3, #15
 80021ce:	60fb      	str	r3, [r7, #12]
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

  group_ptr->SEVNP = sevnp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

}
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7a1b      	ldrb	r3, [r3, #8]
 80021fc:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002204:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2201      	movs	r2, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4013      	ands	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7a5b      	ldrb	r3, [r3, #9]
 8002230:	b25b      	sxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	db29      	blt.n	800228a <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d10a      	bne.n	8002256 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8002240:	2308      	movs	r3, #8
 8002242:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800224a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002254:	e00c      	b.n	8002270 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002266:	f023 021f 	bic.w	r2, r3, #31
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	7a52      	ldrb	r2, [r2, #9]
 800227a:	b251      	sxtb	r1, r2
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	431a      	orrs	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	431a      	orrs	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6819      	ldr	r1, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	3280      	adds	r2, #128	; 0x80
 80022a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80022aa:	3724      	adds	r7, #36	; 0x24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	71fb      	strb	r3, [r7, #7]

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b07      	cmp	r3, #7
 80022c6:	d818      	bhi.n	80022fa <XMC_VADC_GROUP_SetResultInterruptNode+0x46>
  {
    route_mask  = group_ptr->REVNP0;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80022ce:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	461a      	mov	r2, r3
 80022d6:	230f      	movs	r3, #15
 80022d8:	4093      	lsls	r3, r2
 80022da:	43db      	mvns	r3, r3
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	4013      	ands	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	4093      	lsls	r3, r2
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP0 = route_mask;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 80022f8:	e01e      	b.n	8002338 <XMC_VADC_GROUP_SetResultInterruptNode+0x84>
  }
  else
  {
    route_mask = group_ptr->REVNP1;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8002300:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002308:	3b08      	subs	r3, #8
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	461a      	mov	r2, r3
 800230e:	230f      	movs	r3, #15
 8002310:	4093      	lsls	r3, r2
 8002312:	43db      	mvns	r3, r3
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	4013      	ands	r3, r2
 8002318:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 800231a:	79fa      	ldrb	r2, [r7, #7]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002322:	3b08      	subs	r3, #8
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP1 = route_mask;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
}
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop

08002344 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	43db      	mvns	r3, r3
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop

08002394 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023a6:	b2db      	uxtb	r3, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	401a      	ands	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop

080023dc <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80023ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	43db      	mvns	r3, r3
 8002464:	401a      	ands	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop

08002478 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002486:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4798      	blx	r3
 80024d0:	4603      	mov	r3, r0
 80024d2:	73fb      	strb	r3, [r7, #15]

  return status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop

080024e0 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80024ec:	2304      	movs	r3, #4
 80024ee:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d000      	beq.n	80024fe <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80024fc:	e007      	b.n	800250e <UART_Receive+0x2e>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	f000 f808 	bl	8002518 <UART_StartReceiveIRQ>
 8002508:	4603      	mov	r3, r0
 800250a:	75fb      	strb	r3, [r7, #23]
    break;
 800250c:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 800250e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8002524:	2304      	movs	r3, #4
 8002526:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002536:	2b00      	cmp	r3, #0
 8002538:	d13e      	bne.n	80025b8 <UART_StartReceiveIRQ+0xa0>
  {
    ret_stat = UART_STATUS_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->rx_busy == false)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	7e5b      	ldrb	r3, [r3, #25]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f083 0301 	eor.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d034      	beq.n	80025b8 <UART_StartReceiveIRQ+0xa0>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d02f      	beq.n	80025b4 <UART_StartReceiveIRQ+0x9c>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d02c      	beq.n	80025b4 <UART_StartReceiveIRQ+0x9c>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2201      	movs	r2, #1
 800256a:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d010      	beq.n	80025a0 <UART_StartReceiveIRQ+0x88>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff78 	bl	8002478 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	f000 f930 	bl	80027f0 <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800259a:	f7ff ff47 	bl	800242c <XMC_USIC_CH_RXFIFO_EnableEvent>
 800259e:	e006      	b.n	80025ae <UART_StartReceiveIRQ+0x96>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80025aa:	f7ff fed1 	bl	8002350 <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 80025ae:	2300      	movs	r3, #0
 80025b0:	75fb      	strb	r3, [r7, #23]
 80025b2:	e001      	b.n	80025b8 <UART_StartReceiveIRQ+0xa0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 80025b4:	2303      	movs	r3, #3
 80025b6:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop

080025c4 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d240      	bcs.n	8002660 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d027      	beq.n	800263a <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80025ea:	e01a      	b.n	8002622 <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d212      	bcs.n	800261e <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4413      	add	r3, r2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	4608      	mov	r0, r1
 800260c:	4619      	mov	r1, r3
 800260e:	f7ff f9fb 	bl	8001a08 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	e001      	b.n	8002622 <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 800261e:	bf00      	nop
 8002620:	e053      	b.n	80026ca <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fed8 	bl	80023dc <XMC_USIC_CH_TXFIFO_IsFull>
 800262c:	4603      	mov	r3, r0
 800262e:	f083 0301 	eor.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1d9      	bne.n	80025ec <UART_lTransmitHandler+0x28>
 8002638:	e047      	b.n	80026ca <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4608      	mov	r0, r1
 800264e:	4619      	mov	r1, r3
 8002650:	f7ff f9da 	bl	8001a08 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	e034      	b.n	80026ca <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fecd 	bl	8002404 <XMC_USIC_CH_TXFIFO_IsEmpty>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d02c      	beq.n	80026ca <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002686:	f7ff fe95 	bl	80023b4 <XMC_USIC_CH_TXFIFO_DisableEvent>
 800268a:	e006      	b.n	800269a <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002696:	f7ff fe6b 	bl	8002370 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800269a:	bf00      	nop
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fe77 	bl	8002394 <XMC_USIC_CH_GetTransmitBufferStatus>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b80      	cmp	r3, #128	; 0x80
 80026aa:	d0f7      	beq.n	800269c <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4798      	blx	r3
      }
    }
  }
}
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d04e      	beq.n	8002788 <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 80026ea:	e032      	b.n	8002752 <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d211      	bcs.n	800271c <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	18d4      	adds	r4, r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f9a4 	bl	8001a54 <XMC_UART_CH_GetReceivedData>
 800270c:	4603      	mov	r3, r0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	429a      	cmp	r2, r3
 8002726:	d114      	bne.n	8002752 <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002738:	f7ff fe8a 	bl	8002450 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4798      	blx	r3
        }
        break;
 800274e:	e00b      	b.n	8002768 <UART_lReceiveHandler+0x98>
 8002750:	e00a      	b.n	8002768 <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fe9c 	bl	8002494 <XMC_USIC_CH_RXFIFO_IsEmpty>
 800275c:	4603      	mov	r3, r0
 800275e:	f083 0301 	eor.w	r3, r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1c1      	bne.n	80026ec <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d23a      	bcs.n	80027ea <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4619      	mov	r1, r3
 8002782:	f000 f835 	bl	80027f0 <UART_lReconfigureRxFIFO>
 8002786:	e030      	b.n	80027ea <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d211      	bcs.n	80027b8 <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	18d4      	adds	r4, r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff f956 	bl	8001a54 <XMC_UART_CH_GetReceivedData>
 80027a8:	4603      	mov	r3, r0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d112      	bne.n	80027ea <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80027d4:	f7ff fdcc 	bl	8002370 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4798      	blx	r3
      }
    }
  }
}
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd90      	pop	{r4, r7, pc}

080027f0 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002806:	461a      	mov	r2, r3
 8002808:	2301      	movs	r3, #1
 800280a:	4093      	lsls	r3, r2
 800280c:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	429a      	cmp	r2, r3
 8002814:	d203      	bcs.n	800281e <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	3b01      	subs	r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	e002      	b.n	8002824 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3b01      	subs	r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 800282c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	f7ff fa35 	bl	8001ca4 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800284c:	0a1b      	lsrs	r3, r3, #8
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <__NVIC_EnableIRQ+0x34>)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	79fa      	ldrb	r2, [r7, #7]
 8002878:	f002 021f 	and.w	r2, r2, #31
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100

08002894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db0a      	blt.n	80028be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	490d      	ldr	r1, [pc, #52]	; (80028e0 <__NVIC_SetPriority+0x4c>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80028bc:	e00a      	b.n	80028d4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028be:	4909      	ldr	r1, [pc, #36]	; (80028e4 <__NVIC_SetPriority+0x50>)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	3b04      	subs	r3, #4
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	0092      	lsls	r2, r2, #2
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	761a      	strb	r2, [r3, #24]
  }
}
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f1c3 0307 	rsb	r3, r3, #7
 8002902:	2b06      	cmp	r3, #6
 8002904:	bf28      	it	cs
 8002906:	2306      	movcs	r3, #6
 8002908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3306      	adds	r3, #6
 800290e:	2b06      	cmp	r3, #6
 8002910:	d902      	bls.n	8002918 <NVIC_EncodePriority+0x30>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b01      	subs	r3, #1
 8002916:	e000      	b.n	800291a <NVIC_EncodePriority+0x32>
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2201      	movs	r2, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	401a      	ands	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	1e59      	subs	r1, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800293c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800293e:	4618      	mov	r0, r3
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
 8002958:	4613      	mov	r3, r2
 800295a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800295c:	78f8      	ldrb	r0, [r7, #3]
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	3306      	adds	r3, #6
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800296e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002970:	431a      	orrs	r2, r3
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	1d83      	adds	r3, r0, #6
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop

08002988 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f023 030f 	bic.w	r3, r3, #15
 8002998:	f043 0202 	orr.w	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop

080029ac <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 80029b2:	2300      	movs	r3, #0
 80029b4:	71fb      	strb	r3, [r7, #7]
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &UART_0_channel_config);
 80029b6:	4825      	ldr	r0, [pc, #148]	; (8002a4c <UART_0_init+0xa0>)
 80029b8:	4925      	ldr	r1, [pc, #148]	; (8002a50 <UART_0_init+0xa4>)
 80029ba:	f7fe ffcf 	bl	800195c <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 3U);
 80029be:	4823      	ldr	r0, [pc, #140]	; (8002a4c <UART_0_init+0xa0>)
 80029c0:	2100      	movs	r1, #0
 80029c2:	2203      	movs	r2, #3
 80029c4:	f7ff ffc2 	bl	800294c <XMC_USIC_CH_SetInputSource>
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 80029c8:	4820      	ldr	r0, [pc, #128]	; (8002a4c <UART_0_init+0xa0>)
 80029ca:	f7ff ffdd 	bl	8002988 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 14U, &UART_0_tx_pin_config);
 80029ce:	4821      	ldr	r0, [pc, #132]	; (8002a54 <UART_0_init+0xa8>)
 80029d0:	210e      	movs	r1, #14
 80029d2:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <UART_0_init+0xac>)
 80029d4:	f7fd fce8 	bl	80003a8 <XMC_GPIO_Init>

  /*Set service request for transmit interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
 80029d8:	481c      	ldr	r0, [pc, #112]	; (8002a4c <UART_0_init+0xa0>)
 80029da:	2104      	movs	r1, #4
 80029dc:	2201      	movs	r2, #1
 80029de:	f7ff f983 	bl	8001ce8 <XMC_USIC_CH_SetInterruptNodePointer>
     1U);
  /*Set service request for receive interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
 80029e2:	481a      	ldr	r0, [pc, #104]	; (8002a4c <UART_0_init+0xa0>)
 80029e4:	2108      	movs	r1, #8
 80029e6:	2200      	movs	r2, #0
 80029e8:	f7ff f97e 	bl	8001ce8 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
 80029ec:	4817      	ldr	r0, [pc, #92]	; (8002a4c <UART_0_init+0xa0>)
 80029ee:	210c      	movs	r1, #12
 80029f0:	2200      	movs	r2, #0
 80029f2:	f7ff f979 	bl	8001ce8 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 80029f6:	4815      	ldr	r0, [pc, #84]	; (8002a4c <UART_0_init+0xa0>)
 80029f8:	2110      	movs	r1, #16
 80029fa:	2202      	movs	r2, #2
 80029fc:	f7ff f974 	bl	8001ce8 <XMC_USIC_CH_SetInterruptNodePointer>
     2U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002a00:	f7ff ff1e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4618      	mov	r0, r3
 8002a08:	2101      	movs	r1, #1
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f7ff ff6c 	bl	80028e8 <NVIC_EncodePriority>
 8002a10:	4603      	mov	r3, r0
 8002a12:	205b      	movs	r0, #91	; 0x5b
 8002a14:	4619      	mov	r1, r3
 8002a16:	f7ff ff3d 	bl	8002894 <__NVIC_SetPriority>
                        1U, 0U));
  NVIC_EnableIRQ((IRQn_Type)91);
 8002a1a:	205b      	movs	r0, #91	; 0x5b
 8002a1c:	f7ff ff1e 	bl	800285c <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002a20:	f7ff ff0e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4618      	mov	r0, r3
 8002a28:	2101      	movs	r1, #1
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f7ff ff5c 	bl	80028e8 <NVIC_EncodePriority>
 8002a30:	4603      	mov	r3, r0
 8002a32:	205a      	movs	r0, #90	; 0x5a
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7ff ff2d 	bl	8002894 <__NVIC_SetPriority>
                      1U, 0U));
  NVIC_EnableIRQ((IRQn_Type)90);
 8002a3a:	205a      	movs	r0, #90	; 0x5a
 8002a3c:	f7ff ff0e 	bl	800285c <__NVIC_EnableIRQ>
  return status;
 8002a40:	79fb      	ldrb	r3, [r7, #7]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	48020000 	.word	0x48020000
 8002a50:	080073a0 	.word	0x080073a0
 8002a54:	48028200 	.word	0x48028200
 8002a58:	080073ac 	.word	0x080073ac

08002a5c <USIC1_1_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
 8002a60:	4801      	ldr	r0, [pc, #4]	; (8002a68 <USIC1_1_IRQHandler+0xc>)
 8002a62:	f7ff fdaf 	bl	80025c4 <UART_lTransmitHandler>
}
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000000 	.word	0x20000000

08002a6c <USIC1_0_IRQHandler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
 8002a70:	4801      	ldr	r0, [pc, #4]	; (8002a78 <USIC1_0_IRQHandler+0xc>)
 8002a72:	f7ff fe2d 	bl	80026d0 <UART_lReceiveHandler>
}
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000000 	.word	0x20000000

08002a7c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	60da      	str	r2, [r3, #12]
}
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	60da      	str	r2, [r3, #12]
}
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	611a      	str	r2, [r3, #16]
}
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002ae0:	887a      	ldrh	r2, [r7, #2]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8002afc:	887a      	ldrh	r2, [r7, #2]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	611a      	str	r2, [r3, #16]
}
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop

08002b28 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b66:	f083 0301 	eor.w	r3, r3, #1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d104      	bne.n	8002b84 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f808 	bl	8002b90 <TIMER_CCU4_lInit>
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop

08002b90 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 f833 	bl	8004c08 <GLOBAL_CCU4_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7e1b      	ldrb	r3, [r3, #24]
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7ff ff62 	bl	8002a7c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f7fe f92e 	bl	8000e24 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f82d 	bl	8002c28 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00f      	beq.n	8002bf8 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be2:	4610      	mov	r0, r2
 8002be4:	2100      	movs	r1, #0
 8002be6:	461a      	mov	r2, r3
 8002be8:	f7fe f952 	bl	8000e90 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	f7ff ff98 	bl	8002b28 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff5d 	bl	8002abc <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff43 	bl	8002aa4 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7ff ff4a 	bl	8002ad4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	4618      	mov	r0, r3
 8002c46:	2100      	movs	r1, #0
 8002c48:	f7ff ff52 	bl	8002af0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f7ff ff57 	bl	8002b0c <XMC_CCU4_EnableShadowTransfer>
}
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c70:	0a1b      	lsrs	r3, r3, #8
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	db0a      	blt.n	8002caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	490d      	ldr	r1, [pc, #52]	; (8002ccc <__NVIC_SetPriority+0x4c>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002ca8:	e00a      	b.n	8002cc0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002caa:	4909      	ldr	r1, [pc, #36]	; (8002cd0 <__NVIC_SetPriority+0x50>)
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	0092      	lsls	r2, r2, #2
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	761a      	strb	r2, [r3, #24]
  }
}
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e000e100 	.word	0xe000e100
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f1c3 0307 	rsb	r3, r3, #7
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	bf28      	it	cs
 8002cf2:	2306      	movcs	r3, #6
 8002cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3306      	adds	r3, #6
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d902      	bls.n	8002d04 <NVIC_EncodePriority+0x30>
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	e000      	b.n	8002d06 <NVIC_EncodePriority+0x32>
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	1e5a      	subs	r2, r3, #1
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	401a      	ands	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	1e59      	subs	r1, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002d28:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop

08002d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d48:	d301      	bcc.n	8002d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00f      	b.n	8002d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <SysTick_Config+0x40>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d56:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5a:	213f      	movs	r1, #63	; 0x3f
 8002d5c:	f7ff ff90 	bl	8002c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <SysTick_Config+0x40>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <SysTick_Config+0x40>)
 8002d68:	2207      	movs	r2, #7
 8002d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000e010 	.word	0xe000e010

08002d7c <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8002d7c:	b490      	push	{r4, r7}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8002d84:	2300      	movs	r3, #0
 8002d86:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8002d88:	496b      	ldr	r1, [pc, #428]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3318      	adds	r3, #24
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8002d9c:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4a62      	ldr	r2, [pc, #392]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002db0:	4413      	add	r3, r2
 8002db2:	4a62      	ldr	r2, [pc, #392]	; (8002f3c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e0bb      	b.n	8002f30 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8002db8:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8002dc2:	e0ab      	b.n	8002f1c <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	dc7a      	bgt.n	8002ecc <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d026      	beq.n	8002e2c <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002dee:	4413      	add	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	4850      	ldr	r0, [pc, #320]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4403      	add	r3, r0
 8002e04:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8002e06:	494c      	ldr	r1, [pc, #304]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4a45      	ldr	r2, [pc, #276]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002e24:	441a      	add	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	e01c      	b.n	8002e66 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8002e2c:	4b43      	ldr	r3, [pc, #268]	; (8002f3c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	4841      	ldr	r0, [pc, #260]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4403      	add	r3, r0
 8002e3e:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8002e40:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4a3a      	ldr	r2, [pc, #232]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002e50:	4413      	add	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4a36      	ldr	r2, [pc, #216]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002e60:	4413      	add	r3, r2
 8002e62:	4a36      	ldr	r2, [pc, #216]	; (8002f3c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002e64:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8002e66:	4934      	ldr	r1, [pc, #208]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	18d1      	adds	r1, r2, r3
 8002e7c:	482e      	ldr	r0, [pc, #184]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4403      	add	r3, r0
 8002e8a:	3318      	adds	r3, #24
 8002e8c:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8002e8e:	492a      	ldr	r1, [pc, #168]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	4826      	ldr	r0, [pc, #152]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4403      	add	r3, r0
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6998      	ldr	r0, [r3, #24]
 8002eb0:	4c21      	ldr	r4, [pc, #132]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4423      	add	r3, r4
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1ac3      	subs	r3, r0, r3
 8002ec4:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	e024      	b.n	8002f16 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dd21      	ble.n	8002f16 <SYSTIMER_lInsertTimerList+0x19a>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11d      	bne.n	8002f16 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8002eda:	4917      	ldr	r1, [pc, #92]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002ef8:	441a      	add	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8002efe:	6939      	ldr	r1, [r7, #16]
 8002f00:	480d      	ldr	r0, [pc, #52]	; (8002f38 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4403      	add	r3, r0
 8002f0e:	3318      	adds	r3, #24
 8002f10:	6019      	str	r1, [r3, #0]
          found_flag = true;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <SYSTIMER_lInsertTimerList+0x1b4>
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	f083 0301 	eor.w	r3, r3, #1
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f47f af4a 	bne.w	8002dc4 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc90      	pop	{r4, r7}
 8002f36:	4770      	bx	lr
 8002f38:	20000478 	.word	0x20000478
 8002f3c:	20000350 	.word	0x20000350

08002f40 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4a29      	ldr	r2, [pc, #164]	; (8002ff8 <SYSTIMER_lRemoveTimerList+0xb8>)
 8002f54:	4413      	add	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <SYSTIMER_lRemoveTimerList+0x30>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8002f68:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <SYSTIMER_lRemoveTimerList+0xbc>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e03d      	b.n	8002fec <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d114      	bne.n	8002fa2 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <SYSTIMER_lRemoveTimerList+0xbc>)
 8002f7e:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8002f80:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <SYSTIMER_lRemoveTimerList+0xbc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <SYSTIMER_lRemoveTimerList+0xbc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <SYSTIMER_lRemoveTimerList+0xbc>)
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	6991      	ldr	r1, [r2, #24]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	6992      	ldr	r2, [r2, #24]
 8002f96:	440a      	add	r2, r1
 8002f98:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e024      	b.n	8002fec <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d107      	bne.n	8002fba <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	e018      	b.n	8002fec <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	6852      	ldr	r2, [r2, #4]
 8002fcc:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	6991      	ldr	r1, [r2, #24]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	6992      	ldr	r2, [r2, #24]
 8002fdc:	440a      	add	r2, r1
 8002fde:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	605a      	str	r2, [r3, #4]
  }
}
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000478 	.word	0x20000478
 8002ffc:	20000350 	.word	0x20000350

08003000 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8003006:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <SYSTIMER_lTimerHandler+0xc4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 800300c:	e050      	b.n	80030b0 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d013      	beq.n	8003040 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff8f 	bl	8002f40 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	461a      	mov	r2, r3
 800302e:	2301      	movs	r3, #1
 8003030:	4093      	lsls	r3, r2
 8003032:	43da      	mvns	r2, r3
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <SYSTIMER_lTimerHandler+0xc8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4013      	ands	r3, r2
 800303a:	4a23      	ldr	r2, [pc, #140]	; (80030c8 <SYSTIMER_lTimerHandler+0xc8>)
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e034      	b.n	80030aa <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7b1b      	ldrb	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d112      	bne.n	800306e <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7b5b      	ldrb	r3, [r3, #13]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d12c      	bne.n	80030aa <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff73 	bl	8002f40 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6912      	ldr	r2, [r2, #16]
 8003068:	4610      	mov	r0, r2
 800306a:	4798      	blx	r3
 800306c:	e01d      	b.n	80030aa <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7b1b      	ldrb	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d118      	bne.n	80030a8 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7b5b      	ldrb	r3, [r3, #13]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d115      	bne.n	80030aa <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff5c 	bl	8002f40 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fe71 	bl	8002d7c <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6912      	ldr	r2, [r2, #16]
 80030a2:	4610      	mov	r0, r2
 80030a4:	4798      	blx	r3
 80030a6:	e000      	b.n	80030aa <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 80030a8:	e009      	b.n	80030be <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <SYSTIMER_lTimerHandler+0xc4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <SYSTIMER_lTimerHandler+0xbe>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0a7      	beq.n	800300e <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000350 	.word	0x20000350
 80030c8:	20000354 	.word	0x20000354

080030cc <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <SysTick_Handler+0x40>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <SysTick_Handler+0x44>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <SysTick_Handler+0x44>)
 80030e0:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d905      	bls.n	80030fc <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	619a      	str	r2, [r3, #24]
 80030fa:	e004      	b.n	8003106 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8003102:	f7ff ff7d 	bl	8003000 <SYSTIMER_lTimerHandler>
    }
  }
}
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000350 	.word	0x20000350
 8003110:	20000358 	.word	0x20000358

08003114 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d021      	beq.n	8003172 <SYSTIMER_Init+0x5e>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 800312e:	4b13      	ldr	r3, [pc, #76]	; (800317c <SYSTIMER_Init+0x68>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8003134:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8003138:	f7ff fdfe 	bl	8002d38 <SysTick_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d015      	beq.n	8003172 <SYSTIMER_Init+0x5e>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8003146:	f7ff fd8d 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 800314a:	4603      	mov	r3, r0
 800314c:	4618      	mov	r0, r3
 800314e:	210a      	movs	r1, #10
 8003150:	2200      	movs	r2, #0
 8003152:	f7ff fdbf 	bl	8002cd4 <NVIC_EncodePriority>
 8003156:	4603      	mov	r3, r0
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	4619      	mov	r1, r3
 800315e:	f7ff fd8f 	bl	8002c80 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <SYSTIMER_Init+0x6c>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000350 	.word	0x20000350
 8003180:	20000354 	.word	0x20000354

08003184 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	460b      	mov	r3, r1
 8003192:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b13      	cmp	r3, #19
 80031a4:	d802      	bhi.n	80031ac <SYSTIMER_CreateTimer+0x28>
  {
    id = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e07b      	b.n	80032a4 <SYSTIMER_CreateTimer+0x120>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	e075      	b.n	800329e <SYSTIMER_CreateTimer+0x11a>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	2201      	movs	r2, #1
 80031b6:	409a      	lsls	r2, r3
 80031b8:	4b3e      	ldr	r3, [pc, #248]	; (80032b4 <SYSTIMER_CreateTimer+0x130>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d16a      	bne.n	8003298 <SYSTIMER_CreateTimer+0x114>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <SYSTIMER_CreateTimer+0x130>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	4a39      	ldr	r2, [pc, #228]	; (80032b4 <SYSTIMER_CreateTimer+0x130>)
 80031d0:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 80031d2:	4939      	ldr	r1, [pc, #228]	; (80032b8 <SYSTIMER_CreateTimer+0x134>)
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3310      	adds	r3, #16
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 80031e6:	4934      	ldr	r1, [pc, #208]	; (80032b8 <SYSTIMER_CreateTimer+0x134>)
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3308      	adds	r3, #8
 80031f6:	7afa      	ldrb	r2, [r7, #11]
 80031f8:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 80031fa:	492f      	ldr	r1, [pc, #188]	; (80032b8 <SYSTIMER_CreateTimer+0x134>)
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	3308      	adds	r3, #8
 800320a:	2202      	movs	r2, #2
 800320c:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4a2a      	ldr	r2, [pc, #168]	; (80032bc <SYSTIMER_CreateTimer+0x138>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1c59      	adds	r1, r3, #1
 800321e:	4826      	ldr	r0, [pc, #152]	; (80032b8 <SYSTIMER_CreateTimer+0x134>)
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4403      	add	r3, r0
 800322c:	3318      	adds	r3, #24
 800322e:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8003230:	4921      	ldr	r1, [pc, #132]	; (80032b8 <SYSTIMER_CreateTimer+0x134>)
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	3318      	adds	r3, #24
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8003244:	491c      	ldr	r1, [pc, #112]	; (80032b8 <SYSTIMER_CreateTimer+0x134>)
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3308      	adds	r3, #8
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8003258:	4917      	ldr	r1, [pc, #92]	; (80032b8 <SYSTIMER_CreateTimer+0x134>)
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3310      	adds	r3, #16
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 800326c:	4912      	ldr	r1, [pc, #72]	; (80032b8 <SYSTIMER_CreateTimer+0x134>)
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	2200      	movs	r2, #0
 800327c:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 800327e:	490e      	ldr	r1, [pc, #56]	; (80032b8 <SYSTIMER_CreateTimer+0x134>)
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	3301      	adds	r3, #1
 8003294:	61fb      	str	r3, [r7, #28]
        break;
 8003296:	e005      	b.n	80032a4 <SYSTIMER_CreateTimer+0x120>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	3301      	adds	r3, #1
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d986      	bls.n	80031b2 <SYSTIMER_CreateTimer+0x2e>
      }
    }

  }

  return (id);
 80032a4:	69fb      	ldr	r3, [r7, #28]
}  
 80032a6:	4618      	mov	r0, r3
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000354 	.word	0x20000354
 80032b8:	20000478 	.word	0x20000478
 80032bc:	cccccccd 	.word	0xcccccccd

080032c0 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1e5a      	subs	r2, r3, #1
 80032d0:	491a      	ldr	r1, [pc, #104]	; (800333c <SYSTIMER_StartTimer+0x7c>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3308      	adds	r3, #8
 80032de:	795b      	ldrb	r3, [r3, #5]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d126      	bne.n	8003332 <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1e5a      	subs	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	1e59      	subs	r1, r3, #1
 80032ec:	4813      	ldr	r0, [pc, #76]	; (800333c <SYSTIMER_StartTimer+0x7c>)
 80032ee:	460b      	mov	r3, r1
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4403      	add	r3, r0
 80032f8:	3318      	adds	r3, #24
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	1c59      	adds	r1, r3, #1
 80032fe:	480f      	ldr	r0, [pc, #60]	; (800333c <SYSTIMER_StartTimer+0x7c>)
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4403      	add	r3, r0
 800330a:	3318      	adds	r3, #24
 800330c:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	490a      	ldr	r1, [pc, #40]	; (800333c <SYSTIMER_StartTimer+0x7c>)
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3308      	adds	r3, #8
 8003320:	2201      	movs	r2, #1
 8003322:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fd27 	bl	8002d7c <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000478 	.word	0x20000478

08003340 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
                                             const uint16_t data,
                                             const uint32_t transmit_control_information)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	460b      	mov	r3, r1
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 800334e:	8979      	ldrh	r1, [r7, #10]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	3220      	adds	r2, #32
 8003356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003376:	b2db      	uxtb	r3, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003390:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	460b      	mov	r3, r1
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 80033ae:	8979      	ldrh	r1, [r7, #10]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	3260      	adds	r2, #96	; 0x60
 80033b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033d2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80033ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003416:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <XMC_USIC_CH_RXFIFO_ClearEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
                                                   const uint32_t event)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  channel->TRBSCR = event;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <XMC_SPI_CH_SetTransmitMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	019b      	lsls	r3, r3, #6
 8003480:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop

08003494 <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4798      	blx	r3
 80034dc:	4603      	mov	r3, r0
 80034de:	73fb      	strb	r3, [r7, #15]

  return status;
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop

080034ec <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003504:	2b02      	cmp	r3, #2
 8003506:	d106      	bne.n	8003516 <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	f000 f807 	bl	8003520 <SPI_MASTER_lStartTransmitPolling>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]
  }
#endif

  return status;
 8003516:	7dfb      	ldrb	r3, [r7, #23]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <SPI_MASTER_lStartTransmitPolling>:
}
#endif

#if (SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lStartTransmitPolling(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  uint16_t data;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
 800352c:	2301      	movs	r3, #1
 800352e:	61bb      	str	r3, [r7, #24]
                                                            Specify the number of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  status = SPI_MASTER_STATUS_BUSY;
 8003530:	2302      	movs	r3, #2
 8003532:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	617b      	str	r3, [r7, #20]
  data = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	83bb      	strh	r3, [r7, #28]

  XMC_ASSERT("SPI_MASTER_lStartTransmitPolling:handle NULL" , (handle != NULL));

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80f0 	beq.w	8003726 <SPI_MASTER_lStartTransmitPolling+0x206>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80ec 	beq.w	8003726 <SPI_MASTER_lStartTransmitPolling+0x206>
  {
    /* Check data pointer is valid or not */
    if (false == runtime_handle->tx_busy)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f083 0301 	eor.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80e1 	beq.w	8003724 <SPI_MASTER_lStartTransmitPolling+0x204>
    {
      if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d901      	bls.n	8003570 <SPI_MASTER_lStartTransmitPolling+0x50>
      {
        bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 800356c:	2302      	movs	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
      }

      runtime_handle->tx_busy = true;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2020 	strb.w	r2, [r3, #32]
      /* Obtain the address of data, size of data */
      runtime_handle->tx_data = dataptr;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	619a      	str	r2, [r3, #24]
      runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	3b01      	subs	r3, #1
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	fa03 f202 	lsl.w	r2, r3, r2
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	605a      	str	r2, [r3, #4]
      /* Initialize to first index and set the busy flag */
      runtime_handle->tx_data_index = 0U;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]

      XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	7f1b      	ldrb	r3, [r3, #28]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	f7ff ff61 	bl	8003468 <XMC_SPI_CH_SetTransmitMode>

      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d04b      	beq.n	800364a <SPI_MASTER_lStartTransmitPolling+0x12a>
      {
        /* Flush the Transmit FIFO */
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff04 	bl	80033c4 <XMC_USIC_CH_TXFIFO_Flush>

        while (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 80035bc:	e03e      	b.n	800363c <SPI_MASTER_lStartTransmitPolling+0x11c>
        {
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 80035be:	bf00      	nop
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff0b 	bl	80033e0 <XMC_USIC_CH_TXFIFO_IsFull>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f7      	bne.n	80035c0 <SPI_MASTER_lStartTransmitPolling+0xa0>
          {
              /* Wait until FIFO is having space for next entry */
          }
          if (runtime_handle->tx_data_dummy == true)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00b      	beq.n	80035f4 <SPI_MASTER_lStartTransmitPolling+0xd4>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	7f1b      	ldrb	r3, [r3, #28]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035ec:	461a      	mov	r2, r3
 80035ee:	f7ff fed7 	bl	80033a0 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 80035f2:	e01d      	b.n	8003630 <SPI_MASTER_lStartTransmitPolling+0x110>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d107      	bne.n	800360a <SPI_MASTER_lStartTransmitPolling+0xea>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4413      	add	r3, r2
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	83bb      	strh	r3, [r7, #28]
 8003608:	e006      	b.n	8003618 <SPI_MASTER_lStartTransmitPolling+0xf8>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	4413      	add	r3, r2
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	83bb      	strh	r3, [r7, #28]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	7f1b      	ldrb	r3, [r3, #28]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461c      	mov	r4, r3
 8003624:	8bbb      	ldrh	r3, [r7, #28]
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	4622      	mov	r2, r4
 800362c:	f7ff feb8 	bl	80033a0 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	441a      	add	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	609a      	str	r2, [r3, #8]
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
      {
        /* Flush the Transmit FIFO */
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);

        while (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	429a      	cmp	r2, r3
 8003646:	d3ba      	bcc.n	80035be <SPI_MASTER_lStartTransmitPolling+0x9e>
 8003648:	e056      	b.n	80036f8 <SPI_MASTER_lStartTransmitPolling+0x1d8>
      }
      else
      {
        do
        {
          while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 800364a:	bf00      	nop
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fe87 	bl	8003364 <XMC_USIC_CH_GetTransmitBufferStatus>
 8003656:	4603      	mov	r3, r0
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d0f7      	beq.n	800364c <SPI_MASTER_lStartTransmitPolling+0x12c>
          {
          }

          if (runtime_handle->tx_data_dummy == true)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <SPI_MASTER_lStartTransmitPolling+0x160>
          {
            XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, runtime_handle->spi_master_mode);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	7f1b      	ldrb	r3, [r3, #28]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003678:	461a      	mov	r2, r3
 800367a:	f7ff fe61 	bl	8003340 <XMC_USIC_CH_WriteToTBUFTCI>
 800367e:	e01d      	b.n	80036bc <SPI_MASTER_lStartTransmitPolling+0x19c>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d107      	bne.n	8003696 <SPI_MASTER_lStartTransmitPolling+0x176>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4413      	add	r3, r2
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	83bb      	strh	r3, [r7, #28]
 8003694:	e006      	b.n	80036a4 <SPI_MASTER_lStartTransmitPolling+0x184>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	4413      	add	r3, r2
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	83bb      	strh	r3, [r7, #28]
            }
            XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, runtime_handle->spi_master_mode);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	7f1b      	ldrb	r3, [r3, #28]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461c      	mov	r4, r3
 80036b0:	8bbb      	ldrh	r3, [r7, #28]
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	4622      	mov	r2, r4
 80036b8:	f7ff fe42 	bl	8003340 <XMC_USIC_CH_WriteToTBUFTCI>
          }
          (runtime_handle->tx_data_index)+=bytes_per_word;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	441a      	add	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	609a      	str	r2, [r3, #8]

          while ((XMC_SPI_CH_GetStatusFlag(handle->channel) & (uint32_t)XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION) == 0U)
 80036c8:	bf00      	nop
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fee0 	bl	8003494 <XMC_SPI_CH_GetStatusFlag>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f5      	beq.n	80036ca <SPI_MASTER_lStartTransmitPolling+0x1aa>
          {

          }
          XMC_SPI_CH_ClearStatusFlag(handle->channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036e8:	f7ff fee0 	bl	80034ac <XMC_SPI_CH_ClearStatusFlag>
        } while(runtime_handle->tx_data_index < runtime_handle->tx_data_count);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d3a8      	bcc.n	800364a <SPI_MASTER_lStartTransmitPolling+0x12a>
      }

      while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 80036f8:	bf00      	nop
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fe30 	bl	8003364 <XMC_USIC_CH_GetTransmitBufferStatus>
 8003704:	4603      	mov	r3, r0
 8003706:	2b80      	cmp	r3, #128	; 0x80
 8003708:	d0f7      	beq.n	80036fa <SPI_MASTER_lStartTransmitPolling+0x1da>
      {
      }

      runtime_handle->tx_busy = false;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->tx_data_count = 0U;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	605a      	str	r2, [r3, #4]
      runtime_handle->tx_data_index = 0U;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
      status = SPI_MASTER_STATUS_SUCCESS;
 800371e:	2300      	movs	r3, #0
 8003720:	77fb      	strb	r3, [r7, #31]

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
  {
    /* Check data pointer is valid or not */
    if (false == runtime_handle->tx_busy)
 8003722:	e002      	b.n	800372a <SPI_MASTER_lStartTransmitPolling+0x20a>
 8003724:	e001      	b.n	800372a <SPI_MASTER_lStartTransmitPolling+0x20a>
      status = SPI_MASTER_STATUS_SUCCESS;
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8003726:	2303      	movs	r3, #3
 8003728:	77fb      	strb	r3, [r7, #31]
  }
  runtime_handle->rx_data_dummy = true;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  return status;
 8003732:	7ffb      	ldrb	r3, [r7, #31]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3724      	adds	r7, #36	; 0x24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd90      	pop	{r4, r7, pc}

0800373c <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 800374a:	2302      	movs	r3, #2
 800374c:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	7f1b      	ldrb	r3, [r3, #28]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d142      	bne.n	80037e4 <SPI_MASTER_Transfer+0xa8>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d03b      	beq.n	80037dc <SPI_MASTER_Transfer+0xa0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d038      	beq.n	80037dc <SPI_MASTER_Transfer+0xa0>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d035      	beq.n	80037dc <SPI_MASTER_Transfer+0xa0>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	7fdb      	ldrb	r3, [r3, #31]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f083 0301 	eor.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02c      	beq.n	80037da <SPI_MASTER_Transfer+0x9e>
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f083 0301 	eor.w	r3, r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d023      	beq.n	80037da <SPI_MASTER_Transfer+0x9e>
      {
        runtime_handle->rx_busy = true;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2201      	movs	r2, #1
 8003796:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        {
          status = SPI_MASTER_lReceiveDMA(handle, count);
        }
#endif
#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d109      	bne.n	80037da <SPI_MASTER_Transfer+0x9e>
        {
          status = SPI_MASTER_lReceivePolling(handle, count);
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	6839      	ldr	r1, [r7, #0]
 80037ca:	f000 f813 	bl	80037f4 <SPI_MASTER_lReceivePolling>
 80037ce:	4603      	mov	r3, r0
 80037d0:	75fb      	strb	r3, [r7, #23]
          runtime_handle->rx_busy = false;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2200      	movs	r2, #0
 80037d6:	77da      	strb	r2, [r3, #31]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 80037d8:	e003      	b.n	80037e2 <SPI_MASTER_Transfer+0xa6>
 80037da:	e002      	b.n	80037e2 <SPI_MASTER_Transfer+0xa6>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 80037dc:	2303      	movs	r3, #3
 80037de:	75fb      	strb	r3, [r7, #23]
 80037e0:	e002      	b.n	80037e8 <SPI_MASTER_Transfer+0xac>
 80037e2:	e001      	b.n	80037e8 <SPI_MASTER_Transfer+0xac>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop

080037f4 <SPI_MASTER_lReceivePolling>:
}
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceivePolling(const SPI_MASTER_t *const handle, uint32_t count)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 80037fe:	2301      	movs	r3, #1
 8003800:	617b      	str	r3, [r7, #20]
                                                           Specify the number of bytes for the configured word length */
  uint16_t data;

  runtime_handle = handle->runtime;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	827b      	strh	r3, [r7, #18]
  runtime_handle->rx_data_index = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b08      	cmp	r3, #8
 8003820:	d901      	bls.n	8003826 <SPI_MASTER_lReceivePolling+0x32>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8003822:	2302      	movs	r3, #2
 8003824:	617b      	str	r3, [r7, #20]
  }

  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3b01      	subs	r3, #1
 800382a:	461a      	mov	r2, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	fa03 f202 	lsl.w	r2, r3, r2
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	60da      	str	r2, [r3, #12]

  XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	7f1b      	ldrb	r3, [r3, #28]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f7ff fe10 	bl	8003468 <XMC_SPI_CH_SetTransmitMode>

    /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80d6 	beq.w	8003a02 <SPI_MASTER_lReceivePolling+0x20e>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fdd4 	bl	8003408 <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f9c5 	bl	8003bf4 <SPI_MASTER_lStdRBUFFlush>

    if (runtime_handle->tx_data_dummy == true)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <SPI_MASTER_lReceivePolling+0x9a>
    {
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	7f1b      	ldrb	r3, [r3, #28]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003886:	461a      	mov	r2, r3
 8003888:	f7ff fd8a 	bl	80033a0 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 800388c:	e01d      	b.n	80038ca <SPI_MASTER_lReceivePolling+0xd6>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d107      	bne.n	80038a4 <SPI_MASTER_lReceivePolling+0xb0>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4413      	add	r3, r2
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	827b      	strh	r3, [r7, #18]
 80038a2:	e006      	b.n	80038b2 <SPI_MASTER_lReceivePolling+0xbe>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	699a      	ldr	r2, [r3, #24]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4413      	add	r3, r2
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	7f1b      	ldrb	r3, [r3, #28]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461c      	mov	r4, r3
 80038be:	8a7b      	ldrh	r3, [r7, #18]
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	4622      	mov	r2, r4
 80038c6:	f7ff fd6b 	bl	80033a0 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	441a      	add	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	609a      	str	r2, [r3, #8]


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 80038d6:	e061      	b.n	800399c <SPI_MASTER_lReceivePolling+0x1a8>
    {
      if (runtime_handle->tx_data_dummy == true)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <SPI_MASTER_lReceivePolling+0x108>
      {
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	7f1b      	ldrb	r3, [r3, #28]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038f4:	461a      	mov	r2, r3
 80038f6:	f7ff fd53 	bl	80033a0 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 80038fa:	e01d      	b.n	8003938 <SPI_MASTER_lReceivePolling+0x144>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d107      	bne.n	8003912 <SPI_MASTER_lReceivePolling+0x11e>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	4413      	add	r3, r2
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	827b      	strh	r3, [r7, #18]
 8003910:	e006      	b.n	8003920 <SPI_MASTER_lReceivePolling+0x12c>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	4413      	add	r3, r2
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	7f1b      	ldrb	r3, [r3, #28]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461c      	mov	r4, r3
 800392c:	8a7b      	ldrh	r3, [r7, #18]
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	4622      	mov	r2, r4
 8003934:	f7ff fd34 	bl	80033a0 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
      }

      while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8003938:	bf00      	nop
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fd70 	bl	8003424 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f7      	bne.n	800393a <SPI_MASTER_lReceivePolling+0x146>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd ffcc 	bl	80018ec <XMC_SPI_CH_GetReceivedData>
 8003954:	4603      	mov	r3, r0
 8003956:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	4413      	add	r3, r2
 8003962:	8a7a      	ldrh	r2, [r7, #18]
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d10a      	bne.n	8003984 <SPI_MASTER_lReceivePolling+0x190>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	3301      	adds	r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	8a7a      	ldrh	r2, [r7, #18]
 800397c:	0a12      	lsrs	r2, r2, #8
 800397e:	b292      	uxth	r2, r2
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	441a      	add	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d397      	bcc.n	80038d8 <SPI_MASTER_lReceivePolling+0xe4>

      (runtime_handle->rx_data_index)+= bytes_per_word;
      (runtime_handle->tx_data_index)+= bytes_per_word;
    }

    while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 80039a8:	bf00      	nop
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fd38 	bl	8003424 <XMC_USIC_CH_RXFIFO_IsEmpty>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f7      	bne.n	80039aa <SPI_MASTER_lReceivePolling+0x1b6>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd ff94 	bl	80018ec <XMC_SPI_CH_GetReceivedData>
 80039c4:	4603      	mov	r3, r0
 80039c6:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	8a7a      	ldrh	r2, [r7, #18]
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d10a      	bne.n	80039f4 <SPI_MASTER_lReceivePolling+0x200>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	3301      	adds	r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	8a7a      	ldrh	r2, [r7, #18]
 80039ec:	0a12      	lsrs	r2, r2, #8
 80039ee:	b292      	uxth	r2, r2
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
    }

    XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, SPI_MASTER_FIFO_RECEIVE_INDICATION_FLAG);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	2105      	movs	r1, #5
 80039fc:	f7ff fd26 	bl	800344c <XMC_USIC_CH_RXFIFO_ClearEvent>
 8003a00:	e0e9      	b.n	8003bd6 <SPI_MASTER_lReceivePolling+0x3e2>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f8f4 	bl	8003bf4 <SPI_MASTER_lStdRBUFFlush>

    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003a0c:	bf00      	nop
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fca6 	bl	8003364 <XMC_USIC_CH_GetTransmitBufferStatus>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	d0f7      	beq.n	8003a0e <SPI_MASTER_lReceivePolling+0x21a>
    {
    }

    if (runtime_handle->tx_data_dummy == true)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <SPI_MASTER_lReceivePolling+0x24e>
    {
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	7f1b      	ldrb	r3, [r3, #28]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f7ff fc80 	bl	8003340 <XMC_USIC_CH_WriteToTBUFTCI>
 8003a40:	e01d      	b.n	8003a7e <SPI_MASTER_lReceivePolling+0x28a>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d107      	bne.n	8003a58 <SPI_MASTER_lReceivePolling+0x264>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4413      	add	r3, r2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	827b      	strh	r3, [r7, #18]
 8003a56:	e006      	b.n	8003a66 <SPI_MASTER_lReceivePolling+0x272>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4413      	add	r3, r2
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	7f1b      	ldrb	r3, [r3, #28]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461c      	mov	r4, r3
 8003a72:	8a7b      	ldrh	r3, [r7, #18]
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	4622      	mov	r2, r4
 8003a7a:	f7ff fc61 	bl	8003340 <XMC_USIC_CH_WriteToTBUFTCI>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	441a      	add	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	609a      	str	r2, [r3, #8]

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8003a8a:	e071      	b.n	8003b70 <SPI_MASTER_lReceivePolling+0x37c>
    {
      while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003a8c:	bf00      	nop
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fc66 	bl	8003364 <XMC_USIC_CH_GetTransmitBufferStatus>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	d0f7      	beq.n	8003a8e <SPI_MASTER_lReceivePolling+0x29a>
      {

      }

      if (runtime_handle->tx_data_dummy == true)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <SPI_MASTER_lReceivePolling+0x2ce>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	7f1b      	ldrb	r3, [r3, #28]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003aba:	461a      	mov	r2, r3
 8003abc:	f7ff fc40 	bl	8003340 <XMC_USIC_CH_WriteToTBUFTCI>
 8003ac0:	e01d      	b.n	8003afe <SPI_MASTER_lReceivePolling+0x30a>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d107      	bne.n	8003ad8 <SPI_MASTER_lReceivePolling+0x2e4>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	827b      	strh	r3, [r7, #18]
 8003ad6:	e006      	b.n	8003ae6 <SPI_MASTER_lReceivePolling+0x2f2>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	7f1b      	ldrb	r3, [r3, #28]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461c      	mov	r4, r3
 8003af2:	8a7b      	ldrh	r3, [r7, #18]
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	4622      	mov	r2, r4
 8003afa:	f7ff fc21 	bl	8003340 <XMC_USIC_CH_WriteToTBUFTCI>
      }

      while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8003afe:	bf00      	nop
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fc3d 	bl	8003384 <XMC_USIC_CH_GetReceiveBufferStatus>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f7      	beq.n	8003b00 <SPI_MASTER_lReceivePolling+0x30c>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fd fee9 	bl	80018ec <XMC_SPI_CH_GetReceivedData>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	8a7a      	ldrh	r2, [r7, #18]
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d10a      	bne.n	8003b4a <SPI_MASTER_lReceivePolling+0x356>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	8a7a      	ldrh	r2, [r7, #18]
 8003b42:	0a12      	lsrs	r2, r2, #8
 8003b44:	b292      	uxth	r2, r2
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	441a      	add	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	609a      	str	r2, [r3, #8]

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003b6c:	f7ff fc9e 	bl	80034ac <XMC_SPI_CH_ClearStatusFlag>
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d387      	bcc.n	8003a8c <SPI_MASTER_lReceivePolling+0x298>
      (runtime_handle->tx_data_index)+= bytes_per_word;

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
    }

    while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8003b7c:	bf00      	nop
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff fbfe 	bl	8003384 <XMC_USIC_CH_GetReceiveBufferStatus>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f7      	beq.n	8003b7e <SPI_MASTER_lReceivePolling+0x38a>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd feaa 	bl	80018ec <XMC_SPI_CH_GetReceivedData>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	8a7a      	ldrh	r2, [r7, #18]
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d10a      	bne.n	8003bc8 <SPI_MASTER_lReceivePolling+0x3d4>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	8a7a      	ldrh	r2, [r7, #18]
 8003bc0:	0a12      	lsrs	r2, r2, #8
 8003bc2:	b292      	uxth	r2, r2
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]
    }

    XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003bd2:	f7ff fc6b 	bl	80034ac <XMC_SPI_CH_ClearStatusFlag>
  }
  runtime_handle->rx_data_count = 0U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	60da      	str	r2, [r3, #12]
  runtime_handle->rx_data_index = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]

  return SPI_MASTER_STATUS_SUCCESS;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd90      	pop	{r4, r7, pc}
 8003bf2:	bf00      	nop

08003bf4 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fd fe75 	bl	80018ec <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fe72 	bl	80018ec <XMC_SPI_CH_GetReceivedData>
}
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop

08003c10 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8003c20:	78f8      	ldrb	r0, [r7, #3]
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	3306      	adds	r3, #6
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8003c32:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8003c34:	431a      	orrs	r2, r3
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	1d83      	adds	r3, r0, #6
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop

08003c4c <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c88:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop

08003ca4 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 8003cba:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop

08003cd0 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f023 020f 	bic.w	r2, r3, #15
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop

08003cf8 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	2101      	movs	r1, #1
 8003d04:	f7ff ffe4 	bl	8003cd0 <XMC_USIC_CH_SetMode>
}
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop

08003d10 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop

08003d30 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	f7ff ff99 	bl	8003ca4 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f7ff ff5f 	bl	8003c4c <XMC_USIC_CH_SetWordLength>
}
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7ff ff67 	bl	8003c78 <XMC_USIC_CH_SetFrameLength>
}
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8003dc0:	78f8      	ldrb	r0, [r7, #3]
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	3306      	adds	r3, #6
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8003dd2:	f043 0210 	orr.w	r2, r3, #16
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	1d83      	adds	r3, r0, #6
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	78bb      	ldrb	r3, [r7, #2]
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4611      	mov	r1, r2
 8003de8:	461a      	mov	r2, r3
 8003dea:	f7ff ff11 	bl	8003c10 <XMC_USIC_CH_SetInputSource>
}
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <SPI_enkoder_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_enkoder_lInit(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH0, &SPI_enkoder_Channel_Config);
 8003dfe:	482a      	ldr	r0, [pc, #168]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e00:	492a      	ldr	r1, [pc, #168]	; (8003eac <SPI_enkoder_lInit+0xb8>)
 8003e02:	f7fd fd17 	bl	8001834 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH0);
 8003e06:	4828      	ldr	r0, [pc, #160]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e08:	f7ff ff82 	bl	8003d10 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH0, (uint8_t)8);
 8003e0c:	4826      	ldr	r0, [pc, #152]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e0e:	2108      	movs	r1, #8
 8003e10:	f7ff ffb2 	bl	8003d78 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH0, (uint8_t)16);
 8003e14:	4824      	ldr	r0, [pc, #144]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e16:	2110      	movs	r1, #16
 8003e18:	f7ff ffbc 	bl	8003d94 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH0,
 8003e1c:	4822      	ldr	r0, [pc, #136]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e1e:	2100      	movs	r1, #0
 8003e20:	2200      	movs	r2, #0
 8003e22:	f7ff ff9b 	bl	8003d5c <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH0, 2U);
 8003e26:	4820      	ldr	r0, [pc, #128]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e28:	2102      	movs	r1, #2
 8003e2a:	f7ff ff81 	bl	8003d30 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)4, &SPI_enkoder_MISO_Config.port_config);
 8003e2e:	4820      	ldr	r0, [pc, #128]	; (8003eb0 <SPI_enkoder_lInit+0xbc>)
 8003e30:	2104      	movs	r1, #4
 8003e32:	4a20      	ldr	r2, [pc, #128]	; (8003eb4 <SPI_enkoder_lInit+0xc0>)
 8003e34:	f7fc fab8 	bl	80003a8 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_B);
 8003e38:	481b      	ldr	r0, [pc, #108]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f7ff ffb7 	bl	8003db0 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH0);
 8003e42:	4819      	ldr	r0, [pc, #100]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e44:	f7ff ff58 	bl	8003cf8 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &SPI_enkoder_MOSI_Config.port_config);
 8003e48:	4819      	ldr	r0, [pc, #100]	; (8003eb0 <SPI_enkoder_lInit+0xbc>)
 8003e4a:	2105      	movs	r1, #5
 8003e4c:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <SPI_enkoder_lInit+0xc4>)
 8003e4e:	f7fc faab 	bl	80003a8 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)10, &SPI_enkoder_SCLKOUT_Config.port_config);
 8003e52:	4817      	ldr	r0, [pc, #92]	; (8003eb0 <SPI_enkoder_lInit+0xbc>)
 8003e54:	210a      	movs	r1, #10
 8003e56:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <SPI_enkoder_lInit+0xc8>)
 8003e58:	f7fc faa6 	bl	80003a8 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)8, &SPI_enkoder_SS_0_Config.port_config);
 8003e5c:	4814      	ldr	r0, [pc, #80]	; (8003eb0 <SPI_enkoder_lInit+0xbc>)
 8003e5e:	2108      	movs	r1, #8
 8003e60:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <SPI_enkoder_lInit+0xcc>)
 8003e62:	f7fc faa1 	bl	80003a8 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH0, XMC_SPI_CH_SLAVE_SELECT_1);
 8003e66:	4810      	ldr	r0, [pc, #64]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e68:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003e6c:	f7fd fd16 	bl	800189c <XMC_SPI_CH_EnableSlaveSelect>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)11, &SPI_enkoder_SS_1_Config.port_config);
 8003e70:	480f      	ldr	r0, [pc, #60]	; (8003eb0 <SPI_enkoder_lInit+0xbc>)
 8003e72:	210b      	movs	r1, #11
 8003e74:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <SPI_enkoder_lInit+0xd0>)
 8003e76:	f7fc fa97 	bl	80003a8 <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8003e7a:	480b      	ldr	r0, [pc, #44]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e7c:	2110      	movs	r1, #16
 8003e7e:	2205      	movs	r2, #5
 8003e80:	f7fd ff32 	bl	8001ce8 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_5);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI0_CH0,
 8003e84:	4808      	ldr	r0, [pc, #32]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e86:	2108      	movs	r1, #8
 8003e88:	2203      	movs	r2, #3
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f7fd feb8 	bl	8001c00 <XMC_USIC_CH_TXFIFO_Configure>
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI0_CH0,
 8003e90:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <SPI_enkoder_lInit+0xb4>)
 8003e92:	2100      	movs	r1, #0
 8003e94:	2203      	movs	r2, #3
 8003e96:	2307      	movs	r3, #7
 8003e98:	f7fd feda 	bl	8001c50 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_8WORDS,
                               7U);
             
  return status;
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40030000 	.word	0x40030000
 8003eac:	2000005c 	.word	0x2000005c
 8003eb0:	48028100 	.word	0x48028100
 8003eb4:	20000360 	.word	0x20000360
 8003eb8:	20000034 	.word	0x20000034
 8003ebc:	0800740c 	.word	0x0800740c
 8003ec0:	08007428 	.word	0x08007428
 8003ec4:	20000048 	.word	0x20000048

08003ec8 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60da      	str	r2, [r3, #12]
}
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	045b      	lsls	r3, r3, #17
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	615a      	str	r2, [r3, #20]
}
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop

08003f14 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	611a      	str	r2, [r3, #16]
}
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop

08003f30 <XMC_CCU8_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t timer_val)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 8003f3c:	887a      	ldrh	r2, [r7, #2]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	2101      	movs	r1, #1
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 8003fac:	4905      	ldr	r1, [pc, #20]	; (8003fc4 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8003fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	50004000 	.word	0x50004000

08003fc8 <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 8003fd0:	4905      	ldr	r1, [pc, #20]	; (8003fe8 <XMC_SCU_SetCcuTriggerLow+0x20>)
 8003fd2:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <XMC_SCU_SetCcuTriggerLow+0x20>)
 8003fd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	4013      	ands	r3, r2
 8003fdc:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	50004000 	.word	0x50004000

08003fec <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	605a      	str	r2, [r3, #4]
}
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800401e:	409a      	lsls	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	605a      	str	r2, [r3, #4]
}
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop

08004030 <PWM_SVM_lEnableEvent>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void PWM_SVM_lEnableEvent(PWM_SVM_t* const HandlePtr)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /*Enable the slice 0 period match interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_periodmatch)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004040:	2b01      	cmp	r3, #1
 8004042:	d106      	bne.n	8004052 <PWM_SVM_lEnableEvent+0x22>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	2100      	movs	r1, #0
 800404e:	f7ff ff7d 	bl	8003f4c <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
  /*Enable the slice 0 trap interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_trapevent)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800405a:	2b01      	cmp	r3, #1
 800405c:	d106      	bne.n	800406c <PWM_SVM_lEnableEvent+0x3c>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	210a      	movs	r1, #10
 8004068:	f7ff ff70 	bl	8003f4c <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_EVENT2);
  }
}
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop

08004074 <PWM_SVM_InverterDisable>:
/**
 * This function disables the inverter
 */
void PWM_SVM_InverterDisable(PWM_SVM_t* const HandlePtr)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_SVM_InverterDisable:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	7cdb      	ldrb	r3, [r3, #19]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d109      	bne.n	800409a <PWM_SVM_InverterDisable+0x26>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	791b      	ldrb	r3, [r3, #4]
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f7ff ffb9 	bl	800400c <XMC_GPIO_SetOutputLow>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	7cdb      	ldrb	r3, [r3, #19]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d109      	bne.n	80040b8 <PWM_SVM_InverterDisable+0x44>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	791b      	ldrb	r3, [r3, #4]
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	f7ff ff9a 	bl	8003fec <XMC_GPIO_SetOutputHigh>
  }
}
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop

080040c0 <PWM_SVM_InverterEnable>:
/**
 * This function Enables the inverter
 */
void PWM_SVM_InverterEnable(PWM_SVM_t* const HandlePtr)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	7cdb      	ldrb	r3, [r3, #19]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d109      	bne.n	80040e6 <PWM_SVM_InverterEnable+0x26>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	791b      	ldrb	r3, [r3, #4]
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7ff ff83 	bl	8003fec <XMC_GPIO_SetOutputHigh>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	7cdb      	ldrb	r3, [r3, #19]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d109      	bne.n	8004104 <PWM_SVM_InverterEnable+0x44>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	791b      	ldrb	r3, [r3, #4]
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	f7ff ff84 	bl	800400c <XMC_GPIO_SetOutputLow>
  }
}
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop

0800410c <PWM_SVM_lCurrentTrigSliceInit>:
#if(1U == PWM_SVM_IS_CURRENTTRIGGER_ENABLE)
/**
 * This function configures the current trigger slice
 */
void PWM_SVM_lCurrentTrigSliceInit(PWM_SVM_t* const HandlePtr)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  XMC_CCU8_SLICE_CompareInit(HandlePtr->phase_ptr[3]->slice_ptr, HandlePtr->current_configinit_ptr);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f7fc ff71 	bl	8001008 <XMC_CCU8_SLICE_CompareInit>
  XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[3]->slice_ptr, (uint16_t) HandlePtr->period);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004132:	b29b      	uxth	r3, r3
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	f7fd f872 	bl	8001220 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* Configure external start to event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[3]->slice_ptr,(XMC_CCU8_SLICE_EVENT_t)XMC_CCU8_SLICE_EVENT_0,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004146:	4610      	mov	r0, r2
 8004148:	2101      	movs	r1, #1
 800414a:	461a      	mov	r2, r3
 800414c:	f7fc fffe 	bl	800114c <XMC_CCU8_SLICE_ConfigureEvent>
      HandlePtr->startconfig_ptr);
  XMC_CCU8_EnableClock(HandlePtr->global_ptr,HandlePtr->phase_ptr[3]->slice_number);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	791b      	ldrb	r3, [r3, #4]
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	f7ff feb3 	bl	8003ec8 <XMC_CCU8_EnableClock>

  /* Phase current measurement */
  if (HandlePtr->confighandle_ptr->current_measurement == PWM_SVM_PHASECM )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	7c1b      	ldrb	r3, [r3, #16]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d118      	bne.n	800419e <PWM_SVM_lCurrentTrigSliceInit+0x92>
  {
    /* Program timer compare value for channel 1 or channel 2*/
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr, HandlePtr->confighandle_ptr->phase_cmpch_map[3],
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	6819      	ldr	r1, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	7ada      	ldrb	r2, [r3, #11]
        ((uint16_t)(HandlePtr->period) >> 1U));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800417e:	b29b      	uxth	r3, r3

  /* Phase current measurement */
  if (HandlePtr->confighandle_ptr->current_measurement == PWM_SVM_PHASECM )
  {
    /* Program timer compare value for channel 1 or channel 2*/
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr, HandlePtr->confighandle_ptr->phase_cmpch_map[3],
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	b29b      	uxth	r3, r3
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	f7fd f857 	bl	800123c <XMC_CCU8_SLICE_SetTimerCompareMatch>
        ((uint16_t)(HandlePtr->period) >> 1U));
    /* Enable timer one match event  */
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	2101      	movs	r1, #1
 8004198:	f7ff fed8 	bl	8003f4c <XMC_CCU8_SLICE_EnableEvent>
 800419c:	e050      	b.n	8004240 <PWM_SVM_lCurrentTrigSliceInit+0x134>
  }
  else if (HandlePtr->confighandle_ptr->current_measurement == PWM_SVM_DCLINKCM )/* DC Link current measurement */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	7c1b      	ldrb	r3, [r3, #16]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d14b      	bne.n	8004240 <PWM_SVM_lCurrentTrigSliceInit+0x134>
  {
    /* Program timer compare value for channel 1 or channel 2*/
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	681a      	ldr	r2, [r3, #0]
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t)XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
        ((uint16_t)(HandlePtr->period) >> 2U));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041b4:	b29b      	uxth	r3, r3
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
  }
  else if (HandlePtr->confighandle_ptr->current_measurement == PWM_SVM_DCLINKCM )/* DC Link current measurement */
  {
    /* Program timer compare value for channel 1 or channel 2*/
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr,
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	2100      	movs	r1, #0
 80041be:	461a      	mov	r2, r3
 80041c0:	f7fd f83c 	bl	800123c <XMC_CCU8_SLICE_SetTimerCompareMatch>
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t)XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
        ((uint16_t)(HandlePtr->period) >> 2U));
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	681a      	ldr	r2, [r3, #0]
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t)XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        ((uint16_t)(HandlePtr->period) >> 1U));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d0:	b29b      	uxth	r3, r3
  {
    /* Program timer compare value for channel 1 or channel 2*/
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr,
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t)XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
        ((uint16_t)(HandlePtr->period) >> 2U));
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr,
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	2101      	movs	r1, #1
 80041da:	461a      	mov	r2, r3
 80041dc:	f7fd f82e 	bl	800123c <XMC_CCU8_SLICE_SetTimerCompareMatch>
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t)XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        ((uint16_t)(HandlePtr->period) >> 1U));
    /* Enable timer compare match event based on svm scheme */
    if ((PWM_SVM_SVMCONFIG_t)PWM_SVM_7SEG_SYMM == HandlePtr->svm_config)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d11c      	bne.n	8004224 <PWM_SVM_lCurrentTrigSliceInit+0x118>
    {
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	2102      	movs	r1, #2
 80041f4:	f7ff feaa 	bl	8003f4c <XMC_CCU8_SLICE_EnableEvent>
          (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	2103      	movs	r1, #3
 8004202:	f7ff fea3 	bl	8003f4c <XMC_CCU8_SLICE_EnableEvent>
          (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	2104      	movs	r1, #4
 8004210:	f7ff fe9c 	bl	8003f4c <XMC_CCU8_SLICE_EnableEvent>
          (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	2105      	movs	r1, #5
 800421e:	f7ff fe95 	bl	8003f4c <XMC_CCU8_SLICE_EnableEvent>
 8004222:	e00d      	b.n	8004240 <PWM_SVM_lCurrentTrigSliceInit+0x134>
          (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
    }
    else
    {
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	2102      	movs	r1, #2
 800422e:	f7ff fe8d 	bl	8003f4c <XMC_CCU8_SLICE_EnableEvent>
          (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	2104      	movs	r1, #4
 800423c:	f7ff fe86 	bl	8003f4c <XMC_CCU8_SLICE_EnableEvent>
  else
  {
    /*do nothing*/
  }

  HandlePtr->phase_ptr[3]->slice_ptr->SRS |= HandlePtr->confighandle_ptr->event_sr_selector[3];
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6952      	ldr	r2, [r2, #20]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004256:	430a      	orrs	r2, r1
 8004258:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop

08004264 <PWM_SVM_Init>:
/**
 * This function initializes the peripherals and SVM structure 
 * required for the SVM algorithm.
 */
PWM_SVM_STATUS_t PWM_SVM_Init(PWM_SVM_t* const HandlePtr)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  uint32_t phase_count = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
  PWM_SVM_STATUS_t status = (PWM_SVM_STATUS_t) PWM_SVM_STATUS_SUCCESS;
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 813a 	bne.w	80044fe <PWM_SVM_Init+0x29a>
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fc8a 	bl	8004ba8 <GLOBAL_CCU8_Init>
 8004294:	4603      	mov	r3, r0
 8004296:	73fb      	strb	r3, [r7, #15]
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 8004298:	2300      	movs	r3, #0
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	e016      	b.n	80042cc <PWM_SVM_Init+0x68>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	3208      	adds	r2, #8
 80042a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	3208      	adds	r2, #8
 80042b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042b4:	7919      	ldrb	r1, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	320e      	adds	r2, #14
 80042bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c0:	461a      	mov	r2, r3
 80042c2:	f7fc f871 	bl	80003a8 <XMC_GPIO_Init>
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	3301      	adds	r3, #1
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d9e5      	bls.n	800429e <PWM_SVM_Init+0x3a>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
          HandlePtr->pwmoutconfig_ptr[phase_count]);
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d11a      	bne.n	8004312 <PWM_SVM_Init+0xae>
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e6:	791a      	ldrb	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	4608      	mov	r0, r1
 80042ee:	4611      	mov	r1, r2
 80042f0:	461a      	mov	r2, r3
 80042f2:	f7fc f859 	bl	80003a8 <XMC_GPIO_Init>
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	6819      	ldr	r1, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	791a      	ldrb	r2, [r3, #4]
          HandlePtr->confighandle_ptr->trap_hwsel);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8004306:	7c9b      	ldrb	r3, [r3, #18]
 8004308:	4608      	mov	r0, r1
 800430a:	4611      	mov	r1, r2
 800430c:	461a      	mov	r2, r3
 800430e:	f7fd fa5f 	bl	80017d0 <XMC_GPIO_SetHardwareControl>
          HandlePtr->confighandle_ptr->trap_hwsel);
    }

    /*Configure io init for inverter enable pin output*/
    if (svmptr->inverter_pin > (PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_NOTREQUIRED)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	7cdb      	ldrb	r3, [r3, #19]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00c      	beq.n	8004334 <PWM_SVM_Init+0xd0>
    {
      XMC_GPIO_Init(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	791a      	ldrb	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	4608      	mov	r0, r1
 800432c:	4611      	mov	r1, r2
 800432e:	461a      	mov	r2, r3
 8004330:	f7fc f83a 	bl	80003a8 <XMC_GPIO_Init>
          HandlePtr->inverterpinconfig_ptr);
    }

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fe9d 	bl	8004074 <PWM_SVM_InverterDisable>

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e0a4      	b.n	800448a <PWM_SVM_Init+0x226>
    {
      XMC_CCU8_SLICE_CompareInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->phase_configinit_ptr);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	3202      	adds	r2, #2
 8004346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	4610      	mov	r0, r2
 8004352:	4619      	mov	r1, r3
 8004354:	f7fc fe58 	bl	8001008 <XMC_CCU8_SLICE_CompareInit>

      /* configure dead time */
      XMC_CCU8_SLICE_DeadTimeInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->deadtimeconfig_ptr);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	3202      	adds	r2, #2
 800435e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	f7fc ff7e 	bl	800126c <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure external start to event 0 */
      XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	3202      	adds	r2, #2
 8004376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004380:	4610      	mov	r0, r2
 8004382:	2101      	movs	r1, #1
 8004384:	461a      	mov	r2, r3
 8004386:	f7fc fee1 	bl	800114c <XMC_CCU8_SLICE_ConfigureEvent>
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0, HandlePtr->startconfig_ptr);
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004390:	2b01      	cmp	r3, #1
 8004392:	d121      	bne.n	80043d8 <PWM_SVM_Init+0x174>
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	3202      	adds	r2, #2
 800439a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a4:	4610      	mov	r0, r2
 80043a6:	2103      	movs	r1, #3
 80043a8:	461a      	mov	r2, r3
 80043aa:	f7fc fecf 	bl	800114c <XMC_CCU8_SLICE_ConfigureEvent>
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	3202      	adds	r2, #2
 80043b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b8:	6819      	ldr	r1, [r3, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	7c5a      	ldrb	r2, [r3, #17]
            (bool)svmptr->trap_sync_pwm);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	4608      	mov	r0, r1
 80043d0:	4611      	mov	r1, r2
 80043d2:	461a      	mov	r2, r3
 80043d4:	f7fc fe80 	bl	80010d8 <XMC_CCU8_SLICE_TrapConfig>
            (bool)svmptr->trap_sync_pwm);
      }

      /* Program period  value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) HandlePtr->period);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	3202      	adds	r2, #2
 80043de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	f7fc ff16 	bl	8001220 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	3202      	adds	r2, #2
 80043fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	2100      	movs	r1, #0
 8004404:	2200      	movs	r2, #0
 8004406:	f7fc ff19 	bl	800123c <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	3202      	adds	r2, #2
 8004410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	2101      	movs	r1, #1
 800441a:	2200      	movs	r2, #0
 800441c:	f7fc ff0e 	bl	800123c <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	3202      	adds	r2, #2
 8004426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442a:	6819      	ldr	r1, [r3, #0]
          HandlePtr->confighandle_ptr->phase_st_map[count]);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	4413      	add	r3, r2
 8004434:	3308      	adds	r3, #8
 8004436:	791b      	ldrb	r3, [r3, #4]
 8004438:	4608      	mov	r0, r1
 800443a:	4619      	mov	r1, r3
 800443c:	f7fc ff2c 	bl	8001298 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>
          HandlePtr->confighandle_ptr->phase_st_map[count]);

      /* Bind period match event to an NVIC node  */
      HandlePtr->phase_ptr[count]->slice_ptr->SRS |= svmptr->event_sr_selector[count];
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	3202      	adds	r2, #2
 8004446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6979      	ldr	r1, [r7, #20]
 8004450:	3102      	adds	r1, #2
 8004452:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	6978      	ldr	r0, [r7, #20]
 8004460:	300a      	adds	r0, #10
 8004462:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8004466:	430a      	orrs	r2, r1
 8004468:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	3202      	adds	r2, #2
 8004476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447a:	791b      	ldrb	r3, [r3, #4]
 800447c:	4608      	mov	r0, r1
 800447e:	4619      	mov	r1, r3
 8004480:	f7ff fd22 	bl	8003ec8 <XMC_CCU8_EnableClock>

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	3301      	adds	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b02      	cmp	r3, #2
 800448e:	f67f af57 	bls.w	8004340 <PWM_SVM_Init+0xdc>

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
    }

    PWM_SVM_lEnableEvent(HandlePtr);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fdcc 	bl	8004030 <PWM_SVM_lEnableEvent>

    /* Current trigger slice configurations */
#if(1U == PWM_SVM_IS_CURRENTTRIGGER_ENABLE)
    if ((PWM_SVM_CMTYPE_t)PWM_SVM_NONE != svmptr->current_measurement)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	7c1b      	ldrb	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <PWM_SVM_Init+0x242>
    {
      PWM_SVM_lCurrentTrigSliceInit(HandlePtr);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fe33 	bl	800410c <PWM_SVM_lCurrentTrigSliceInit>
#if defined (MATH)
      /*Ungate Math coprocessor*/
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MATH);
#endif
    /*Enable the shadow transfer for all three slice*/
    XMC_CCU8_EnableShadowTransfer(HandlePtr->global_ptr, svmptr->shadow_transfer_mask);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	f7ff fd2f 	bl	8003f14 <XMC_CCU8_EnableShadowTransfer>

    /* update dead time variable*/
    HandlePtr->deadtime_rising_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_rising_edge_counter;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ba:	791b      	ldrb	r3, [r3, #4]
 80044bc:	461a      	mov	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    HandlePtr->deadtime_falling_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_falling_edge_counter;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c8:	795b      	ldrb	r3, [r3, #5]
 80044ca:	461a      	mov	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    HandlePtr->deadtime_div = (XMC_CCU8_SLICE_DTC_DIV_t) HandlePtr->deadtimeconfig_ptr->div;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    if ((PWM_SVM_STATUS_t) PWM_SVM_STATUS_FAILURE != status)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d006      	beq.n	80044fa <PWM_SVM_Init+0x296>
    {
      status = PWM_SVM_STATUS_SUCCESS;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]
      HandlePtr->state = (PWM_SVM_STATE_t) PWM_SVM_INITIALIZED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80044f8:	e001      	b.n	80044fe <PWM_SVM_Init+0x29a>
    }
    else
    {
      status = PWM_SVM_STATUS_FAILURE;
 80044fa:	2301      	movs	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <PWM_SVM_Start>:

/**
 * This function starts the CCU8 slices used to generate SVM.
 */
void PWM_SVM_Start(PWM_SVM_t* const HandlePtr)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Start:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if (((PWM_SVM_STATE_t) PWM_SVM_INITIALIZED == HandlePtr->state)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004520:	2b01      	cmp	r3, #1
 8004522:	d005      	beq.n	8004530 <PWM_SVM_Start+0x28>
      || ((PWM_SVM_STATE_t) PWM_SVM_STOPPED == HandlePtr->state))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800452a:	2b03      	cmp	r3, #3
 800452c:	f040 8133 	bne.w	8004796 <PWM_SVM_Start+0x28e>
  {
    HandlePtr->ta = 0U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
    HandlePtr->tb = 0U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    HandlePtr->ta2 = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    HandlePtr->tb2 = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    HandlePtr->v_ta = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    HandlePtr->v_tb = 0U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    HandlePtr->v_ta2 = 0U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    HandlePtr->v_tb2 = 0U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    HandlePtr->sector = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    HandlePtr->subsector = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fd9d 	bl	80040c0 <PWM_SVM_InverterEnable>

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e026      	b.n	80045da <PWM_SVM_Start+0xd2>
    {
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004592:	2b01      	cmp	r3, #1
 8004594:	d113      	bne.n	80045be <PWM_SVM_Start+0xb6>
      {
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	3202      	adds	r2, #2
 800459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	210a      	movs	r1, #10
 80045a6:	f7ff fce7 	bl	8003f78 <XMC_CCU8_SLICE_ClearEvent>
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	3202      	adds	r2, #2
 80045b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	210b      	movs	r1, #11
 80045ba:	f7ff fcdd 	bl	8003f78 <XMC_CCU8_SLICE_ClearEvent>
      }
      /* configure the Start trigger function*/
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	3202      	adds	r2, #2
 80045c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	2101      	movs	r1, #1
 80045ce:	2201      	movs	r2, #1
 80045d0:	f7fc fd54 	bl	800107c <XMC_CCU8_SLICE_StartConfig>
    HandlePtr->subsector = 0U;

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d9d5      	bls.n	800458c <PWM_SVM_Start+0x84>
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    if ((uint8_t) true == svmptr->enable_trap)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d129      	bne.n	800463e <PWM_SVM_Start+0x136>
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	7d1b      	ldrb	r3, [r3, #20]
 80045f4:	4619      	mov	r1, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	7d1b      	ldrb	r3, [r3, #20]
 80045fa:	005b      	lsls	r3, r3, #1
    }

    if ((uint8_t) true == svmptr->enable_trap)
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 80045fc:	430b      	orrs	r3, r1
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	f7ff fc75 	bl	8003ef0 <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	7d5b      	ldrb	r3, [r3, #21]
 8004610:	4619      	mov	r1, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	7d5b      	ldrb	r3, [r3, #21]
 8004616:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8004618:	430b      	orrs	r3, r1
 800461a:	4610      	mov	r0, r2
 800461c:	4619      	mov	r1, r3
 800461e:	f7ff fc67 	bl	8003ef0 <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	7d9b      	ldrb	r3, [r3, #22]
 800462c:	4619      	mov	r1, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	7d9b      	ldrb	r3, [r3, #22]
 8004632:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8004634:	430b      	orrs	r3, r1
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	f7ff fc59 	bl	8003ef0 <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
    }

    /*enable module clock by clearing idle bit if any of current measurement is selected */
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	7c1b      	ldrb	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d075      	beq.n	8004732 <PWM_SVM_Start+0x22a>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	2101      	movs	r1, #1
 8004650:	2201      	movs	r2, #1
 8004652:	f7fc fd13 	bl	800107c <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	7c1b      	ldrb	r3, [r3, #16]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d133      	bne.n	80046c6 <PWM_SVM_Start+0x1be>
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8004674:	4413      	add	r3, r2
 8004676:	b29b      	uxth	r3, r3
 8004678:	4608      	mov	r0, r1
 800467a:	4619      	mov	r1, r3
 800467c:	f7ff fc58 	bl	8003f30 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8004696:	4413      	add	r3, r2
 8004698:	b29b      	uxth	r3, r3
 800469a:	4608      	mov	r0, r1
 800469c:	4619      	mov	r1, r3
 800469e:	f7ff fc47 	bl	8003f30 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 80046b8:	4413      	add	r3, r2
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4608      	mov	r0, r1
 80046be:	4619      	mov	r1, r3
 80046c0:	f7ff fc36 	bl	8003f30 <XMC_CCU8_SLICE_SetTimerValue>
 80046c4:	e035      	b.n	8004732 <PWM_SVM_Start+0x22a>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d2:	b29b      	uxth	r3, r3
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 80046de:	4413      	add	r3, r2
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4608      	mov	r0, r1
 80046e4:	4619      	mov	r1, r3
 80046e6:	f7ff fc23 	bl	8003f30 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f6:	b29b      	uxth	r3, r3
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8004702:	4413      	add	r3, r2
 8004704:	b29b      	uxth	r3, r3
 8004706:	4608      	mov	r0, r1
 8004708:	4619      	mov	r1, r3
 800470a:	f7ff fc11 	bl	8003f30 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471a:	b29b      	uxth	r3, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 800471c:	b2db      	uxtb	r3, r3
 800471e:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8004726:	4413      	add	r3, r2
 8004728:	b29b      	uxth	r3, r3
 800472a:	4608      	mov	r0, r1
 800472c:	4619      	mov	r1, r3
 800472e:	f7ff fbff 	bl	8003f30 <XMC_CCU8_SLICE_SetTimerValue>
                    + (uint16_t) svmptr->current_offset));
      }
    }

    /* synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerHigh((uint32_t)(svmptr->sync_start_mask));
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fc34 	bl	8003fa4 <XMC_SCU_SetCcuTriggerHigh>

    /* disable the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[0]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	2100      	movs	r1, #0
 8004746:	2201      	movs	r2, #1
 8004748:	f7fc fc98 	bl	800107c <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[1]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	2100      	movs	r1, #0
 8004756:	2201      	movs	r2, #1
 8004758:	f7fc fc90 	bl	800107c <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[2]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	2100      	movs	r1, #0
 8004766:	2201      	movs	r2, #1
 8004768:	f7fc fc88 	bl	800107c <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	7c1b      	ldrb	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <PWM_SVM_Start+0x27c>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	2100      	movs	r1, #0
 800477e:	2201      	movs	r2, #1
 8004780:	f7fc fc7c 	bl	800107c <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    /* disable synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerLow((uint32_t)(svmptr->sync_start_mask));
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fc1d 	bl	8003fc8 <XMC_SCU_SetCcuTriggerLow>

    /* change the state to RUNNING*/
    HandlePtr->state = PWM_SVM_RUNNING;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }
}
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <MOTOR_LIB_abs>:
   return return_val;
 }

/*This is used to find out the absolute value*/
static inline uint32_t MOTOR_LIB_abs(int32_t x)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  int32_t return_val;
  if(x > 0)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	dd02      	ble.n	80047b0 <MOTOR_LIB_abs+0x14>
  {
    return_val = x;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e002      	b.n	80047b6 <MOTOR_LIB_abs+0x1a>
  }
  else
  {
    return_val = (-x);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	425b      	negs	r3, r3
 80047b4:	60fb      	str	r3, [r7, #12]
  }
  return ((uint32_t)return_val);
 80047b6:	68fb      	ldr	r3, [r7, #12]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <MOTOR_LIB_Car2Pol>:
  return (resultant_magnitude);
}
#else

uint32_t MOTOR_LIB_Car2Pol(int32_t x,int32_t y, int16_t *angle)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b08f      	sub	sp, #60	; 0x3c
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint8_t cordic_count;
  int32_t dx,flag = 0, temp_angle = 0,cord_y = y,cord_x = x,temp_cordic_scale,return_val;
 80047d0:	2300      	movs	r3, #0
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t temp_cordic_s;
  if (cord_x < 0)
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	da04      	bge.n	80047f0 <MOTOR_LIB_Car2Pol+0x2c>
  {
     cord_x = (-cord_x);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	425b      	negs	r3, r3
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
    flag = 1;
 80047ec:	2301      	movs	r3, #1
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
  }

  for (cordic_count = 0U; cordic_count < MOTOR_LIB_CORDIC_ITERATIONS; cordic_count++)
 80047f0:	2300      	movs	r3, #0
 80047f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80047f6:	e03b      	b.n	8004870 <MOTOR_LIB_Car2Pol+0xac>
  {
    temp_cordic_s = ((uint32_t)1U<< cordic_count);
 80047f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047fc:	2201      	movs	r2, #1
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	623b      	str	r3, [r7, #32]
    temp_cordic_scale =(int32_t)temp_cordic_s;
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	61fb      	str	r3, [r7, #28]
    dx = cord_x / temp_cordic_scale;
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004810:	61bb      	str	r3, [r7, #24]
    if ( cord_y > 0 )
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	2b00      	cmp	r3, #0
 8004816:	dd13      	ble.n	8004840 <MOTOR_LIB_Car2Pol+0x7c>
    {
      cord_x += (cord_y / temp_cordic_scale);
 8004818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	4413      	add	r3, r2
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
      cord_y -= dx;
 8004826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
      temp_angle -= MOTOR_LIB_E[cordic_count];
 800482e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004832:	4a2a      	ldr	r2, [pc, #168]	; (80048dc <MOTOR_LIB_Car2Pol+0x118>)
 8004834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483e:	e012      	b.n	8004866 <MOTOR_LIB_Car2Pol+0xa2>
    }
    else
    {
      cord_x -= (cord_y / temp_cordic_scale);
 8004840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	fb92 f3f3 	sdiv	r3, r2, r3
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
      cord_y += dx;
 800484e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	4413      	add	r3, r2
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
      temp_angle += MOTOR_LIB_E[cordic_count];
 8004856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800485a:	4a20      	ldr	r2, [pc, #128]	; (80048dc <MOTOR_LIB_Car2Pol+0x118>)
 800485c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004862:	4413      	add	r3, r2
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
  {
     cord_x = (-cord_x);
    flag = 1;
  }

  for (cordic_count = 0U; cordic_count < MOTOR_LIB_CORDIC_ITERATIONS; cordic_count++)
 8004866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800486a:	3301      	adds	r3, #1
 800486c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004870:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004874:	2b0e      	cmp	r3, #14
 8004876:	d9bf      	bls.n	80047f8 <MOTOR_LIB_Car2Pol+0x34>
      cord_x -= (cord_y / temp_cordic_scale);
      cord_y += dx;
      temp_angle += MOTOR_LIB_E[cordic_count];
    }
  }
  if ( flag > 0)
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	2b00      	cmp	r3, #0
 800487c:	dd0d      	ble.n	800489a <MOTOR_LIB_Car2Pol+0xd6>
  {
    *angle = (int16_t)((temp_angle + (int32_t)0x80000000)/(int32_t)MOTOR_LIB_2POW16);
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004884:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <MOTOR_LIB_Car2Pol+0x11c>)
 8004886:	fb82 1203 	smull	r1, r2, r2, r3
 800488a:	441a      	add	r2, r3
 800488c:	13d2      	asrs	r2, r2, #15
 800488e:	17db      	asrs	r3, r3, #31
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	e00b      	b.n	80048b2 <MOTOR_LIB_Car2Pol+0xee>
  }
  else
  {
    *angle = (int16_t)((-temp_angle)/(int32_t)MOTOR_LIB_2POW16);
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	425b      	negs	r3, r3
 800489e:	4a10      	ldr	r2, [pc, #64]	; (80048e0 <MOTOR_LIB_Car2Pol+0x11c>)
 80048a0:	fb82 1203 	smull	r1, r2, r2, r3
 80048a4:	441a      	add	r2, r3
 80048a6:	13d2      	asrs	r2, r2, #15
 80048a8:	17db      	asrs	r3, r3, #31
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	801a      	strh	r2, [r3, #0]
  }
  return_val = (int32_t)((cord_x * MOTOR_LIB_INV_KCORDIC)/ MOTOR_LIB_AMPSCALE);
 80048b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <MOTOR_LIB_Car2Pol+0x120>)
 80048c0:	fb82 1203 	smull	r1, r2, r2, r3
 80048c4:	441a      	add	r2, r3
 80048c6:	11d2      	asrs	r2, r2, #7
 80048c8:	17db      	asrs	r3, r3, #31
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
  return (uint32_t)(return_val);
 80048ce:	697b      	ldr	r3, [r7, #20]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	373c      	adds	r7, #60	; 0x3c
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	08007e08 	.word	0x08007e08
 80048e0:	80008001 	.word	0x80008001
 80048e4:	80808081 	.word	0x80808081

080048e8 <MOTOR_LIB_IParkTransform>:
 * This function is the implementation of Inverse park transform.
 * Valpha  = k/4*(Vd*cos(Angle)- Vq*sin(Angle))
 * Vbeta   = k/4*(Vd*sin(Angle)+ Vq*cos(Angle))
 */
int32_t MOTOR_LIB_IParkTransform(int32_t vd,int32_t vq,int16_t angle,int32_t *v_beta)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08c      	sub	sp, #48	; 0x30
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	80fb      	strh	r3, [r7, #6]
  uint8_t cordic_count, flag=0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  int32_t temp_cordic_scale,dx,cord_x =vd,cord_y=vq;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t temp_angle = angle * (int32_t)MOTOR_LIB_2POW16;
 8004906:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800490a:	4613      	mov	r3, r2
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	623b      	str	r3, [r7, #32]
  uint32_t temp_cordic_s;

  if ( MOTOR_LIB_abs(temp_angle) > 0x40000000U)
 8004912:	6a38      	ldr	r0, [r7, #32]
 8004914:	f7ff ff42 	bl	800479c <MOTOR_LIB_abs>
 8004918:	4603      	mov	r3, r0
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491e:	d909      	bls.n	8004934 <MOTOR_LIB_IParkTransform+0x4c>
  {
    temp_angle = (int32_t)((int32_t)0x80000000 - temp_angle);
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 8004926:	623b      	str	r3, [r7, #32]
    cord_x = -cord_x;
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	425b      	negs	r3, r3
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
    flag = 1U;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  }

  for (cordic_count = 0U; cordic_count < MOTOR_LIB_CORDIC_ITERATIONS; cordic_count++)
 8004934:	2300      	movs	r3, #0
 8004936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800493a:	e03b      	b.n	80049b4 <MOTOR_LIB_IParkTransform+0xcc>
  {
    temp_cordic_s = ((uint32_t)1<< cordic_count);
 800493c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004940:	2201      	movs	r2, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	61fb      	str	r3, [r7, #28]
    temp_cordic_scale =(int32_t)temp_cordic_s ;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	61bb      	str	r3, [r7, #24]
    dx = cord_x / temp_cordic_scale;
 800494c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	fb92 f3f3 	sdiv	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]

    if (temp_angle > 0)
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	2b00      	cmp	r3, #0
 800495a:	dd13      	ble.n	8004984 <MOTOR_LIB_IParkTransform+0x9c>
    {
      cord_x -= cord_y / temp_cordic_scale;
 800495c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	fb92 f3f3 	sdiv	r3, r2, r3
 8004964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
      cord_y += dx;
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4413      	add	r3, r2
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
      temp_angle -= MOTOR_LIB_E[cordic_count];
 8004972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004976:	4a25      	ldr	r2, [pc, #148]	; (8004a0c <MOTOR_LIB_IParkTransform+0x124>)
 8004978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497c:	6a3a      	ldr	r2, [r7, #32]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	623b      	str	r3, [r7, #32]
 8004982:	e012      	b.n	80049aa <MOTOR_LIB_IParkTransform+0xc2>
    }
    else
    {
      cord_x += cord_y / temp_cordic_scale;
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	fb92 f3f3 	sdiv	r3, r2, r3
 800498c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800498e:	4413      	add	r3, r2
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
      cord_y -= dx;
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
      temp_angle += MOTOR_LIB_E[cordic_count];
 800499a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800499e:	4a1b      	ldr	r2, [pc, #108]	; (8004a0c <MOTOR_LIB_IParkTransform+0x124>)
 80049a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	4413      	add	r3, r2
 80049a8:	623b      	str	r3, [r7, #32]
    temp_angle = (int32_t)((int32_t)0x80000000 - temp_angle);
    cord_x = -cord_x;
    flag = 1U;
  }

  for (cordic_count = 0U; cordic_count < MOTOR_LIB_CORDIC_ITERATIONS; cordic_count++)
 80049aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049ae:	3301      	adds	r3, #1
 80049b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80049b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049b8:	2b0e      	cmp	r3, #14
 80049ba:	d9bf      	bls.n	800493c <MOTOR_LIB_IParkTransform+0x54>
      cord_x += cord_y / temp_cordic_scale;
      cord_y -= dx;
      temp_angle += MOTOR_LIB_E[cordic_count];
    }
  }
  if (flag > 0U)
 80049bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <MOTOR_LIB_IParkTransform+0xe2>
  {
    cord_y = ( -cord_y );
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	425b      	negs	r3, r3
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  *v_beta = (int32_t)((cord_y*MOTOR_LIB_INV_KCORDIC)/ MOTOR_LIB_MPS);
 80049ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	4a0e      	ldr	r2, [pc, #56]	; (8004a10 <MOTOR_LIB_IParkTransform+0x128>)
 80049d8:	fb82 1203 	smull	r1, r2, r2, r3
 80049dc:	441a      	add	r2, r3
 80049de:	11d2      	asrs	r2, r2, #7
 80049e0:	17db      	asrs	r3, r3, #31
 80049e2:	1ad2      	subs	r2, r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	601a      	str	r2, [r3, #0]
  return ((int32_t)((cord_x*MOTOR_LIB_INV_KCORDIC)/ MOTOR_LIB_MPS));
 80049e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	4a06      	ldr	r2, [pc, #24]	; (8004a10 <MOTOR_LIB_IParkTransform+0x128>)
 80049f6:	fb82 1203 	smull	r1, r2, r2, r3
 80049fa:	441a      	add	r2, r3
 80049fc:	11d2      	asrs	r2, r2, #7
 80049fe:	17db      	asrs	r3, r3, #31
 8004a00:	1ad3      	subs	r3, r2, r3
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3730      	adds	r7, #48	; 0x30
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	08007e08 	.word	0x08007e08
 8004a10:	80808081 	.word	0x80808081

08004a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <__NVIC_GetPriorityGrouping+0x18>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a20:	0a1b      	lsrs	r3, r3, #8
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	e000ed00 	.word	0xe000ed00

08004a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	db0b      	blt.n	8004a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004a42:	4908      	ldr	r1, [pc, #32]	; (8004a64 <__NVIC_EnableIRQ+0x34>)
 8004a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	79fa      	ldrb	r2, [r7, #7]
 8004a4c:	f002 021f 	and.w	r2, r2, #31
 8004a50:	2001      	movs	r0, #1
 8004a52:	fa00 f202 	lsl.w	r2, r0, r2
 8004a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000e100 	.word	0xe000e100

08004a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	db0a      	blt.n	8004a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7c:	490d      	ldr	r1, [pc, #52]	; (8004ab4 <__NVIC_SetPriority+0x4c>)
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	0092      	lsls	r2, r2, #2
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004a90:	e00a      	b.n	8004aa8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a92:	4909      	ldr	r1, [pc, #36]	; (8004ab8 <__NVIC_SetPriority+0x50>)
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	3b04      	subs	r3, #4
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	0092      	lsls	r2, r2, #2
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	761a      	strb	r2, [r3, #24]
  }
}
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	e000e100 	.word	0xe000e100
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f1c3 0307 	rsb	r3, r3, #7
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	bf28      	it	cs
 8004ada:	2306      	movcs	r3, #6
 8004adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3306      	adds	r3, #6
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d902      	bls.n	8004aec <NVIC_EncodePriority+0x30>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	e000      	b.n	8004aee <NVIC_EncodePriority+0x32>
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2201      	movs	r2, #1
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	1e5a      	subs	r2, r3, #1
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	401a      	ands	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	1e59      	subs	r1, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8004b10:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3724      	adds	r7, #36	; 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop

08004b20 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b25b      	sxtb	r3, r3
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ff7e 	bl	8004a30 <__NVIC_EnableIRQ>
}
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop

08004b3c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8004b3c:	b590      	push	{r4, r7, lr}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	781c      	ldrb	r4, [r3, #0]
 8004b48:	f7ff ff64 	bl	8004a14 <__NVIC_GetPriorityGrouping>
 8004b4c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8004b52:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f7ff ffad 	bl	8004abc <NVIC_EncodePriority>
 8004b62:	4602      	mov	r2, r0
 8004b64:	b263      	sxtb	r3, r4
 8004b66:	4618      	mov	r0, r3
 8004b68:	4611      	mov	r1, r2
 8004b6a:	f7ff ff7d 	bl	8004a68 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	78db      	ldrb	r3, [r3, #3]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ffd2 	bl	8004b20 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd90      	pop	{r4, r7, pc}
 8004b86:	bf00      	nop

08004b88 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]
}
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop

08004ba8 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	7b5b      	ldrb	r3, [r3, #13]
 8004bb4:	f083 0301 	eor.w	r3, r3, #1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00f      	beq.n	8004bde <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	7b1b      	ldrb	r3, [r3, #12]
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f7fc f9ff 	bl	8000fcc <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ffd8 	bl	8004b88 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]
}
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop

08004c08 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	7b5b      	ldrb	r3, [r3, #13]
 8004c14:	f083 0301 	eor.w	r3, r3, #1
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00f      	beq.n	8004c3e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	7b1b      	ldrb	r3, [r3, #12]
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f7fc f8dd 	bl	8000de8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff ffd8 	bl	8004be8 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	3310      	adds	r3, #16
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	2301      	movs	r3, #1
 8004c60:	408b      	lsls	r3, r1
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	7e1b      	ldrb	r3, [r3, #24]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d149      	bne.n	8004d18 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f7fd f8d0 	bl	8001e34 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e02f      	b.n	8004cfa <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca2:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4608      	mov	r0, r1
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f7fd f919 	bl	8001ee8 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	2103      	movs	r1, #3
 8004cc4:	f7fd f9a0 	bl	8002008 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cd0:	7a1b      	ldrb	r3, [r3, #8]
 8004cd2:	f083 0301 	eor.w	r3, r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	f7ff ffb0 	bl	8004c48 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d9cc      	bls.n	8004c9a <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	7e5b      	ldrb	r3, [r3, #25]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fd f8bb 	bl	8001e88 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	7e1b      	ldrb	r3, [r3, #24]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	7c1a      	ldrb	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4608      	mov	r0, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f7fb fb33 	bl	80003a8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	7c1a      	ldrb	r2, [r3, #16]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7c5b      	ldrb	r3, [r3, #17]
 8004d4e:	4608      	mov	r0, r1
 8004d50:	4611      	mov	r1, r2
 8004d52:	461a      	mov	r2, r3
 8004d54:	f7fc fd3c 	bl	80017d0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop

08004d64 <XMC_DAC_EnableSimultaneousDataMode>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_SimultaneousWrite(), XMC_DAC_DisableSimultaneousDataMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_EnableSimultaneousDataMode(XMC_DAC_t *const dac)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_DAC_EnableSimultaneousDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  
  dac->DACCFG[0].high |= DAC_DAC0CFG1_DATMOD_Msk;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	609a      	str	r2, [r3, #8]
}
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop

08004d84 <XMC_DAC_CH_Write>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_CH_StartRampMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_Write(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t data)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
 8004d90:	4613      	mov	r3, r2
 8004d92:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_Write: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_Write: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACDATA[channel] = data;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	883a      	ldrh	r2, [r7, #0]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	605a      	str	r2, [r3, #4]
}
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	460b      	mov	r3, r1
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 8004dba:	7af8      	ldrb	r0, [r7, #11]
 8004dbc:	7afb      	ldrb	r3, [r7, #11]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	00c3      	lsls	r3, r0, #3
 8004dd2:	440b      	add	r3, r1
 8004dd4:	605a      	str	r2, [r3, #4]
                             mode;
}
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <XMC_DAC_CH_EnableEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableEvent()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableEvent(XMC_DAC_t *const dac, const uint8_t channel)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnableEvent: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableEvent: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SREN_Msk;
 8004dec:	78f8      	ldrb	r0, [r7, #3]
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	00c3      	lsls	r3, r0, #3
 8004e00:	440b      	add	r3, r1
 8004e02:	605a      	str	r2, [r3, #4]
}
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop

08004e10 <XMC_DAC_CH_SetOutputScale>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetOutputScale()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetOutputScale(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_OUTPUT_SCALE_t scale)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: scale parameter not valid\n", XMC_DAC_IS_OUTPUT_SCALE_VALID(scale));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_MULDIV_Msk | DAC_DAC0CFG1_SCALE_Msk)) |
 8004e20:	78f8      	ldrb	r0, [r7, #3]
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f023 020f 	bic.w	r2, r3, #15
 8004e30:	78bb      	ldrb	r3, [r7, #2]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	00c3      	lsls	r3, r0, #3
 8004e38:	440b      	add	r3, r1
 8004e3a:	609a      	str	r2, [r3, #8]
                              scale;
}
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop

08004e48 <DAC_ModeConfig>:
  XMC_DAC_CH_SetRampStop(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, stop_ramp);
}

/* This API will configure DAC mode depends upon the user configuration */
XMC_DAC_CH_STATUS_t DAC_ModeConfig(const DAC_t * const HandlePtr)
{
 8004e48:	b5b0      	push	{r4, r5, r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
  XMC_DAC_CH_STATUS_t api_status = XMC_DAC_CH_STATUS_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	73fb      	strb	r3, [r7, #15]
  /* Initialize DAC configuration created by the user */
  if ( XMC_DAC_CH_MODE_PATTERN == HandlePtr->dac_mode )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e5c:	d115      	bne.n	8004e8a <DAC_ModeConfig+0x42>
  {
    api_status = XMC_DAC_CH_StartPatternMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	7c1c      	ldrb	r4, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	9200      	str	r2, [sp, #0]
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	462a      	mov	r2, r5
 8004e7e:	4623      	mov	r3, r4
 8004e80:	f7fc fbde 	bl	8001640 <XMC_DAC_CH_StartPatternMode>
 8004e84:	4603      	mov	r3, r0
 8004e86:	73fb      	strb	r3, [r7, #15]
 8004e88:	e085      	b.n	8004f96 <DAC_ModeConfig+0x14e>
    HandlePtr->dac_pat_table_ptr,HandlePtr->dac_sign_output,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else if ( XMC_DAC_CH_MODE_SINGLE == HandlePtr->dac_mode )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e92:	d115      	bne.n	8004ec0 <DAC_ModeConfig+0x78>
  {
    api_status = XMC_DAC_CH_StartSingleValueMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f7fc fb47 	bl	8001534 <XMC_DAC_CH_StartSingleValueMode>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]
    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f7ff ff63 	bl	8004d84 <XMC_DAC_CH_Write>
 8004ebe:	e06a      	b.n	8004f96 <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_DATA ==  HandlePtr->dac_mode )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ec8:	d125      	bne.n	8004f16 <DAC_ModeConfig+0xce>
  {
    api_status = XMC_DAC_CH_StartDataMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f7fc fb3c 	bl	8001558 <XMC_DAC_CH_StartDataMode>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
    if(1U == HandlePtr->dac_service_request)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d108      	bne.n	8004f00 <DAC_ModeConfig+0xb8>
    {
      /* Enable Service Request */
      XMC_DAC_CH_EnableEvent(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4619      	mov	r1, r3
 8004efc:	f7ff ff70 	bl	8004de0 <XMC_DAC_CH_EnableEvent>
    }

    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f7ff ff38 	bl	8004d84 <XMC_DAC_CH_Write>
 8004f14:	e03f      	b.n	8004f96 <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_RAMP == HandlePtr->dac_mode )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004f1e:	d125      	bne.n	8004f6c <DAC_ModeConfig+0x124>
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8b1d      	ldrh	r5, [r3, #24]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8b5c      	ldrh	r4, [r3, #26]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	9200      	str	r2, [sp, #0]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	462a      	mov	r2, r5
 8004f40:	4623      	mov	r3, r4
 8004f42:	f7fc fb39 	bl	80015b8 <XMC_DAC_CH_StartRampMode>
 8004f46:	4603      	mov	r3, r0
 8004f48:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6819      	ldr	r1, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	791b      	ldrb	r3, [r3, #4]
 8004f5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004f5e:	b2db      	uxtb	r3, r3
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8004f60:	4608      	mov	r0, r1
 8004f62:	4611      	mov	r1, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	f7ff ff53 	bl	8004e10 <XMC_DAC_CH_SetOutputScale>
 8004f6a:	e014      	b.n	8004f96 <DAC_ModeConfig+0x14e>
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
  }
  else if ( XMC_DAC_CH_MODE_NOISE == HandlePtr->dac_mode )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f74:	d10d      	bne.n	8004f92 <DAC_ModeConfig+0x14a>
  {
    api_status = XMC_DAC_CH_StartNoiseMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f7fc fba2 	bl	80016d0 <XMC_DAC_CH_StartNoiseMode>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	e001      	b.n	8004f96 <DAC_ModeConfig+0x14e>
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else
  {
    /* DAC Mode Idle */
    api_status = XMC_DAC_CH_STATUS_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  }
  return api_status;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bdb0      	pop	{r4, r5, r7, pc}

08004fa0 <DAC_Init>:
    * This function initializes DAC
    * peripheral as per the user configurations
*/

DAC_STATUS_t DAC_Init(const DAC_t * const HandlePtr)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  DAC_STATUS_t status = DAC_STATUS_SUCCESS;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]
  /*Assert variables.*/
  XMC_ASSERT(" DAC_Init: Passing argument DAC HandlePtr of type DAC_t is Null",
             (HandlePtr != (DAC_t *)NULL));

  /* Enable DAC module */
  XMC_DAC_CH_Init(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,HandlePtr->dac_config_ptr);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4608      	mov	r0, r1
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f7fc fa3c 	bl	800143c <XMC_DAC_CH_Init>
  /* ANALOG_IO initialization */
  status = (DAC_STATUS_t) ANALOG_IO_Init(HandlePtr->analog_io_config_ptr);
#endif

  /* Configure DAC with user configured mode */
  api_status = DAC_ModeConfig(HandlePtr);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ff3f 	bl	8004e48 <DAC_ModeConfig>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	73bb      	strb	r3, [r7, #14]

  /* Check if start after initialization is enabled */
  if(HandlePtr->dac_start_after_init == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <DAC_Init+0x4c>
  {
    XMC_DAC_CH_SetMode(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, XMC_DAC_CH_MODE_IDLE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f7ff fee0 	bl	8004dac <XMC_DAC_CH_SetMode>
  }

  if(1U == HandlePtr->dac_coupled)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d104      	bne.n	8005000 <DAC_Init+0x60>
  {
    /* Enable Simultaneous Data Mode */
    XMC_DAC_EnableSimultaneousDataMode(HandlePtr->dac_module_ptr);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff feb2 	bl	8004d64 <XMC_DAC_EnableSimultaneousDataMode>
  }

  if(api_status != XMC_DAC_CH_STATUS_OK)
 8005000:	7bbb      	ldrb	r3, [r7, #14]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <DAC_Init+0x6a>
  {
    status = DAC_STATUS_FAILURE;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <__NVIC_SetPriorityGrouping+0x44>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005030:	4013      	ands	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800503c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005044:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8005046:	4a04      	ldr	r2, [pc, #16]	; (8005058 <__NVIC_SetPriorityGrouping+0x44>)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	60d3      	str	r3, [r2, #12]
}
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	e000ed00 	.word	0xe000ed00

0800505c <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8005062:	2001      	movs	r0, #1
 8005064:	f7ff ffd6 	bl	8005014 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005068:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800506a:	4b21      	ldr	r3, [pc, #132]	; (80050f0 <SystemCoreSetup+0x94>)
 800506c:	4a21      	ldr	r2, [pc, #132]	; (80050f4 <SystemCoreSetup+0x98>)
 800506e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005070:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005074:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8005076:	4a1e      	ldr	r2, [pc, #120]	; (80050f0 <SystemCoreSetup+0x94>)
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <SystemCoreSetup+0x94>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005082:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8005086:	4b1c      	ldr	r3, [pc, #112]	; (80050f8 <SystemCoreSetup+0x9c>)
 8005088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508c:	3314      	adds	r3, #20
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f023 030f 	bic.w	r3, r3, #15
 8005098:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f043 0303 	orr.w	r3, r3, #3
 80050a0:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <SystemCoreSetup+0x9c>)
 80050a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a8:	3314      	adds	r3, #20
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80050ae:	4a10      	ldr	r2, [pc, #64]	; (80050f0 <SystemCoreSetup+0x94>)
 80050b0:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <SystemCoreSetup+0x94>)
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	f023 0310 	bic.w	r3, r3, #16
 80050b8:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80050ba:	4a0d      	ldr	r2, [pc, #52]	; (80050f0 <SystemCoreSetup+0x94>)
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <SystemCoreSetup+0x94>)
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f023 0308 	bic.w	r3, r3, #8
 80050c4:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80050c6:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <SystemCoreSetup+0x94>)
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <SystemCoreSetup+0x94>)
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80050d2:	4a07      	ldr	r2, [pc, #28]	; (80050f0 <SystemCoreSetup+0x94>)
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <SystemCoreSetup+0x94>)
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050dc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80050de:	4a04      	ldr	r2, [pc, #16]	; (80050f0 <SystemCoreSetup+0x94>)
 80050e0:	4b03      	ldr	r3, [pc, #12]	; (80050f0 <SystemCoreSetup+0x94>)
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	e000ed00 	.word	0xe000ed00
 80050f4:	08000000 	.word	0x08000000
 80050f8:	58001000 	.word	0x58001000

080050fc <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]

  return (status);
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8005120:	4b02      	ldr	r3, [pc, #8]	; (800512c <OSCHP_GetFrequency+0x10>)
}
 8005122:	4618      	mov	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	00b71b00 	.word	0x00b71b00

08005130 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8005130:	b5b0      	push	{r4, r5, r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <SystemCoreClockSetup+0x50>)
 8005138:	1d3c      	adds	r4, r7, #4
 800513a:	461d      	mov	r5, r3
 800513c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800513e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8005144:	1d3b      	adds	r3, r7, #4
 8005146:	4618      	mov	r0, r3
 8005148:	f7fb fa08 	bl	800055c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800514c:	2000      	movs	r0, #0
 800514e:	f7fb fb27 	bl	80007a0 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8005152:	2000      	movs	r0, #0
 8005154:	f7fb fadc 	bl	8000710 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8005158:	2004      	movs	r0, #4
 800515a:	f7fb fbad 	bl	80008b8 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800515e:	2001      	movs	r0, #1
 8005160:	2120      	movs	r1, #32
 8005162:	f7fb fbf5 	bl	8000950 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8005166:	2000      	movs	r0, #0
 8005168:	f7fb fae6 	bl	8000738 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800516c:	2001      	movs	r0, #1
 800516e:	f7fb fbcb 	bl	8000908 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8005172:	2001      	movs	r0, #1
 8005174:	f7fb fbb4 	bl	80008e0 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bdb0      	pop	{r4, r5, r7, pc}
 800517e:	bf00      	nop
 8005180:	08007f10 	.word	0x08007f10

08005184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <__NVIC_GetPriorityGrouping+0x18>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005190:	0a1b      	lsrs	r3, r3, #8
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	db0b      	blt.n	80051ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80051b2:	4908      	ldr	r1, [pc, #32]	; (80051d4 <__NVIC_EnableIRQ+0x34>)
 80051b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b8:	095b      	lsrs	r3, r3, #5
 80051ba:	79fa      	ldrb	r2, [r7, #7]
 80051bc:	f002 021f 	and.w	r2, r2, #31
 80051c0:	2001      	movs	r0, #1
 80051c2:	fa00 f202 	lsl.w	r2, r0, r2
 80051c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	e000e100 	.word	0xe000e100

080051d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	6039      	str	r1, [r7, #0]
 80051e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	db0a      	blt.n	8005202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ec:	490d      	ldr	r1, [pc, #52]	; (8005224 <__NVIC_SetPriority+0x4c>)
 80051ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	0092      	lsls	r2, r2, #2
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	440b      	add	r3, r1
 80051fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005200:	e00a      	b.n	8005218 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005202:	4909      	ldr	r1, [pc, #36]	; (8005228 <__NVIC_SetPriority+0x50>)
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	3b04      	subs	r3, #4
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	0092      	lsls	r2, r2, #2
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	440b      	add	r3, r1
 8005216:	761a      	strb	r2, [r3, #24]
  }
}
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	e000e100 	.word	0xe000e100
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800522c:	b480      	push	{r7}
 800522e:	b089      	sub	sp, #36	; 0x24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f1c3 0307 	rsb	r3, r3, #7
 8005246:	2b06      	cmp	r3, #6
 8005248:	bf28      	it	cs
 800524a:	2306      	movcs	r3, #6
 800524c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3306      	adds	r3, #6
 8005252:	2b06      	cmp	r3, #6
 8005254:	d902      	bls.n	800525c <NVIC_EncodePriority+0x30>
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3b01      	subs	r3, #1
 800525a:	e000      	b.n	800525e <NVIC_EncodePriority+0x32>
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2201      	movs	r2, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	401a      	ands	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2101      	movs	r1, #1
 8005276:	fa01 f303 	lsl.w	r3, r1, r3
 800527a:	1e59      	subs	r1, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8005280:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8005282:	4618      	mov	r0, r3
 8005284:	3724      	adds	r7, #36	; 0x24
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop

08005290 <XMC_VADC_GROUP_QueueSetGatingMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GROUP_QueueSelectGating();
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80052a2:	f023 0203 	bic.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /* Set the new gating mode */
  group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop

080052c8 <XMC_VADC_GROUP_QueueFlushEntries>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Initiate flushing of the queue */
  group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80052d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 80052e0:	bf00      	nop
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f8      	beq.n	80052e2 <XMC_VADC_GROUP_QueueFlushEntries+0x1a>
  {
    /* Wait until the queue is indeed flushed */
  }
}
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop

080052fc <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <XMC_VADC_GROUP_QueueClearReqSrcEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueTriggerReqSrcEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->SEFCLR = (uint32_t)VADC_G_SEFCLR_SEV0_Msk;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
}
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop

08005334 <ADC_QUEUE_ResetListContents>:
  return version;
}
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* API to reset (De-Initialise) contents of all queue entries */
void ADC_QUEUE_ResetListContents(uint8_t instance_num)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("ADC_QUEUE_ResetListContents:Wrong Instance number",(instance_num < ADC_QUEUE_NUM_APPINSTANCES))

  /*
   * Now reset the contents of all the lists. Application later uses ADC_QUEUE_Insert() to initialise specific entries.
   */
  memset(adc_queue_list_ptrs[instance_num][ADC_QUEUE_CH_INDEX], ADC_QUEUE_INVALID_CHANNEL ,
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	4a0e      	ldr	r2, [pc, #56]	; (800537c <ADC_QUEUE_ResetListContents+0x48>)
 8005342:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005346:	4618      	mov	r0, r3
 8005348:	21ff      	movs	r1, #255	; 0xff
 800534a:	2260      	movs	r2, #96	; 0x60
 800534c:	f002 f80f 	bl	800736e <memset>
		 (sizeof(ADC_QUEUE_ENTRY_t)* ADC_QUEUE_NUM_CHANNELS));
  memset(adc_queue_list_ptrs[instance_num][ADC_QUEUE_POS_INDEX], ADC_QUEUE_INVALID_CHANNEL ,
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	4a0a      	ldr	r2, [pc, #40]	; (800537c <ADC_QUEUE_ResetListContents+0x48>)
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4413      	add	r3, r2
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	4618      	mov	r0, r3
 800535c:	21ff      	movs	r1, #255	; 0xff
 800535e:	2260      	movs	r2, #96	; 0x60
 8005360:	f002 f805 	bl	800736e <memset>
		 (sizeof(ADC_QUEUE_ENTRY_t)* ADC_QUEUE_NUM_CHANNELS));
  memset(adc_queue_callback_list[instance_num], 0 ,(sizeof(ADC_QUEUE_EVENT_CALLBACK) * ADC_QUEUE_NUM_CHANNELS));
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	015b      	lsls	r3, r3, #5
 8005368:	4a05      	ldr	r2, [pc, #20]	; (8005380 <ADC_QUEUE_ResetListContents+0x4c>)
 800536a:	4413      	add	r3, r2
 800536c:	4618      	mov	r0, r3
 800536e:	2100      	movs	r1, #0
 8005370:	2220      	movs	r2, #32
 8005372:	f001 fffc 	bl	800736e <memset>
}
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	200004c0 	.word	0x200004c0
 8005380:	20000388 	.word	0x20000388

08005384 <ADC_QUEUE_Init>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
ADC_QUEUE_STATUS_t ADC_QUEUE_Init(ADC_QUEUE_t *const handle_ptr)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  ADC_QUEUE_STATUS_t status;

  XMC_ASSERT("ADC_QUEUE_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_QUEUE_UNINITIALIZED == handle_ptr->init_status)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7e5b      	ldrb	r3, [r3, #25]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d157      	bne.n	8005444 <ADC_QUEUE_Init+0xc0>
  {
    /*Initialization of APP 'GLOBAL_ADC'*/
    status = (ADC_QUEUE_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fc6b 	bl	8004c74 <GLOBAL_ADC_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	73fb      	strb	r3, [r7, #15]

    /*Class Configuration*/
    XMC_VADC_GROUP_InputClassInit(handle_ptr->group_handle,handle_ptr->iclass_config_handle,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68da      	ldr	r2, [r3, #12]
                                  XMC_VADC_GROUP_CONV_STD,(uint32_t)handle_ptr->iclass_num);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7edb      	ldrb	r3, [r3, #27]
  {
    /*Initialization of APP 'GLOBAL_ADC'*/
    status = (ADC_QUEUE_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);

    /*Class Configuration*/
    XMC_VADC_GROUP_InputClassInit(handle_ptr->group_handle,handle_ptr->iclass_config_handle,
 80053aa:	461c      	mov	r4, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4610      	mov	r0, r2
 80053b0:	6819      	ldr	r1, [r3, #0]
 80053b2:	2200      	movs	r2, #0
 80053b4:	4623      	mov	r3, r4
 80053b6:	f7fc fdcb 	bl	8001f50 <XMC_VADC_GROUP_InputClassInit>
                                  XMC_VADC_GROUP_CONV_STD,(uint32_t)handle_ptr->iclass_num);

    /* Initialize the Queue hardware */
    XMC_VADC_GROUP_QueueInit(handle_ptr->group_handle,handle_ptr->queue_config_handle);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4610      	mov	r0, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	f7fc fea7 	bl	8002118 <XMC_VADC_GROUP_QueueInit>
  
    /* Configure the gating mode for queue*/
    XMC_VADC_GROUP_QueueSetGatingMode(handle_ptr->group_handle, handle_ptr->gating_mode);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	7c1b      	ldrb	r3, [r3, #16]
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	f7ff ff5b 	bl	8005290 <XMC_VADC_GROUP_QueueSetGatingMode>

    /* Clear the internal data structure of queue APP */
    ADC_QUEUE_lInitializeListToDefaults(handle_ptr->instance_number);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7e9b      	ldrb	r3, [r3, #26]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f93e 	bl	8005660 <ADC_QUEUE_lInitializeListToDefaults>
  
    /*Interrupt Configuration*/
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	7b1b      	ldrb	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d027      	beq.n	800543e <ADC_QUEUE_Init+0xba>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	b2dc      	uxtb	r4, r3
 80053f6:	f7ff fec5 	bl	8005184 <__NVIC_GetPriorityGrouping>
 80053fa:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->rs_intr_handle->priority,handle_ptr->rs_intr_handle->sub_priority));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 8005400:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->rs_intr_handle->priority,handle_ptr->rs_intr_handle->sub_priority));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	f7ff ff0d 	bl	800522c <NVIC_EncodePriority>
 8005412:	4602      	mov	r2, r0
 8005414:	b263      	sxtb	r3, r4
 8005416:	4618      	mov	r0, r3
 8005418:	4611      	mov	r1, r2
 800541a:	f7ff fedd 	bl	80051d8 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(handle_ptr->rs_intr_handle->node_id,
                              ((handle_ptr->rs_intr_handle->node_id << 8) | handle_ptr->rs_intr_handle->irqctrl));
#endif

      /* Connect RS Events to NVIC nodes */
      XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(handle_ptr->group_handle,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7e1b      	ldrb	r3, [r3, #24]
 8005426:	4610      	mov	r0, r2
 8005428:	4619      	mov	r1, r3
 800542a:	f7fc fec3 	bl	80021b4 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>
                                                      (XMC_VADC_SR_t)handle_ptr->srv_req_node);

      /* Enable Interrupt */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->rs_intr_handle->node_id);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	b25b      	sxtb	r3, r3
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff feb1 	bl	80051a0 <__NVIC_EnableIRQ>
    }
    handle_ptr->init_status = status;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	7bfa      	ldrb	r2, [r7, #15]
 8005442:	765a      	strb	r2, [r3, #25]
  }
  return (handle_ptr->init_status);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	7e5b      	ldrb	r3, [r3, #25]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	bd90      	pop	{r4, r7, pc}

08005450 <ADC_QUEUE_InsertQueueEntry>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_InsertQueueEntry(ADC_QUEUE_t* handle_ptr, const ADC_QUEUE_ENTRY_t *entry)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]

  XMC_ASSERT("ADC_QUEUE_Insert:Invalid handle_ptr", (handle_ptr != NULL))
  XMC_ASSERT("ADC_QUEUE_Insert:Invalid queue entry", (entry != NULL))

  /* 1. Insert this entry into a list which is arranged on the basis of channel numbers */
  node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_CH_INDEX];
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	7e9b      	ldrb	r3, [r3, #26]
 800545e:	461a      	mov	r2, r3
 8005460:	4b33      	ldr	r3, [pc, #204]	; (8005530 <ADC_QUEUE_InsertQueueEntry+0xe0>)
 8005462:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8005466:	613b      	str	r3, [r7, #16]
  node = node + (entry->channel_number);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	795b      	ldrb	r3, [r3, #5]
 800546c:	461a      	mov	r2, r3
 800546e:	4613      	mov	r3, r2
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	461a      	mov	r2, r3
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4413      	add	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
  memcpy((void *)node, (void *)entry, sizeof(ADC_QUEUE_ENTRY_t)); 
 800547e:	6938      	ldr	r0, [r7, #16]
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	220c      	movs	r2, #12
 8005484:	f001 ff68 	bl	8007358 <memcpy>

  /* Insert the same entry into a list which is arranged on the basis of the position of the channel in the queue */
  node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	7e9b      	ldrb	r3, [r3, #26]
 800548c:	4a28      	ldr	r2, [pc, #160]	; (8005530 <ADC_QUEUE_InsertQueueEntry+0xe0>)
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4413      	add	r3, r2
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]
  node = node + (entry->queue_position);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	791b      	ldrb	r3, [r3, #4]
 800549a:	461a      	mov	r2, r3
 800549c:	4613      	mov	r3, r2
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	461a      	mov	r2, r3
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4413      	add	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
  memcpy((void *)node, (void *)entry, sizeof(ADC_QUEUE_ENTRY_t));
 80054ac:	6938      	ldr	r0, [r7, #16]
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	220c      	movs	r2, #12
 80054b2:	f001 ff51 	bl	8007358 <memcpy>

  entry_callback = entry->adc_event_callback;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
  callback_node = adc_queue_callback_list[handle_ptr->instance_number];
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7e9b      	ldrb	r3, [r3, #26]
 80054c0:	015b      	lsls	r3, r3, #5
 80054c2:	4a1c      	ldr	r2, [pc, #112]	; (8005534 <ADC_QUEUE_InsertQueueEntry+0xe4>)
 80054c4:	4413      	add	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]
  insert_yes = (bool)true;
 80054c8:	2301      	movs	r3, #1
 80054ca:	75bb      	strb	r3, [r7, #22]
  if(NULL != entry_callback)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d02b      	beq.n	800552a <ADC_QUEUE_InsertQueueEntry+0xda>
  {
    for(i = handle_ptr->number_valid_callback; i >= (int32_t)0;i--)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	7f5b      	ldrb	r3, [r3, #29]
 80054d6:	75fb      	strb	r3, [r7, #23]
 80054d8:	e010      	b.n	80054fc <ADC_QUEUE_InsertQueueEntry+0xac>
    {
      if(*(callback_node + i) == entry_callback)
 80054da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	4413      	add	r3, r2
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d102      	bne.n	80054f2 <ADC_QUEUE_InsertQueueEntry+0xa2>
      {
        insert_yes = false;
 80054ec:	2300      	movs	r3, #0
 80054ee:	75bb      	strb	r3, [r7, #22]
        break;
 80054f0:	e008      	b.n	8005504 <ADC_QUEUE_InsertQueueEntry+0xb4>
  entry_callback = entry->adc_event_callback;
  callback_node = adc_queue_callback_list[handle_ptr->instance_number];
  insert_yes = (bool)true;
  if(NULL != entry_callback)
  {
    for(i = handle_ptr->number_valid_callback; i >= (int32_t)0;i--)
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	75fb      	strb	r3, [r7, #23]
 80054fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005500:	2b00      	cmp	r3, #0
 8005502:	daea      	bge.n	80054da <ADC_QUEUE_InsertQueueEntry+0x8a>
        insert_yes = false;
        break;
      }
    }

    if(insert_yes != false)
 8005504:	7dbb      	ldrb	r3, [r7, #22]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00f      	beq.n	800552a <ADC_QUEUE_InsertQueueEntry+0xda>
    {
      adc_queue_callback_list[handle_ptr->instance_number][handle_ptr->number_valid_callback++] = entry_callback;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	7e9b      	ldrb	r3, [r3, #26]
 800550e:	4618      	mov	r0, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	7f5b      	ldrb	r3, [r3, #29]
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	b2d1      	uxtb	r1, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	7751      	strb	r1, [r2, #29]
 800551c:	461a      	mov	r2, r3
 800551e:	4905      	ldr	r1, [pc, #20]	; (8005534 <ADC_QUEUE_InsertQueueEntry+0xe4>)
 8005520:	00c3      	lsls	r3, r0, #3
 8005522:	4413      	add	r3, r2
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }


}
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	200004c0 	.word	0x200004c0
 8005534:	20000388 	.word	0x20000388

08005538 <ADC_QUEUE_AllEntriesInserted>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_AllEntriesInserted(ADC_QUEUE_t* handle_ptr)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t pos_index;
  
  XMC_ASSERT("ADC_QUEUE_AllEntriesInserted:Invalid handle_ptr", (handle_ptr != NULL))

  /* All entries have been submitted. The queue hardware may now be programmed in the right order. */
  start_node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	7e9b      	ldrb	r3, [r3, #26]
 8005544:	4a26      	ldr	r2, [pc, #152]	; (80055e0 <ADC_QUEUE_AllEntriesInserted+0xa8>)
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4413      	add	r3, r2
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	613b      	str	r3, [r7, #16]

  /* Flush any entries that are currently in the queue buffer*/
  XMC_VADC_GROUP_QueueFlushEntries(handle_ptr->group_handle);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff feb8 	bl	80052c8 <XMC_VADC_GROUP_QueueFlushEntries>

  for (pos_index = 0U; pos_index < ADC_QUEUE_NUM_CHANNELS; pos_index++)
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	e039      	b.n	80055d2 <ADC_QUEUE_AllEntriesInserted+0x9a>
  {
    node = start_node +  pos_index;
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4613      	mov	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	461a      	mov	r2, r3
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	4413      	add	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
    
    if (ADC_QUEUE_INVALID_CHANNEL != node->channel_number)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	795b      	ldrb	r3, [r3, #5]
 8005574:	2bff      	cmp	r3, #255	; 0xff
 8005576:	d029      	beq.n	80055cc <ADC_QUEUE_AllEntriesInserted+0x94>
    {
      /* Create a queue entry object for the LLD */
      entry.channel_num   = (uint8_t) node->channel_number;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	795b      	ldrb	r3, [r3, #5]
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	b2da      	uxtb	r2, r3
 8005582:	7a3b      	ldrb	r3, [r7, #8]
 8005584:	f362 0304 	bfi	r3, r2, #0, #5
 8005588:	723b      	strb	r3, [r7, #8]
      entry.refill_needed = (uint32_t) node->refill_needed;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	79db      	ldrb	r3, [r3, #7]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	b2da      	uxtb	r2, r3
 8005594:	7a3b      	ldrb	r3, [r7, #8]
 8005596:	f362 1345 	bfi	r3, r2, #5, #1
 800559a:	723b      	strb	r3, [r7, #8]
      entry.generate_interrupt = (uint32_t) node->rs_event_notification;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	7a5b      	ldrb	r3, [r3, #9]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	7a3b      	ldrb	r3, [r7, #8]
 80055a8:	f362 1386 	bfi	r3, r2, #6, #1
 80055ac:	723b      	strb	r3, [r7, #8]
      entry.external_trigger   = (uint32_t)node->trigger_needed;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	799b      	ldrb	r3, [r3, #6]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	7a3b      	ldrb	r3, [r7, #8]
 80055ba:	f362 13c7 	bfi	r3, r2, #7, #1
 80055be:	723b      	strb	r3, [r7, #8]
      
      /* Request the LLD to insert the channel */
      XMC_VADC_GROUP_QueueInsertChannel(handle_ptr->group_handle, entry);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4618      	mov	r0, r3
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	f7ff fe98 	bl	80052fc <XMC_VADC_GROUP_QueueInsertChannel>
  start_node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];

  /* Flush any entries that are currently in the queue buffer*/
  XMC_VADC_GROUP_QueueFlushEntries(handle_ptr->group_handle);

  for (pos_index = 0U; pos_index < ADC_QUEUE_NUM_CHANNELS; pos_index++)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	3301      	adds	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b07      	cmp	r3, #7
 80055d6:	d9c2      	bls.n	800555e <ADC_QUEUE_AllEntriesInserted+0x26>
      
      /* Request the LLD to insert the channel */
      XMC_VADC_GROUP_QueueInsertChannel(handle_ptr->group_handle, entry);
    }
  }
}
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	200004c0 	.word	0x200004c0

080055e4 <ADC_QUEUE_ReqSrcEventHandler>:
    }
  }
}
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_ReqSrcEventHandler(ADC_QUEUE_t* handle_ptr)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  int32_t pos_index;
  ADC_QUEUE_EVENT_CALLBACK *callback_node;
  
  XMC_ASSERT("ADC_QUEUE_ReqSrcEventHandler:Invalid handle_ptr", (handle_ptr != NULL))

  XMC_VADC_GROUP_QueueClearReqSrcEvent(handle_ptr->group_handle);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fe91 	bl	8005318 <XMC_VADC_GROUP_QueueClearReqSrcEvent>
  
  callback_node = adc_queue_callback_list[handle_ptr->instance_number];
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7e9b      	ldrb	r3, [r3, #26]
 80055fa:	015b      	lsls	r3, r3, #5
 80055fc:	4a0b      	ldr	r2, [pc, #44]	; (800562c <ADC_QUEUE_ReqSrcEventHandler+0x48>)
 80055fe:	4413      	add	r3, r2
 8005600:	60bb      	str	r3, [r7, #8]
  /* Iterate over all the valid entries and locate entries that requested a request source notification*/
  for ( pos_index = (int32_t)handle_ptr->number_valid_callback - (int32_t)1; pos_index >= (int32_t)0; pos_index--)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	7f5b      	ldrb	r3, [r3, #29]
 8005606:	3b01      	subs	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e008      	b.n	800561e <ADC_QUEUE_ReqSrcEventHandler+0x3a>
  {
    (*(callback_node + pos_index))();
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	4413      	add	r3, r2
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4798      	blx	r3

  XMC_VADC_GROUP_QueueClearReqSrcEvent(handle_ptr->group_handle);
  
  callback_node = adc_queue_callback_list[handle_ptr->instance_number];
  /* Iterate over all the valid entries and locate entries that requested a request source notification*/
  for ( pos_index = (int32_t)handle_ptr->number_valid_callback - (int32_t)1; pos_index >= (int32_t)0; pos_index--)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3b01      	subs	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	daf3      	bge.n	800560c <ADC_QUEUE_ReqSrcEventHandler+0x28>
  {
    (*(callback_node + pos_index))();
  }
}
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000388 	.word	0x20000388

08005630 <VADC0_G0_1_IRQHandler>:

/**
 * This function invokes the Request source handler for ADC_QUEUE_0
 */
void ADC_QUEUE_0_ReqSrcEventHandler(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  ADC_QUEUE_ReqSrcEventHandler(&ADC_QUEUE_0);
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <VADC0_G0_1_IRQHandler+0xc>)
 8005636:	f7ff ffd5 	bl	80055e4 <ADC_QUEUE_ReqSrcEventHandler>
}
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20000230 	.word	0x20000230

08005640 <VADC0_G1_3_IRQHandler>:

/**
 * This function invokes the Request source handler for ADC_QUEUE_1
 */
void ADC_QUEUE_1_ReqSrcEventHandler(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  ADC_QUEUE_ReqSrcEventHandler(&ADC_QUEUE_1);
 8005644:	4801      	ldr	r0, [pc, #4]	; (800564c <VADC0_G1_3_IRQHandler+0xc>)
 8005646:	f7ff ffcd 	bl	80055e4 <ADC_QUEUE_ReqSrcEventHandler>
}
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000250 	.word	0x20000250

08005650 <VADC0_G2_0_IRQHandler>:

/**
 * This function invokes the Request source handler for ADC_QUEUE_2
 */
void ADC_QUEUE_2_ReqSrcEventHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  ADC_QUEUE_ReqSrcEventHandler(&ADC_QUEUE_2);
 8005654:	4801      	ldr	r0, [pc, #4]	; (800565c <VADC0_G2_0_IRQHandler+0xc>)
 8005656:	f7ff ffc5 	bl	80055e4 <ADC_QUEUE_ReqSrcEventHandler>
}
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000270 	.word	0x20000270

08005660 <ADC_QUEUE_lInitializeListToDefaults>:



/* API generated to initialise list pointers and clear its contents*/
void ADC_QUEUE_lInitializeListToDefaults(uint8_t instance_num)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	71fb      	strb	r3, [r7, #7]

  /* Initialise list pointers of APP Instance- ADC_QUEUE_0 */
  adc_queue_list_ptrs[0][0] = adc_queue_list_ch_index_0;
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 800566c:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <ADC_QUEUE_lInitializeListToDefaults+0x40>)
 800566e:	601a      	str	r2, [r3, #0]
  adc_queue_list_ptrs[0][1] = adc_queue_list_pos_index_0;
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 8005672:	4a0c      	ldr	r2, [pc, #48]	; (80056a4 <ADC_QUEUE_lInitializeListToDefaults+0x44>)
 8005674:	605a      	str	r2, [r3, #4]
 
  /* Initialise list pointers of APP Instance- ADC_QUEUE_1 */
  adc_queue_list_ptrs[1][0] = adc_queue_list_ch_index_1;
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 8005678:	4a0b      	ldr	r2, [pc, #44]	; (80056a8 <ADC_QUEUE_lInitializeListToDefaults+0x48>)
 800567a:	609a      	str	r2, [r3, #8]
  adc_queue_list_ptrs[1][1] = adc_queue_list_pos_index_1;
 800567c:	4b07      	ldr	r3, [pc, #28]	; (800569c <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 800567e:	4a0b      	ldr	r2, [pc, #44]	; (80056ac <ADC_QUEUE_lInitializeListToDefaults+0x4c>)
 8005680:	60da      	str	r2, [r3, #12]
 
  /* Initialise list pointers of APP Instance- ADC_QUEUE_2 */
  adc_queue_list_ptrs[2][0] = adc_queue_list_ch_index_2;
 8005682:	4b06      	ldr	r3, [pc, #24]	; (800569c <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 8005684:	4a0a      	ldr	r2, [pc, #40]	; (80056b0 <ADC_QUEUE_lInitializeListToDefaults+0x50>)
 8005686:	611a      	str	r2, [r3, #16]
  adc_queue_list_ptrs[2][1] = adc_queue_list_pos_index_2;
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 800568a:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <ADC_QUEUE_lInitializeListToDefaults+0x54>)
 800568c:	615a      	str	r2, [r3, #20]
 
  /* Reset channels */
  ADC_QUEUE_ResetListContents(instance_num);
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fe4f 	bl	8005334 <ADC_QUEUE_ResetListContents>
}
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	200004c0 	.word	0x200004c0
 80056a0:	200005a0 	.word	0x200005a0
 80056a4:	20000600 	.word	0x20000600
 80056a8:	20000540 	.word	0x20000540
 80056ac:	200004e0 	.word	0x200004e0
 80056b0:	20000660 	.word	0x20000660
 80056b4:	200006c0 	.word	0x200006c0

080056b8 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop

080056dc <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop

08005700 <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800570e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005712:	0e1b      	lsrs	r3, r3, #24
 8005714:	2b00      	cmp	r3, #0
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	b2db      	uxtb	r3, r3
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop

0800572c <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6819      	ldr	r1, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	32a0      	adds	r2, #160	; 0xa0
 8005742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <ADC_MEASUREMENT_ADV_lInsertEntry>:
 * LOCAL ROUTINES
 **********************************************************************************************************************/
#if defined(ADC_MEASUREMENT_ADV_ADC_QUEUE_USED) || defined (ADC_MEASUREMENT_ADV_ADC_SCAN_USED)
/* Local function to insert an entry into the H/W*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lInsertEntry(const ADC_MEASUREMENT_ADV_t *const handle_ptr, uint8_t ch_num)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
#if defined(ADC_MEASUREMENT_ADV_QUEUE_USED) && defined(ADC_MEASUREMENT_ADV_ADC_QUEUE_USED)
  #if defined(ADC_MEASUREMENT_ADV_SCAN_USED) && defined(ADC_MEASUREMENT_ADV_ADC_SCAN_USED)
    else
  #endif
    {
      ADC_QUEUE_InsertQueueEntry(handle_ptr->queue_handle, handle_ptr->queue_entries[ch_num]);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68d9      	ldr	r1, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4608      	mov	r0, r1
 800576e:	4619      	mov	r1, r3
 8005770:	f7ff fe6e 	bl	8005450 <ADC_QUEUE_InsertQueueEntry>
    }
#endif
}
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop

0800577c <ADC_MEASUREMENT_ADV_lRequestSrcInit>:
#endif
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Local function to do the request source initialization.*/
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lRequestSrcInit(const ADC_MEASUREMENT_ADV_t
                                                                                 *const handle_ptr)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
      else
  #endif
      {
        /* Call the function to initialise Clock and ADC global functional units*/
        status = (ADC_MEASUREMENT_ADV_STATUS_t) ADC_QUEUE_Init(handle_ptr->queue_handle);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff fdfb 	bl	8005384 <ADC_QUEUE_Init>
 800578e:	4603      	mov	r3, r0
 8005790:	73fb      	strb	r3, [r7, #15]
      }
#endif
    }
#endif
    return (status);
 8005792:	7bfb      	ldrb	r3, [r7, #15]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <ADC_MEASUREMENT_ADV_lArbitrationStatus>:
}
#endif

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE bool ADC_MEASUREMENT_ADV_lArbitrationStatus(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  bool clock_reset_check;
  bool arbitration_status;

#if !defined(CLOCK_GATING_SUPPORTED) || !defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = (bool)false;
 80057a4:	2300      	movs	r3, #0
 80057a6:	73bb      	strb	r3, [r7, #14]
#endif
  arbitration_status = (bool)false;
 80057a8:	2300      	movs	r3, #0
 80057aa:	73fb      	strb	r3, [r7, #15]
  /* To check if the arbiter is already enabled. Before checking this ensure that clock and reset states are correct */
#if defined(CLOCK_GATING_SUPPORTED) && defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif
#ifdef PERIPHERAL_RESET_SUPPORTED
  clock_reset_check |= !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_VADC);
 80057ac:	2001      	movs	r0, #1
 80057ae:	f7fa ff67 	bl	8000680 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f083 0301 	eor.w	r3, r3, #1
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	4313      	orrs	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	73bb      	strb	r3, [r7, #14]
#endif
  if(clock_reset_check != (bool)false)
 80057ca:	7bbb      	ldrb	r3, [r7, #14]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x4a>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        arbitration_status = XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(group_ptrs[handle_ptr->group_index]);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	7d5b      	ldrb	r3, [r3, #21]
 80057d4:	461a      	mov	r2, r3
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x54>)
 80057d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff ff8f 	bl	8005700 <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>
 80057e2:	4603      	mov	r3, r0
 80057e4:	73fb      	strb	r3, [r7, #15]
      }
#endif
  }
  return (arbitration_status);
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	08007f78 	.word	0x08007f78

080057f4 <ADC_MEASUREMENT_ADV_lDisableArbitration>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lDisableArbitration(const ADC_MEASUREMENT_ADV_t *const handle_ptr,
                                                             bool arbitration_status)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	70fb      	strb	r3, [r7, #3]
  if(arbitration_status == (bool)false)
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	f083 0301 	eor.w	r3, r3, #1
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d008      	beq.n	800581e <ADC_MEASUREMENT_ADV_lDisableArbitration+0x2a>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	7d5b      	ldrb	r3, [r3, #21]
 8005810:	461a      	mov	r2, r3
 8005812:	4b04      	ldr	r3, [pc, #16]	; (8005824 <ADC_MEASUREMENT_ADV_lDisableArbitration+0x30>)
 8005814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff5f 	bl	80056dc <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
      }
#endif
  }
}
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	08007f78 	.word	0x08007f78

08005828 <ADC_MEASUREMENT_ADV_lInsertChannels>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Insert channels into the hardware*/
void ADC_MEASUREMENT_ADV_lInsertChannels(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
      else
  #endif
      {
        ADC_QUEUE_AllEntriesInserted(handle_ptr->queue_handle);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fe7f 	bl	8005538 <ADC_QUEUE_AllEntriesInserted>
      }
#endif
    }
#endif
}
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <ADC_MEASUREMENT_ADV_lSyncADCClocks>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifndef ADC_MEASUREMENT_ADV_SYNC_USED
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
 8005846:	2303      	movs	r3, #3
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	e00a      	b.n	8005862 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x22>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
 800584c:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005854:	4618      	mov	r0, r3
 8005856:	2100      	movs	r1, #0
 8005858:	f7fc fbd6 	bl	8002008 <XMC_VADC_GROUP_SetPowerMode>
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3b01      	subs	r3, #1
 8005860:	607b      	str	r3, [r7, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	daf1      	bge.n	800584c <ADC_MEASUREMENT_ADV_lSyncADCClocks+0xc>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
 8005868:	2303      	movs	r3, #3
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	e012      	b.n	8005894 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x54>
  {
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);
 800586e:	4a11      	ldr	r2, [pc, #68]	; (80058b4 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4610      	mov	r0, r2
 800587a:	2100      	movs	r1, #0
 800587c:	461a      	mov	r2, r3
 800587e:	f7fc fbdf 	bl	8002040 <XMC_VADC_GROUP_SetSyncSlave>

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
 8005882:	4a0d      	ldr	r2, [pc, #52]	; (80058b8 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4610      	mov	r0, r2
 8005888:	4619      	mov	r1, r3
 800588a:	f7fc fc11 	bl	80020b0 <XMC_VADC_GROUP_CheckSlaveReadiness>
  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3b01      	subs	r3, #1
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	dce9      	bgt.n	800586e <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x2e>
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
  }

  XMC_VADC_GROUP_SetSyncMaster(group_ptrs[0U]);
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 800589c:	4618      	mov	r0, r3
 800589e:	f7fc fbf1 	bl	8002084 <XMC_VADC_GROUP_SetSyncMaster>

  XMC_VADC_GROUP_SetPowerMode(group_ptrs[0U],XMC_VADC_GROUP_POWERMODE_NORMAL);
 80058a2:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 80058a4:	4618      	mov	r0, r3
 80058a6:	2103      	movs	r1, #3
 80058a8:	f7fc fbae 	bl	8002008 <XMC_VADC_GROUP_SetPowerMode>
}
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	08007f78 	.word	0x08007f78
 80058b8:	40004400 	.word	0x40004400

080058bc <ADC_MEASUREMENT_ADV_StartADC>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the arbiter of the selected request source*/
void ADC_MEASUREMENT_ADV_StartADC(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7d5b      	ldrb	r3, [r3, #21]
 80058c8:	461a      	mov	r2, r3
 80058ca:	4b04      	ldr	r3, [pc, #16]	; (80058dc <ADC_MEASUREMENT_ADV_StartADC+0x20>)
 80058cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fef1 	bl	80056b8 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>
      }
#endif
}
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	08007f78 	.word	0x08007f78

080058e0 <ADC_MEASUREMENT_ADC_lNvicEnable>:


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the NVIC(if needed) when scan/queue request source is consumed internally in the APP. */
void ADC_MEASUREMENT_ADC_lNvicEnable(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_queue_handle->rs_intr_handle.node_id);
    }
#endif
}
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop

080058f4 <ADC_MEASUREMENT_ADC_lResultInit>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Configures the result results . */
__STATIC_INLINE void ADC_MEASUREMENT_ADC_lResultInit(const ADC_MEASUREMENT_ADV_CHANNEL_t *indexed)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	7a1b      	ldrb	r3, [r3, #8]
 8005900:	461a      	mov	r2, r3
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <ADC_MEASUREMENT_ADC_lResultInit+0x34>)
 8005904:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	789b      	ldrb	r3, [r3, #2]
 800590e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005912:	b2db      	uxtb	r3, r3
 8005914:	4619      	mov	r1, r3
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
 800591a:	4610      	mov	r0, r2
 800591c:	461a      	mov	r2, r3
 800591e:	f7ff ff05 	bl	800572c <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
}
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	08007f78 	.word	0x08007f78

0800592c <ADC_MEASUREMENT_ADV_Init>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint8_t total_number_of_channels;
  ADC_MEASUREMENT_ADV_STATUS_t status;
#ifdef ADC_MEASUREMENT_ADV_SHS_GAIN_NON_DEFAULT
  uint8_t channel_number;
#endif
  bool arbitration_status = (bool)false;
 8005934:	2300      	movs	r3, #0
 8005936:	73bb      	strb	r3, [r7, #14]

  if (ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED == *handle_ptr->init_state)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d156      	bne.n	80059f0 <ADC_MEASUREMENT_ADV_Init+0xc4>
  {

    arbitration_status = ADC_MEASUREMENT_ADV_lArbitrationStatus(handle_ptr);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff ff2a 	bl	800579c <ADC_MEASUREMENT_ADV_lArbitrationStatus>
 8005948:	4603      	mov	r3, r0
 800594a:	73bb      	strb	r3, [r7, #14]

   /* Initialize the scan/queue request source.*/
   status = ADC_MEASUREMENT_ADV_lRequestSrcInit(handle_ptr);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff ff15 	bl	800577c <ADC_MEASUREMENT_ADV_lRequestSrcInit>
 8005952:	4603      	mov	r3, r0
 8005954:	737b      	strb	r3, [r7, #13]

   /* Disable the Arbitration if no other instance has enabled it*/
   ADC_MEASUREMENT_ADV_lDisableArbitration(handle_ptr,arbitration_status);
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4619      	mov	r1, r3
 800595c:	f7ff ff4a 	bl	80057f4 <ADC_MEASUREMENT_ADV_lDisableArbitration>
    {
      /*  Configure the Sync conversion operation */
      ADC_MEASUREMENT_ADV_lSyncInit(handle_ptr);
    }
#else
   ADC_MEASUREMENT_ADV_lSyncADCClocks();
 8005960:	f7ff ff6e 	bl	8005840 <ADC_MEASUREMENT_ADV_lSyncADCClocks>
#ifdef ADC_MEASUREMENT_ADV_MUX_USED
  #ifdef ADC_MEASUREMENT_ADV_MUX_NOT_ALL_USED
    if (handle_ptr->event_config != NULL)
  #endif
    {
      (handle_ptr->event_config)();
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	4798      	blx	r3
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	7ddb      	ldrb	r3, [r3, #23]
 800596e:	733b      	strb	r3, [r7, #12]
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
 8005970:	2300      	movs	r3, #0
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e01b      	b.n	80059ae <ADC_MEASUREMENT_ADV_Init+0x82>
    {
      indexed = handle_ptr->channel_array[ch_num];
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60bb      	str	r3, [r7, #8]

      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(group_ptrs[indexed->group_index],(uint32_t)indexed->ch_num, indexed->ch_handle);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	7a1b      	ldrb	r3, [r3, #8]
 8005988:	461a      	mov	r2, r3
 800598a:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <ADC_MEASUREMENT_ADV_Init+0xd4>)
 800598c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	7a5b      	ldrb	r3, [r3, #9]
 8005994:	4619      	mov	r1, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4610      	mov	r0, r2
 800599c:	461a      	mov	r2, r3
 800599e:	f7fc fc25 	bl	80021ec <XMC_VADC_GROUP_ChannelInit>
                                        channel_number);
  #endif
#endif

      /* Result Init both with and without FIFO */
      ADC_MEASUREMENT_ADC_lResultInit(indexed);
 80059a2:	68b8      	ldr	r0, [r7, #8]
 80059a4:	f7ff ffa6 	bl	80058f4 <ADC_MEASUREMENT_ADC_lResultInit>
      (handle_ptr->event_config)();
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	3301      	adds	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
 80059ae:	7bfa      	ldrb	r2, [r7, #15]
 80059b0:	7b3b      	ldrb	r3, [r7, #12]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d3df      	bcc.n	8005976 <ADC_MEASUREMENT_ADV_Init+0x4a>
#if defined(ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED) || defined(ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED)
    if( (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_SCAN == handle_ptr->req_src) ||
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE == handle_ptr->req_src))
#endif
    {
      for (ch_num = (uint8_t)0; ch_num < (uint8_t)handle_ptr->total_number_of_entries; ch_num++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]
 80059ba:	e007      	b.n	80059cc <ADC_MEASUREMENT_ADV_Init+0xa0>
      {
        ADC_MEASUREMENT_ADV_lInsertEntry(handle_ptr,ch_num);
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4619      	mov	r1, r3
 80059c2:	f7ff fec5 	bl	8005750 <ADC_MEASUREMENT_ADV_lInsertEntry>
#if defined(ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED) || defined(ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED)
    if( (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_SCAN == handle_ptr->req_src) ||
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE == handle_ptr->req_src))
#endif
    {
      for (ch_num = (uint8_t)0; ch_num < (uint8_t)handle_ptr->total_number_of_entries; ch_num++)
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	3301      	adds	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7d9b      	ldrb	r3, [r3, #22]
 80059d0:	7bfa      	ldrb	r2, [r7, #15]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d3f2      	bcc.n	80059bc <ADC_MEASUREMENT_ADV_Init+0x90>
      }
    }
#endif

    /* Enables the NVIC node if NVIC node is consumed inside the APP*/
    ADC_MEASUREMENT_ADC_lNvicEnable(handle_ptr);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff ff82 	bl	80058e0 <ADC_MEASUREMENT_ADC_lNvicEnable>

    /* Load the queue/scan entries into the hardware */
    ADC_MEASUREMENT_ADV_lInsertChannels(handle_ptr);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ff23 	bl	8005828 <ADC_MEASUREMENT_ADV_lInsertChannels>
#ifdef ADC_MEASUREMENT_ADV_START_ADC
  #ifdef ADC_MEASUREMENT_ADV_NOT_ALL_REQ_START
    if ((bool)false  != handle_ptr->start_at_initialization)
  #endif
    {
      ADC_MEASUREMENT_ADV_StartADC(handle_ptr);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff ff6a 	bl	80058bc <ADC_MEASUREMENT_ADV_StartADC>
    }
#endif

    *handle_ptr->init_state = status;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	7b7a      	ldrb	r2, [r7, #13]
 80059ee:	701a      	strb	r2, [r3, #0]
  }
  return (*handle_ptr->init_state);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	781b      	ldrb	r3, [r3, #0]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	08007f78 	.word	0x08007f78

08005a04 <ADC_U_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void ADC_U_event_config(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0

	/* Result Event Node Mux Configuration for Channel_A (Group-0 channel-0 Result_Register-15)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G0, 15U, XMC_VADC_SR_GROUP_SR0);
 8005a08:	4802      	ldr	r0, [pc, #8]	; (8005a14 <ADC_U_event_config+0x10>)
 8005a0a:	210f      	movs	r1, #15
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f7fc fc51 	bl	80022b4 <XMC_VADC_GROUP_SetResultInterruptNode>

}
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40004400 	.word	0x40004400

08005a18 <ADC_V_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void ADC_V_event_config(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0

	/* Result Event Node Mux Configuration for Channel_A (Group-1 channel-2 Result_Register-3)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G1, 3U, XMC_VADC_SR_GROUP_SR0);
 8005a1c:	4802      	ldr	r0, [pc, #8]	; (8005a28 <ADC_V_event_config+0x10>)
 8005a1e:	2103      	movs	r1, #3
 8005a20:	2200      	movs	r2, #0
 8005a22:	f7fc fc47 	bl	80022b4 <XMC_VADC_GROUP_SetResultInterruptNode>

}
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40004800 	.word	0x40004800

08005a2c <ADC_W_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void ADC_W_event_config(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0

	/* Result Event Node Mux Configuration for Channel_A (Group-2 channel-0 Result_Register-0)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G2, 0U, XMC_VADC_SR_GROUP_SR1);
 8005a30:	4802      	ldr	r0, [pc, #8]	; (8005a3c <ADC_W_event_config+0x10>)
 8005a32:	2100      	movs	r1, #0
 8005a34:	2201      	movs	r2, #1
 8005a36:	f7fc fc3d 	bl	80022b4 <XMC_VADC_GROUP_SetResultInterruptNode>

}
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40004c00 	.word	0x40004c00

08005a40 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8005a46:	2300      	movs	r3, #0
 8005a48:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8005a4a:	4841      	ldr	r0, [pc, #260]	; (8005b50 <DAVE_Init+0x110>)
 8005a4c:	f7ff fb56 	bl	80050fc <CLOCK_XMC4_Init>
 8005a50:	4603      	mov	r3, r0
 8005a52:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d104      	bne.n	8005a64 <DAVE_Init+0x24>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_enkoder */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_enkoder); 
 8005a5a:	483e      	ldr	r0, [pc, #248]	; (8005b54 <DAVE_Init+0x114>)
 8005a5c:	f7fd fd36 	bl	80034cc <SPI_MASTER_Init>
 8005a60:	4603      	mov	r3, r0
 8005a62:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <DAVE_Init+0x34>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 8005a6a:	483b      	ldr	r0, [pc, #236]	; (8005b58 <DAVE_Init+0x118>)
 8005a6c:	f7fd fb52 	bl	8003114 <SYSTIMER_Init>
 8005a70:	4603      	mov	r3, r0
 8005a72:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED); 
 8005a7a:	4838      	ldr	r0, [pc, #224]	; (8005b5c <DAVE_Init+0x11c>)
 8005a7c:	f7ff f952 	bl	8004d24 <DIGITAL_IO_Init>
 8005a80:	4603      	mov	r3, r0
 8005a82:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <DAVE_Init+0x54>
  {
	 /**  Initialization of PWM_SVM APP instance SVPWM */
	 init_status = (DAVE_STATUS_t)PWM_SVM_Init(&SVPWM); 
 8005a8a:	4835      	ldr	r0, [pc, #212]	; (8005b60 <DAVE_Init+0x120>)
 8005a8c:	f7fe fbea 	bl	8004264 <PWM_SVM_Init>
 8005a90:	4603      	mov	r3, r0
 8005a92:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <DAVE_Init+0x64>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC_U */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC_U); 
 8005a9a:	4832      	ldr	r0, [pc, #200]	; (8005b64 <DAVE_Init+0x124>)
 8005a9c:	f7ff ff46 	bl	800592c <ADC_MEASUREMENT_ADV_Init>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <DAVE_Init+0x74>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC_V */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC_V); 
 8005aaa:	482f      	ldr	r0, [pc, #188]	; (8005b68 <DAVE_Init+0x128>)
 8005aac:	f7ff ff3e 	bl	800592c <ADC_MEASUREMENT_ADV_Init>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <DAVE_Init+0x84>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC_W */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC_W); 
 8005aba:	482c      	ldr	r0, [pc, #176]	; (8005b6c <DAVE_Init+0x12c>)
 8005abc:	f7ff ff36 	bl	800592c <ADC_MEASUREMENT_ADV_Init>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d104      	bne.n	8005ad4 <DAVE_Init+0x94>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 8005aca:	4829      	ldr	r0, [pc, #164]	; (8005b70 <DAVE_Init+0x130>)
 8005acc:	f7ff f836 	bl	8004b3c <INTERRUPT_Init>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <DAVE_Init+0xa4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DC_CAL */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DC_CAL); 
 8005ada:	4826      	ldr	r0, [pc, #152]	; (8005b74 <DAVE_Init+0x134>)
 8005adc:	f7ff f922 	bl	8004d24 <DIGITAL_IO_Init>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DAC APP instance ANALOG */
	 init_status = (DAVE_STATUS_t)DAC_Init(&ANALOG); 
 8005aea:	4823      	ldr	r0, [pc, #140]	; (8005b78 <DAVE_Init+0x138>)
 8005aec:	f7ff fa58 	bl	8004fa0 <DAC_Init>
 8005af0:	4603      	mov	r3, r0
 8005af2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d104      	bne.n	8005b04 <DAVE_Init+0xc4>
  {
	 /**  Initialization of DAC APP instance ANALOG2 */
	 init_status = (DAVE_STATUS_t)DAC_Init(&ANALOG2); 
 8005afa:	4820      	ldr	r0, [pc, #128]	; (8005b7c <DAVE_Init+0x13c>)
 8005afc:	f7ff fa50 	bl	8004fa0 <DAC_Init>
 8005b00:	4603      	mov	r3, r0
 8005b02:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <DAVE_Init+0xd4>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8005b0a:	481d      	ldr	r0, [pc, #116]	; (8005b80 <DAVE_Init+0x140>)
 8005b0c:	f7fc fcd6 	bl	80024bc <UART_Init>
 8005b10:	4603      	mov	r3, r0
 8005b12:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance SIGNAL */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SIGNAL); 
 8005b1a:	481a      	ldr	r0, [pc, #104]	; (8005b84 <DAVE_Init+0x144>)
 8005b1c:	f7ff f902 	bl	8004d24 <DIGITAL_IO_Init>
 8005b20:	4603      	mov	r3, r0
 8005b22:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <DAVE_Init+0xf4>
  {
	 /**  Initialization of TIMER APP instance DELAY */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&DELAY); 
 8005b2a:	4817      	ldr	r0, [pc, #92]	; (8005b88 <DAVE_Init+0x148>)
 8005b2c:	f7fd f812 	bl	8002b54 <TIMER_Init>
 8005b30:	4603      	mov	r3, r0
 8005b32:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <DAVE_Init+0x104>
  {
	 /**  Initialization of INTERRUPT APP instance TIM_IRQ */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&TIM_IRQ); 
 8005b3a:	4814      	ldr	r0, [pc, #80]	; (8005b8c <DAVE_Init+0x14c>)
 8005b3c:	f7fe fffe 	bl	8004b3c <INTERRUPT_Init>
 8005b40:	4603      	mov	r3, r0
 8005b42:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8005b44:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000384 	.word	0x20000384
 8005b54:	20000088 	.word	0x20000088
 8005b58:	2000035c 	.word	0x2000035c
 8005b5c:	08007ed4 	.word	0x08007ed4
 8005b60:	200000a0 	.word	0x200000a0
 8005b64:	08007fb0 	.word	0x08007fb0
 8005b68:	08007ff4 	.word	0x08007ff4
 8005b6c:	08008038 	.word	0x08008038
 8005b70:	08007e64 	.word	0x08007e64
 8005b74:	08007ee8 	.word	0x08007ee8
 8005b78:	200001d8 	.word	0x200001d8
 8005b7c:	20000204 	.word	0x20000204
 8005b80:	20000000 	.word	0x20000000
 8005b84:	08007efc 	.word	0x08007efc
 8005b88:	2000000c 	.word	0x2000000c
 8005b8c:	08007e68 	.word	0x08007e68

08005b90 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	409a      	lsls	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	605a      	str	r2, [r3, #4]
}
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	605a      	str	r2, [r3, #4]
}
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop

08005bd4 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005be6:	409a      	lsls	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	605a      	str	r2, [r3, #4]
}
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop

08005bf8 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8005c0c:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 8005c0e:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop

08005c24 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	f7ff ffdf 	bl	8005bf8 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <SPI_MASTER_IsRxBusy>:
 *    return 1U;
 * }
 * @endcode<BR>
 */
__STATIC_INLINE bool SPI_MASTER_IsRxBusy(const SPI_MASTER_t* const handle)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("SPI_MASTER_IsTxBusy:handle NULL", (handle != NULL))
  return (handle->runtime->rx_busy);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	7fdb      	ldrb	r3, [r3, #31]
 8005c4e:	b2db      	uxtb	r3, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <SPI_MASTER_EnableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_EnableSlaveSelectSignal(const SPI_MASTER_t* handle, const SPI_MASTER_SS_SIGNAL_t slave)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
                                                                               (slave == SPI_MASTER_SS_SIGNAL_4) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_5) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_6) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_7))
                                                                              );
    XMC_SPI_CH_EnableSlaveSelect(handle->channel, handle->config->slave_select_pin_config[slave]->slave_select_ch);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6819      	ldr	r1, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	78fa      	ldrb	r2, [r7, #3]
 8005c72:	3214      	adds	r2, #20
 8005c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	4608      	mov	r0, r1
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	f7fb fe0d 	bl	800189c <XMC_SPI_CH_EnableSlaveSelect>
}
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <SPI_MASTER_DisableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_DisableSlaveSelectSignal(const SPI_MASTER_t* handle)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
    XMC_ASSERT("SPI_MASTER_Transmit:handle NULL" , (handle != NULL));
    XMC_SPI_CH_DisableSlaveSelect(handle->channel);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fb fe17 	bl	80018c8 <XMC_SPI_CH_DisableSlaveSelect>
}
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	7c1b      	ldrb	r3, [r3, #16]
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f7ff ff6c 	bl	8005b90 <XMC_GPIO_SetOutputHigh>
}
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop

08005cc0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7c1b      	ldrb	r3, [r3, #16]
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	f7ff ff6c 	bl	8005bb0 <XMC_GPIO_SetOutputLow>
}
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop

08005ce0 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7c1b      	ldrb	r3, [r3, #16]
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f7ff ff6e 	bl	8005bd4 <XMC_GPIO_ToggleOutput>
}
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop

08005d00 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	32c0      	adds	r2, #192	; 0xc0
 8005d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d14:	b29b      	uxth	r3, r3
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop

08005d24 <ADC_MEASUREMENT_ADV_GetResult>:
  }
}
 * @endcode
 */
__STATIC_INLINE uint16_t ADC_MEASUREMENT_ADV_GetResult(const ADC_MEASUREMENT_ADV_CHANNEL_t *const handle_ptr)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	7a1b      	ldrb	r3, [r3, #8]
 8005d30:	461a      	mov	r2, r3
 8005d32:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <ADC_MEASUREMENT_ADV_GetResult+0x38>)
 8005d34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	789b      	ldrb	r3, [r3, #2]
 8005d3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005d42:	b2db      	uxtb	r3, r3
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	f7ff ffda 	bl	8005d00 <XMC_VADC_GROUP_GetResult>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	81fb      	strh	r3, [r7, #14]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
  return(result);
 8005d50:	89fb      	ldrh	r3, [r7, #14]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08007f78 	.word	0x08007f78

08005d60 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 8005d6e:	7af8      	ldrb	r0, [r7, #11]
 8005d70:	7afb      	ldrb	r3, [r7, #11]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4413      	add	r3, r2
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	431a      	orrs	r2, r3
 8005d82:	68f9      	ldr	r1, [r7, #12]
 8005d84:	00c3      	lsls	r3, r0, #3
 8005d86:	440b      	add	r3, r1
 8005d88:	605a      	str	r2, [r3, #4]
                             mode;
}
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <DAC_Enable>:
   return 0;
 }
 * @endcode
 */
__STATIC_INLINE void DAC_Enable(const DAC_t * const HandlePtr)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
    XMC_DAC_CH_SetMode(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, HandlePtr->dac_mode);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	4608      	mov	r0, r1
 8005dac:	4611      	mov	r1, r2
 8005dae:	461a      	mov	r2, r3
 8005db0:	f7ff ffd6 	bl	8005d60 <XMC_DAC_CH_SetMode>
}
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop

08005dbc <RS_Init>:
    else if (handle->y <= handle->y_min)
        handle->y = handle->y_min;
}

void RS_Init(void)		//Communications initialization function
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
	txData[0] = 0xCC; //SOF
 8005dc0:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <RS_Init+0x28>)
 8005dc2:	22cc      	movs	r2, #204	; 0xcc
 8005dc4:	701a      	strb	r2, [r3, #0]
	txData[1] = 0xEE;
 8005dc6:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <RS_Init+0x28>)
 8005dc8:	22ee      	movs	r2, #238	; 0xee
 8005dca:	705a      	strb	r2, [r3, #1]
	txData[2] = adress;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <RS_Init+0x2c>)
 8005dce:	781a      	ldrb	r2, [r3, #0]
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <RS_Init+0x28>)
 8005dd2:	709a      	strb	r2, [r3, #2]
	txData[9] = EOF;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <RS_Init+0x28>)
 8005dd6:	22dd      	movs	r2, #221	; 0xdd
 8005dd8:	725a      	strb	r2, [r3, #9]
}
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20000418 	.word	0x20000418
 8005de8:	20000408 	.word	0x20000408

08005dec <main>:
void enkoder(void);
void interpreter_wiadomosci(void);
void delay(uint32_t);
float t = 0.0f;
int main(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0

	tData[0] = 0x3F;
 8005df2:	4b42      	ldr	r3, [pc, #264]	; (8005efc <main+0x110>)
 8005df4:	223f      	movs	r2, #63	; 0x3f
 8005df6:	701a      	strb	r2, [r3, #0]
	tData[1] = 0xFF;
 8005df8:	4b40      	ldr	r3, [pc, #256]	; (8005efc <main+0x110>)
 8005dfa:	22ff      	movs	r2, #255	; 0xff
 8005dfc:	705a      	strb	r2, [r3, #1]

	PI_Id.kP = 1;
 8005dfe:	4b40      	ldr	r3, [pc, #256]	; (8005f00 <main+0x114>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	801a      	strh	r2, [r3, #0]
	PI_Id.kI = 1;		//ki = .ki / 1000
 8005e04:	4b3e      	ldr	r3, [pc, #248]	; (8005f00 <main+0x114>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	805a      	strh	r2, [r3, #2]
	PI_Id.y_max = 20584;
 8005e0a:	4b3d      	ldr	r3, [pc, #244]	; (8005f00 <main+0x114>)
 8005e0c:	f245 0268 	movw	r2, #20584	; 0x5068
 8005e10:	605a      	str	r2, [r3, #4]
	PI_Id.y_min = -20584;
 8005e12:	4b3b      	ldr	r3, [pc, #236]	; (8005f00 <main+0x114>)
 8005e14:	4a3b      	ldr	r2, [pc, #236]	; (8005f04 <main+0x118>)
 8005e16:	609a      	str	r2, [r3, #8]
	PI_Id.buff_max = 3000;
 8005e18:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <main+0x114>)
 8005e1a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005e1e:	615a      	str	r2, [r3, #20]
	PI_Id.buff_min = -30000;
 8005e20:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <main+0x114>)
 8005e22:	4a39      	ldr	r2, [pc, #228]	; (8005f08 <main+0x11c>)
 8005e24:	619a      	str	r2, [r3, #24]

	PI_Iq.kP =	1;
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <main+0x120>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	801a      	strh	r2, [r3, #0]
	PI_Iq.kI = 1;		//ki = .ki / 1000
 8005e2c:	4b37      	ldr	r3, [pc, #220]	; (8005f0c <main+0x120>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	805a      	strh	r2, [r3, #2]
	PI_Iq.y_max = 20384;
 8005e32:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <main+0x120>)
 8005e34:	f644 72a0 	movw	r2, #20384	; 0x4fa0
 8005e38:	605a      	str	r2, [r3, #4]
	PI_Iq.y_min = -20384;
 8005e3a:	4b34      	ldr	r3, [pc, #208]	; (8005f0c <main+0x120>)
 8005e3c:	4a34      	ldr	r2, [pc, #208]	; (8005f10 <main+0x124>)
 8005e3e:	609a      	str	r2, [r3, #8]
	PI_Iq.buff_max = 30000;
 8005e40:	4b32      	ldr	r3, [pc, #200]	; (8005f0c <main+0x120>)
 8005e42:	f247 5230 	movw	r2, #30000	; 0x7530
 8005e46:	615a      	str	r2, [r3, #20]
	PI_Iq.buff_min = -30000;
 8005e48:	4b30      	ldr	r3, [pc, #192]	; (8005f0c <main+0x120>)
 8005e4a:	4a2f      	ldr	r2, [pc, #188]	; (8005f08 <main+0x11c>)
 8005e4c:	619a      	str	r2, [r3, #24]

  DAVE_STATUS_t status;
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8005e4e:	f7ff fdf7 	bl	8005a40 <DAVE_Init>
 8005e52:	4603      	mov	r3, r0
 8005e54:	72fb      	strb	r3, [r7, #11]
  status = (UART_STATUS_t)UART_Init(&UART_0);
 8005e56:	482f      	ldr	r0, [pc, #188]	; (8005f14 <main+0x128>)
 8005e58:	f7fc fb30 	bl	80024bc <UART_Init>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	72fb      	strb	r3, [r7, #11]
  uint32_t SYS1_Id = SYSTIMER_CreateTimer(120U, SYSTIMER_MODE_PERIODIC, (void*)SYS1, NULL);
 8005e60:	2078      	movs	r0, #120	; 0x78
 8005e62:	2101      	movs	r1, #1
 8005e64:	4a2c      	ldr	r2, [pc, #176]	; (8005f18 <main+0x12c>)
 8005e66:	2300      	movs	r3, #0
 8005e68:	f7fd f98c 	bl	8003184 <SYSTIMER_CreateTimer>
 8005e6c:	6078      	str	r0, [r7, #4]
  uint32_t SYS2_V = SYSTIMER_CreateTimer(1000U, SYSTIMER_MODE_PERIODIC, (void*)SYS2, NULL);
 8005e6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e72:	2101      	movs	r1, #1
 8005e74:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <main+0x130>)
 8005e76:	2300      	movs	r3, #0
 8005e78:	f7fd f984 	bl	8003184 <SYSTIMER_CreateTimer>
 8005e7c:	6038      	str	r0, [r7, #0]
  DIGITAL_IO_SetOutputHigh(&SIGNAL);
 8005e7e:	4828      	ldr	r0, [pc, #160]	; (8005f20 <main+0x134>)
 8005e80:	f7ff ff0e 	bl	8005ca0 <DIGITAL_IO_SetOutputHigh>
  for(uint32_t i =0; i < 1000000; i++);
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e002      	b.n	8005e90 <main+0xa4>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4a24      	ldr	r2, [pc, #144]	; (8005f24 <main+0x138>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d9f8      	bls.n	8005e8a <main+0x9e>
  DIGITAL_IO_SetOutputLow(&SIGNAL);
 8005e98:	4821      	ldr	r0, [pc, #132]	; (8005f20 <main+0x134>)
 8005e9a:	f7ff ff11 	bl	8005cc0 <DIGITAL_IO_SetOutputLow>
  XMC_Init();
 8005e9e:	f000 fbcb 	bl	8006638 <XMC_Init>

  //DRV setup
  SPI_MASTER_Init(&SPI_enkoder);
 8005ea2:	4821      	ldr	r0, [pc, #132]	; (8005f28 <main+0x13c>)
 8005ea4:	f7fd fb12 	bl	80034cc <SPI_MASTER_Init>
  DAC_Enable(&ANALOG);
 8005ea8:	4820      	ldr	r0, [pc, #128]	; (8005f2c <main+0x140>)
 8005eaa:	f7ff ff73 	bl	8005d94 <DAC_Enable>
  DAC_Enable(&ANALOG2);
 8005eae:	4820      	ldr	r0, [pc, #128]	; (8005f30 <main+0x144>)
 8005eb0:	f7ff ff70 	bl	8005d94 <DAC_Enable>

	PWM_SVM_Start(&SVPWM);
 8005eb4:	481f      	ldr	r0, [pc, #124]	; (8005f34 <main+0x148>)
 8005eb6:	f7fe fb27 	bl	8004508 <PWM_SVM_Start>

	PWM_SVM_SVMUpdate(&SVPWM, 0,0);
 8005eba:	481e      	ldr	r0, [pc, #120]	; (8005f34 <main+0x148>)
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f001 fa5e 	bl	8007380 <__PWM_SVM_SVMUpdate_veneer>

	DRV_START();
 8005ec4:	f000 fa78 	bl	80063b8 <DRV_START>

	XMC_SPI_CH_ConfigureShiftClockOutput(SPI_enkoder.channel, XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED, XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
 8005ec8:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <main+0x13c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	2100      	movs	r1, #0
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f7ff fea7 	bl	8005c24 <XMC_SPI_CH_ConfigureShiftClockOutput>
  	SPI_MASTER_DisableSlaveSelectSignal(&SPI_enkoder);
 8005ed6:	4814      	ldr	r0, [pc, #80]	; (8005f28 <main+0x13c>)
 8005ed8:	f7ff fed6 	bl	8005c88 <SPI_MASTER_DisableSlaveSelectSignal>
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_enkoder, SPI_MASTER_SS_SIGNAL_0);
 8005edc:	4812      	ldr	r0, [pc, #72]	; (8005f28 <main+0x13c>)
 8005ede:	2100      	movs	r1, #0
 8005ee0:	f7ff febc 	bl	8005c5c <SPI_MASTER_EnableSlaveSelectSignal>

	enkoder();															///zeby poprawnie liczyc kat absolutny kat_enkoder nie moze byc = 0 na poczatku!
 8005ee4:	f000 f8d0 	bl	8006088 <enkoder>
	kat_enkoder_poprzedni = kat_enkoder;
 8005ee8:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <main+0x14c>)
 8005eea:	881a      	ldrh	r2, [r3, #0]
 8005eec:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <main+0x150>)
 8005eee:	801a      	strh	r2, [r3, #0]
	SYSTIMER_StartTimer(SYS2_V);
 8005ef0:	6838      	ldr	r0, [r7, #0]
 8005ef2:	f7fd f9e5 	bl	80032c0 <SYSTIMER_StartTimer>

  while(1U)
  {
	  SYS1();
 8005ef6:	f000 f8f5 	bl	80060e4 <SYS1>
  }
 8005efa:	e7fc      	b.n	8005ef6 <main+0x10a>
 8005efc:	20000794 	.word	0x20000794
 8005f00:	2000074c 	.word	0x2000074c
 8005f04:	ffffaf98 	.word	0xffffaf98
 8005f08:	ffff8ad0 	.word	0xffff8ad0
 8005f0c:	2000072c 	.word	0x2000072c
 8005f10:	ffffb060 	.word	0xffffb060
 8005f14:	20000000 	.word	0x20000000
 8005f18:	080060e5 	.word	0x080060e5
 8005f1c:	08005f41 	.word	0x08005f41
 8005f20:	08007efc 	.word	0x08007efc
 8005f24:	000f423f 	.word	0x000f423f
 8005f28:	20000088 	.word	0x20000088
 8005f2c:	200001d8 	.word	0x200001d8
 8005f30:	20000204 	.word	0x20000204
 8005f34:	200000a0 	.word	0x200000a0
 8005f38:	20000442 	.word	0x20000442
 8005f3c:	20000444 	.word	0x20000444

08005f40 <SYS2>:
}
int32_t uchyb;
void SYS2(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
	uint16_t kat_enkoder_obecny = kat_enkoder;
 8005f46:	4b4b      	ldr	r3, [pc, #300]	; (8006074 <SYS2+0x134>)
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	817b      	strh	r3, [r7, #10]
	int32_t predkosc_nowa = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
	if( kat_enkoder_obecny > kat_enkoder_poprzedni)
 8005f50:	4b49      	ldr	r3, [pc, #292]	; (8006078 <SYS2+0x138>)
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	897a      	ldrh	r2, [r7, #10]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d905      	bls.n	8005f66 <SYS2+0x26>
		predkosc_nowa = kat_enkoder_obecny - kat_enkoder_poprzedni;
 8005f5a:	897b      	ldrh	r3, [r7, #10]
 8005f5c:	4a46      	ldr	r2, [pc, #280]	; (8006078 <SYS2+0x138>)
 8005f5e:	8812      	ldrh	r2, [r2, #0]
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e007      	b.n	8005f76 <SYS2+0x36>
	else
		predkosc_nowa = UINT16_MAX - kat_enkoder_poprzedni + kat_enkoder_obecny;
 8005f66:	4b44      	ldr	r3, [pc, #272]	; (8006078 <SYS2+0x138>)
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005f6e:	33ff      	adds	r3, #255	; 0xff
 8005f70:	897a      	ldrh	r2, [r7, #10]
 8005f72:	4413      	add	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

	predkosc_enkoder = predkosc_nowa;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	4b40      	ldr	r3, [pc, #256]	; (800607c <SYS2+0x13c>)
 8005f7c:	801a      	strh	r2, [r3, #0]

	if(predkosc_enkoder < 0)
 8005f7e:	4b3f      	ldr	r3, [pc, #252]	; (800607c <SYS2+0x13c>)
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b21b      	sxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da07      	bge.n	8005f98 <SYS2+0x58>
		predkosc_enkoder=-predkosc_enkoder;
 8005f88:	4b3c      	ldr	r3, [pc, #240]	; (800607c <SYS2+0x13c>)
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	425b      	negs	r3, r3
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	4b39      	ldr	r3, [pc, #228]	; (800607c <SYS2+0x13c>)
 8005f96:	801a      	strh	r2, [r3, #0]


	if(kat_enkoder_obecny == 0 || kat_enkoder_poprzedni == 0)
 8005f98:	897b      	ldrh	r3, [r7, #10]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <SYS2+0x66>
 8005f9e:	4b36      	ldr	r3, [pc, #216]	; (8006078 <SYS2+0x138>)
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <SYS2+0x6e>
	{
		kat_enkoder_poprzedni = kat_enkoder_obecny;
 8005fa6:	4a34      	ldr	r2, [pc, #208]	; (8006078 <SYS2+0x138>)
 8005fa8:	897b      	ldrh	r3, [r7, #10]
 8005faa:	8013      	strh	r3, [r2, #0]
		return;
 8005fac:	e05d      	b.n	800606a <SYS2+0x12a>
	}

	int32_t dFi =0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	607b      	str	r3, [r7, #4]
	if(kat_enkoder_obecny > kat_enkoder_poprzedni)
 8005fb2:	4b31      	ldr	r3, [pc, #196]	; (8006078 <SYS2+0x138>)
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	897a      	ldrh	r2, [r7, #10]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d929      	bls.n	8006010 <SYS2+0xd0>
	{
		dFi = kat_enkoder_obecny-kat_enkoder_poprzedni;
 8005fbc:	897b      	ldrh	r3, [r7, #10]
 8005fbe:	4a2e      	ldr	r2, [pc, #184]	; (8006078 <SYS2+0x138>)
 8005fc0:	8812      	ldrh	r2, [r2, #0]
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	607b      	str	r3, [r7, #4]
		if(dFi > 10400)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	dd13      	ble.n	8005ff8 <SYS2+0xb8>
			{
			dFi = UINT16_MAX - kat_enkoder_obecny + kat_enkoder_poprzedni;
 8005fd0:	897b      	ldrh	r3, [r7, #10]
 8005fd2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8005fd6:	33ff      	adds	r3, #255	; 0xff
 8005fd8:	4a27      	ldr	r2, [pc, #156]	; (8006078 <SYS2+0x138>)
 8005fda:	8812      	ldrh	r2, [r2, #0]
 8005fdc:	4413      	add	r3, r2
 8005fde:	607b      	str	r3, [r7, #4]
			kat_absolutny += znak * dFi;
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <SYS2+0x140>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	b25b      	sxtb	r3, r3
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	fb02 f203 	mul.w	r2, r2, r3
 8005fec:	4b25      	ldr	r3, [pc, #148]	; (8006084 <SYS2+0x144>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	4a24      	ldr	r2, [pc, #144]	; (8006084 <SYS2+0x144>)
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	e035      	b.n	8006064 <SYS2+0x124>
			}
		else
		{
			kat_absolutny -= znak * dFi;
 8005ff8:	4b22      	ldr	r3, [pc, #136]	; (8006084 <SYS2+0x144>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	4b20      	ldr	r3, [pc, #128]	; (8006080 <SYS2+0x140>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	b25b      	sxtb	r3, r3
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <SYS2+0x144>)
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e029      	b.n	8006064 <SYS2+0x124>
		}
	}
	else
	{
		dFi =kat_enkoder_poprzedni - kat_enkoder_obecny;
 8006010:	4b19      	ldr	r3, [pc, #100]	; (8006078 <SYS2+0x138>)
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	897b      	ldrh	r3, [r7, #10]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	607b      	str	r3, [r7, #4]
		if(dFi > 10400)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8006022:	4293      	cmp	r3, r2
 8006024:	dd13      	ble.n	800604e <SYS2+0x10e>
		{
			dFi = UINT16_MAX - kat_enkoder_poprzedni + kat_enkoder_obecny;
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <SYS2+0x138>)
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800602e:	33ff      	adds	r3, #255	; 0xff
 8006030:	897a      	ldrh	r2, [r7, #10]
 8006032:	4413      	add	r3, r2
 8006034:	607b      	str	r3, [r7, #4]
		kat_absolutny -=znak * dFi;
 8006036:	4b13      	ldr	r3, [pc, #76]	; (8006084 <SYS2+0x144>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <SYS2+0x140>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	b25b      	sxtb	r3, r3
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	4a0e      	ldr	r2, [pc, #56]	; (8006084 <SYS2+0x144>)
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	e00a      	b.n	8006064 <SYS2+0x124>
	}
		else
		{
			kat_absolutny += znak * dFi;
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <SYS2+0x140>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	b25b      	sxtb	r3, r3
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	fb02 f203 	mul.w	r2, r2, r3
 800605a:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <SYS2+0x144>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4413      	add	r3, r2
 8006060:	4a08      	ldr	r2, [pc, #32]	; (8006084 <SYS2+0x144>)
 8006062:	6013      	str	r3, [r2, #0]
		}
	}

	kat_enkoder_poprzedni = kat_enkoder_obecny;
 8006064:	4a04      	ldr	r2, [pc, #16]	; (8006078 <SYS2+0x138>)
 8006066:	897b      	ldrh	r3, [r7, #10]
 8006068:	8013      	strh	r3, [r2, #0]
}
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	20000442 	.word	0x20000442
 8006078:	20000444 	.word	0x20000444
 800607c:	20000790 	.word	0x20000790
 8006080:	2000040a 	.word	0x2000040a
 8006084:	20000448 	.word	0x20000448

08006088 <enkoder>:
void enkoder(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
	SPI_MASTER_Transfer(&SPI_enkoder, tData, rData,  2);
 800608e:	4811      	ldr	r0, [pc, #68]	; (80060d4 <enkoder+0x4c>)
 8006090:	4911      	ldr	r1, [pc, #68]	; (80060d8 <enkoder+0x50>)
 8006092:	4a12      	ldr	r2, [pc, #72]	; (80060dc <enkoder+0x54>)
 8006094:	2302      	movs	r3, #2
 8006096:	f7fd fb51 	bl	800373c <SPI_MASTER_Transfer>
	while(SPI_MASTER_IsRxBusy(&SPI_enkoder));
 800609a:	bf00      	nop
 800609c:	480d      	ldr	r0, [pc, #52]	; (80060d4 <enkoder+0x4c>)
 800609e:	f7ff fdcf 	bl	8005c40 <SPI_MASTER_IsRxBusy>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1f9      	bne.n	800609c <enkoder+0x14>
	uint16_t result = rData[0]<<8 | rData[1];
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <enkoder+0x54>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <enkoder+0x54>)
 80060b2:	785b      	ldrb	r3, [r3, #1]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	4313      	orrs	r3, r2
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	80fb      	strh	r3, [r7, #6]
	result &= 0x3FFF;			//Usuwanie bitu parzystkosci i bitu R/W
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80060c2:	80fb      	strh	r3, [r7, #6]

	kat_enkoder =result * 4;		//0 - 65535 = 0 - 2PI
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <enkoder+0x58>)
 80060cc:	801a      	strh	r2, [r3, #0]

}
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000088 	.word	0x20000088
 80060d8:	20000794 	.word	0x20000794
 80060dc:	20000768 	.word	0x20000768
 80060e0:	20000442 	.word	0x20000442

080060e4 <SYS1>:
void SYS1(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&SIGNAL);
 80060ea:	4898      	ldr	r0, [pc, #608]	; (800634c <SYS1+0x268>)
 80060ec:	f7ff fdd8 	bl	8005ca0 <DIGITAL_IO_SetOutputHigh>
	enkoder();
 80060f0:	f7ff ffca 	bl	8006088 <enkoder>
	int32_t kat_elektryczny_temp = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
	kat_elektryczny_temp = ((uint32_t)(kat_enkoder * liczba_par_biegunow));
 80060f8:	4b95      	ldr	r3, [pc, #596]	; (8006350 <SYS1+0x26c>)
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	4b95      	ldr	r3, [pc, #596]	; (8006354 <SYS1+0x270>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	fb03 f302 	mul.w	r3, r3, r2
 8006106:	61fb      	str	r3, [r7, #28]
	kat_elektryczny_temp = kat_elektryczny_temp % UINT16_MAX ;
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	4b93      	ldr	r3, [pc, #588]	; (8006358 <SYS1+0x274>)
 800610c:	fb82 0103 	smull	r0, r1, r2, r3
 8006110:	1853      	adds	r3, r2, r1
 8006112:	13d9      	asrs	r1, r3, #15
 8006114:	17d3      	asrs	r3, r2, #31
 8006116:	1ac9      	subs	r1, r1, r3
 8006118:	460b      	mov	r3, r1
 800611a:	041b      	lsls	r3, r3, #16
 800611c:	1a5b      	subs	r3, r3, r1
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	61fb      	str	r3, [r7, #28]
	kat_elektryczny_temp = kat_elektryczny_temp - INT16_MAX;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8006128:	3b7f      	subs	r3, #127	; 0x7f
 800612a:	61fb      	str	r3, [r7, #28]
	kat_elektryczny = kat_elektryczny_temp + offset_elektryczny;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	b29a      	uxth	r2, r3
 8006130:	4b8a      	ldr	r3, [pc, #552]	; (800635c <SYS1+0x278>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	4413      	add	r3, r2
 8006138:	b29b      	uxth	r3, r3
 800613a:	b29a      	uxth	r2, r3
 800613c:	4b88      	ldr	r3, [pc, #544]	; (8006360 <SYS1+0x27c>)
 800613e:	801a      	strh	r2, [r3, #0]

	LiczeniePradu();
 8006140:	f000 f9e8 	bl	8006514 <LiczeniePradu>
	Iq_poprzednie = -Iq_poprzednie;
*/

	//ZADAWANIE MOMENTU

	uchyb = poz_zad - kat_absolutny;
 8006144:	4b87      	ldr	r3, [pc, #540]	; (8006364 <SYS1+0x280>)
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	4b87      	ldr	r3, [pc, #540]	; (8006368 <SYS1+0x284>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	4a86      	ldr	r2, [pc, #536]	; (800636c <SYS1+0x288>)
 8006152:	6013      	str	r3, [r2, #0]
	int32_t sila = (ks * uchyb)/1000 - ((kd * predkosc_enkoder)/1000);
 8006154:	4b86      	ldr	r3, [pc, #536]	; (8006370 <SYS1+0x28c>)
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	4b84      	ldr	r3, [pc, #528]	; (800636c <SYS1+0x288>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	fb03 f302 	mul.w	r3, r3, r2
 8006162:	4a84      	ldr	r2, [pc, #528]	; (8006374 <SYS1+0x290>)
 8006164:	fb82 1203 	smull	r1, r2, r2, r3
 8006168:	1192      	asrs	r2, r2, #6
 800616a:	17db      	asrs	r3, r3, #31
 800616c:	1ad2      	subs	r2, r2, r3
 800616e:	4b82      	ldr	r3, [pc, #520]	; (8006378 <SYS1+0x294>)
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	4b81      	ldr	r3, [pc, #516]	; (800637c <SYS1+0x298>)
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b21b      	sxth	r3, r3
 800617a:	fb03 f301 	mul.w	r3, r3, r1
 800617e:	497d      	ldr	r1, [pc, #500]	; (8006374 <SYS1+0x290>)
 8006180:	fb81 0103 	smull	r0, r1, r1, r3
 8006184:	1189      	asrs	r1, r1, #6
 8006186:	17db      	asrs	r3, r3, #31
 8006188:	1acb      	subs	r3, r1, r3
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	61bb      	str	r3, [r7, #24]
	if(sila > 0)
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	dd0a      	ble.n	80061aa <SYS1+0xc6>
	{
		Vq_zadane = 30000;
 8006194:	4b7a      	ldr	r3, [pc, #488]	; (8006380 <SYS1+0x29c>)
 8006196:	f247 5230 	movw	r2, #30000	; 0x7530
 800619a:	601a      	str	r2, [r3, #0]
		Vd_zadane  = 0;
 800619c:	4b79      	ldr	r3, [pc, #484]	; (8006384 <SYS1+0x2a0>)
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
		V_ref = sila;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	4a78      	ldr	r2, [pc, #480]	; (8006388 <SYS1+0x2a4>)
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e00a      	b.n	80061c0 <SYS1+0xdc>
	}
	else
	{
		Vq_zadane = -30000;
 80061aa:	4b75      	ldr	r3, [pc, #468]	; (8006380 <SYS1+0x29c>)
 80061ac:	4a77      	ldr	r2, [pc, #476]	; (800638c <SYS1+0x2a8>)
 80061ae:	601a      	str	r2, [r3, #0]
		Vd_zadane = 0;
 80061b0:	4b74      	ldr	r3, [pc, #464]	; (8006384 <SYS1+0x2a0>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
		V_ref = -sila;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	425b      	negs	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	4b72      	ldr	r3, [pc, #456]	; (8006388 <SYS1+0x2a4>)
 80061be:	601a      	str	r2, [r3, #0]
	}
	if(V_ref > 4200)
 80061c0:	4b71      	ldr	r3, [pc, #452]	; (8006388 <SYS1+0x2a4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f241 0268 	movw	r2, #4200	; 0x1068
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d903      	bls.n	80061d4 <SYS1+0xf0>
		V_ref = 4200;
 80061cc:	4b6e      	ldr	r3, [pc, #440]	; (8006388 <SYS1+0x2a4>)
 80061ce:	f241 0268 	movw	r2, #4200	; 0x1068
 80061d2:	601a      	str	r2, [r3, #0]

	if(kat_absolutny > 40000)
 80061d4:	4b64      	ldr	r3, [pc, #400]	; (8006368 <SYS1+0x284>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80061dc:	4293      	cmp	r3, r2
 80061de:	dd07      	ble.n	80061f0 <SYS1+0x10c>
		{ V_ref = 4000; Vq_zadane = -30000; }
 80061e0:	4b69      	ldr	r3, [pc, #420]	; (8006388 <SYS1+0x2a4>)
 80061e2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	4b65      	ldr	r3, [pc, #404]	; (8006380 <SYS1+0x29c>)
 80061ea:	4a68      	ldr	r2, [pc, #416]	; (800638c <SYS1+0x2a8>)
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e00c      	b.n	800620a <SYS1+0x126>
	else if ( kat_absolutny < -2000)
 80061f0:	4b5d      	ldr	r3, [pc, #372]	; (8006368 <SYS1+0x284>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80061f8:	da07      	bge.n	800620a <SYS1+0x126>
		{ V_ref = 4000; Vq_zadane = 30000; }
 80061fa:	4b63      	ldr	r3, [pc, #396]	; (8006388 <SYS1+0x2a4>)
 80061fc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	4b5f      	ldr	r3, [pc, #380]	; (8006380 <SYS1+0x29c>)
 8006204:	f247 5230 	movw	r2, #30000	; 0x7530
 8006208:	601a      	str	r2, [r3, #0]
	PI_REG(&PI_Id,uchyb_Id);
	PI_REG(&PI_Iq,uchyb_Iq);
	Vd_zadane = PI_Id.y;
	Vq_zadane = PI_Iq.y;
*/
  	V_alfa = MOTOR_LIB_IParkTransform(Vd_zadane, Vq_zadane, kat_elektryczny, &V_beta);
 800620a:	4b5e      	ldr	r3, [pc, #376]	; (8006384 <SYS1+0x2a0>)
 800620c:	6819      	ldr	r1, [r3, #0]
 800620e:	4b5c      	ldr	r3, [pc, #368]	; (8006380 <SYS1+0x29c>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4b53      	ldr	r3, [pc, #332]	; (8006360 <SYS1+0x27c>)
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b21b      	sxth	r3, r3
 8006218:	4608      	mov	r0, r1
 800621a:	4611      	mov	r1, r2
 800621c:	461a      	mov	r2, r3
 800621e:	4b5c      	ldr	r3, [pc, #368]	; (8006390 <SYS1+0x2ac>)
 8006220:	f7fe fb62 	bl	80048e8 <MOTOR_LIB_IParkTransform>
 8006224:	4602      	mov	r2, r0
 8006226:	4b5b      	ldr	r3, [pc, #364]	; (8006394 <SYS1+0x2b0>)
 8006228:	601a      	str	r2, [r3, #0]

  	uint32_t placeholder = MOTOR_LIB_Car2Pol(V_alfa, V_beta, &angle);
 800622a:	4b5a      	ldr	r3, [pc, #360]	; (8006394 <SYS1+0x2b0>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b58      	ldr	r3, [pc, #352]	; (8006390 <SYS1+0x2ac>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4610      	mov	r0, r2
 8006234:	4619      	mov	r1, r3
 8006236:	4a58      	ldr	r2, [pc, #352]	; (8006398 <SYS1+0x2b4>)
 8006238:	f7fe fac4 	bl	80047c4 <MOTOR_LIB_Car2Pol>
 800623c:	6178      	str	r0, [r7, #20]

  	angle32 =((int32_t)angle+INT16_MAX) *256;
 800623e:	4b56      	ldr	r3, [pc, #344]	; (8006398 <SYS1+0x2b4>)
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b21b      	sxth	r3, r3
 8006244:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8006248:	337f      	adds	r3, #127	; 0x7f
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	461a      	mov	r2, r3
 800624e:	4b53      	ldr	r3, [pc, #332]	; (800639c <SYS1+0x2b8>)
 8006250:	601a      	str	r2, [r3, #0]

  	PWM_SVM_SVMUpdate(&SVPWM, V_ref, angle32);
 8006252:	4b4d      	ldr	r3, [pc, #308]	; (8006388 <SYS1+0x2a4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	b29a      	uxth	r2, r3
 8006258:	4b50      	ldr	r3, [pc, #320]	; (800639c <SYS1+0x2b8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4850      	ldr	r0, [pc, #320]	; (80063a0 <SYS1+0x2bc>)
 800625e:	4611      	mov	r1, r2
 8006260:	461a      	mov	r2, r3
 8006262:	f001 f88d 	bl	8007380 <__PWM_SVM_SVMUpdate_veneer>

  	int32_t Ix = ((iw - iv) * 56775) / UINT16_MAX;
 8006266:	4b4f      	ldr	r3, [pc, #316]	; (80063a4 <SYS1+0x2c0>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4b4f      	ldr	r3, [pc, #316]	; (80063a8 <SYS1+0x2c4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	f64d 52c7 	movw	r2, #56775	; 0xddc7
 8006274:	fb02 f303 	mul.w	r3, r2, r3
 8006278:	4a37      	ldr	r2, [pc, #220]	; (8006358 <SYS1+0x274>)
 800627a:	fb82 1203 	smull	r1, r2, r2, r3
 800627e:	441a      	add	r2, r3
 8006280:	13d2      	asrs	r2, r2, #15
 8006282:	17db      	asrs	r3, r3, #31
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	613b      	str	r3, [r7, #16]
  	int32_t Iy = iu - ((iv+iw)/2);
 8006288:	4b48      	ldr	r3, [pc, #288]	; (80063ac <SYS1+0x2c8>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	4b46      	ldr	r3, [pc, #280]	; (80063a8 <SYS1+0x2c4>)
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	4b44      	ldr	r3, [pc, #272]	; (80063a4 <SYS1+0x2c0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	440b      	add	r3, r1
 8006296:	0fd9      	lsrs	r1, r3, #31
 8006298:	440b      	add	r3, r1
 800629a:	105b      	asrs	r3, r3, #1
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	60fb      	str	r3, [r7, #12]
  	Iy *= Iy;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	fb02 f303 	mul.w	r3, r2, r3
 80062a8:	60fb      	str	r3, [r7, #12]
  	Iy += Ix*Ix;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  	I_net = sqrtf(Iy);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062c2:	ee17 0a90 	vmov	r0, s15
 80062c6:	f000 fb37 	bl	8006938 <sqrtf>
 80062ca:	ee07 0a90 	vmov	s15, r0
 80062ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80062d6:	88bb      	ldrh	r3, [r7, #4]
 80062d8:	b29a      	uxth	r2, r3
 80062da:	4b35      	ldr	r3, [pc, #212]	; (80063b0 <SYS1+0x2cc>)
 80062dc:	801a      	strh	r2, [r3, #0]
  	if(Vq_zadane < 0)
 80062de:	4b28      	ldr	r3, [pc, #160]	; (8006380 <SYS1+0x29c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da07      	bge.n	80062f6 <SYS1+0x212>
  		I_net = -I_net;
 80062e6:	4b32      	ldr	r3, [pc, #200]	; (80063b0 <SYS1+0x2cc>)
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	425b      	negs	r3, r3
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	4b2f      	ldr	r3, [pc, #188]	; (80063b0 <SYS1+0x2cc>)
 80062f4:	801a      	strh	r2, [r3, #0]

	txData[3] = I_net >> 8;
 80062f6:	4b2e      	ldr	r3, [pc, #184]	; (80063b0 <SYS1+0x2cc>)
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	b21b      	sxth	r3, r3
 80062fc:	121b      	asrs	r3, r3, #8
 80062fe:	b29b      	uxth	r3, r3
 8006300:	b2da      	uxtb	r2, r3
 8006302:	4b2c      	ldr	r3, [pc, #176]	; (80063b4 <SYS1+0x2d0>)
 8006304:	70da      	strb	r2, [r3, #3]
	txData[4] = I_net;
 8006306:	4b2a      	ldr	r3, [pc, #168]	; (80063b0 <SYS1+0x2cc>)
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <SYS1+0x2d0>)
 800630e:	711a      	strb	r2, [r3, #4]
	txData[5] = kat_absolutny >> 24;
 8006310:	4b15      	ldr	r3, [pc, #84]	; (8006368 <SYS1+0x284>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	161b      	asrs	r3, r3, #24
 8006316:	b2da      	uxtb	r2, r3
 8006318:	4b26      	ldr	r3, [pc, #152]	; (80063b4 <SYS1+0x2d0>)
 800631a:	715a      	strb	r2, [r3, #5]
	txData[6] = kat_absolutny >> 16;
 800631c:	4b12      	ldr	r3, [pc, #72]	; (8006368 <SYS1+0x284>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	141b      	asrs	r3, r3, #16
 8006322:	b2da      	uxtb	r2, r3
 8006324:	4b23      	ldr	r3, [pc, #140]	; (80063b4 <SYS1+0x2d0>)
 8006326:	719a      	strb	r2, [r3, #6]
	txData[7] = kat_absolutny >> 8;
 8006328:	4b0f      	ldr	r3, [pc, #60]	; (8006368 <SYS1+0x284>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	121b      	asrs	r3, r3, #8
 800632e:	b2da      	uxtb	r2, r3
 8006330:	4b20      	ldr	r3, [pc, #128]	; (80063b4 <SYS1+0x2d0>)
 8006332:	71da      	strb	r2, [r3, #7]
	txData[8] = kat_absolutny;
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <SYS1+0x284>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	4b1e      	ldr	r3, [pc, #120]	; (80063b4 <SYS1+0x2d0>)
 800633c:	721a      	strb	r2, [r3, #8]

	DIGITAL_IO_SetOutputLow(&SIGNAL);
 800633e:	4803      	ldr	r0, [pc, #12]	; (800634c <SYS1+0x268>)
 8006340:	f7ff fcbe 	bl	8005cc0 <DIGITAL_IO_SetOutputLow>
}
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	08007efc 	.word	0x08007efc
 8006350:	20000442 	.word	0x20000442
 8006354:	200002be 	.word	0x200002be
 8006358:	80008001 	.word	0x80008001
 800635c:	2000044c 	.word	0x2000044c
 8006360:	20000446 	.word	0x20000446
 8006364:	200002b8 	.word	0x200002b8
 8006368:	20000448 	.word	0x20000448
 800636c:	2000079c 	.word	0x2000079c
 8006370:	200002ba 	.word	0x200002ba
 8006374:	10624dd3 	.word	0x10624dd3
 8006378:	200002bc 	.word	0x200002bc
 800637c:	20000790 	.word	0x20000790
 8006380:	20000428 	.word	0x20000428
 8006384:	2000042c 	.word	0x2000042c
 8006388:	20000438 	.word	0x20000438
 800638c:	ffff8ad0 	.word	0xffff8ad0
 8006390:	20000434 	.word	0x20000434
 8006394:	20000430 	.word	0x20000430
 8006398:	20000450 	.word	0x20000450
 800639c:	2000043c 	.word	0x2000043c
 80063a0:	200000a0 	.word	0x200000a0
 80063a4:	20000464 	.word	0x20000464
 80063a8:	2000045c 	.word	0x2000045c
 80063ac:	20000454 	.word	0x20000454
 80063b0:	20000440 	.word	0x20000440
 80063b4:	20000418 	.word	0x20000418

080063b8 <DRV_START>:
void DRV_START(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af00      	add	r7, sp, #0
	PWM_SVM_InverterEnable(&SVPWM);
 80063be:	484d      	ldr	r0, [pc, #308]	; (80064f4 <DRV_START+0x13c>)
 80063c0:	f7fd fe7e 	bl	80040c0 <PWM_SVM_InverterEnable>

	for(uint16_t j=0; j < 65000; j++);
 80063c4:	2300      	movs	r3, #0
 80063c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063c8:	e002      	b.n	80063d0 <DRV_START+0x18>
 80063ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063cc:	3301      	adds	r3, #1
 80063ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063d2:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d9f7      	bls.n	80063ca <DRV_START+0x12>

	//kalibracja offsetów
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_enkoder);
 80063da:	4847      	ldr	r0, [pc, #284]	; (80064f8 <DRV_START+0x140>)
 80063dc:	f7ff fc54 	bl	8005c88 <SPI_MASTER_DisableSlaveSelectSignal>
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_enkoder, SPI_MASTER_SS_SIGNAL_1);
 80063e0:	4845      	ldr	r0, [pc, #276]	; (80064f8 <DRV_START+0x140>)
 80063e2:	2101      	movs	r1, #1
 80063e4:	f7ff fc3a 	bl	8005c5c <SPI_MASTER_EnableSlaveSelectSignal>

	uint8_t zero [2]= {0};
 80063e8:	2300      	movs	r3, #0
 80063ea:	82bb      	strh	r3, [r7, #20]
	uint8_t rec[10] = {0};
 80063ec:	f107 0308 	add.w	r3, r7, #8
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	3304      	adds	r3, #4
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	3304      	adds	r3, #4
 80063fc:	2200      	movs	r2, #0
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	3302      	adds	r3, #2
	uint8_t sendData[2];
	sendData[0] = 0b00011000;
 8006402:	2318      	movs	r3, #24
 8006404:	713b      	strb	r3, [r7, #4]
	sendData[1] = 0b00000000;	// <ustawienie wzmocnienia na 10
 8006406:	2300      	movs	r3, #0
 8006408:	717b      	strb	r3, [r7, #5]
	for(int i = 0; i < 5; i++)
 800640a:	2300      	movs	r3, #0
 800640c:	623b      	str	r3, [r7, #32]
 800640e:	e008      	b.n	8006422 <DRV_START+0x6a>
	{
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);		//Opamp Gain
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	4839      	ldr	r0, [pc, #228]	; (80064f8 <DRV_START+0x140>)
 8006414:	4619      	mov	r1, r3
 8006416:	2202      	movs	r2, #2
 8006418:	f7fd f868 	bl	80034ec <SPI_MASTER_Transmit>
	uint8_t zero [2]= {0};
	uint8_t rec[10] = {0};
	uint8_t sendData[2];
	sendData[0] = 0b00011000;
	sendData[1] = 0b00000000;	// <ustawienie wzmocnienia na 10
	for(int i = 0; i < 5; i++)
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	3301      	adds	r3, #1
 8006420:	623b      	str	r3, [r7, #32]
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	2b04      	cmp	r3, #4
 8006426:	ddf3      	ble.n	8006410 <DRV_START+0x58>
	{
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);		//Opamp Gain
	}
	sendData[0] = 0b10011000;
 8006428:	2398      	movs	r3, #152	; 0x98
 800642a:	713b      	strb	r3, [r7, #4]
	sendData[1] = 0b00000000;
 800642c:	2300      	movs	r3, #0
 800642e:	717b      	strb	r3, [r7, #5]
	for(int i = 0; i < 5; i++)
 8006430:	2300      	movs	r3, #0
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	e012      	b.n	800645c <DRV_START+0xa4>
	{
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	482f      	ldr	r0, [pc, #188]	; (80064f8 <DRV_START+0x140>)
 800643a:	4619      	mov	r1, r3
 800643c:	2202      	movs	r2, #2
 800643e:	f7fd f855 	bl	80034ec <SPI_MASTER_Transmit>
		SPI_MASTER_Transfer(&SPI_enkoder, zero, rec, 2);
 8006442:	f107 0214 	add.w	r2, r7, #20
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	482b      	ldr	r0, [pc, #172]	; (80064f8 <DRV_START+0x140>)
 800644c:	4611      	mov	r1, r2
 800644e:	461a      	mov	r2, r3
 8006450:	2302      	movs	r3, #2
 8006452:	f7fd f973 	bl	800373c <SPI_MASTER_Transfer>
	{
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);		//Opamp Gain
	}
	sendData[0] = 0b10011000;
	sendData[1] = 0b00000000;
	for(int i = 0; i < 5; i++)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	3301      	adds	r3, #1
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	2b04      	cmp	r3, #4
 8006460:	dde9      	ble.n	8006436 <DRV_START+0x7e>
	{
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);
		SPI_MASTER_Transfer(&SPI_enkoder, zero, rec, 2);
	}
	DIGITAL_IO_SetOutputHigh(&DC_CAL);
 8006462:	4826      	ldr	r0, [pc, #152]	; (80064fc <DRV_START+0x144>)
 8006464:	f7ff fc1c 	bl	8005ca0 <DIGITAL_IO_SetOutputHigh>
	uint16_t iloscProbek = 50;
 8006468:	2332      	movs	r3, #50	; 0x32
 800646a:	82fb      	strh	r3, [r7, #22]
	for( uint16_t i = 0; i < iloscProbek; i++)
 800646c:	2300      	movs	r3, #0
 800646e:	837b      	strh	r3, [r7, #26]
 8006470:	e020      	b.n	80064b4 <DRV_START+0xfc>
	{
		iuOffset += ADC_MEASUREMENT_ADV_GetResult(&ADC_U_Channel_A_handle);
 8006472:	4823      	ldr	r0, [pc, #140]	; (8006500 <DRV_START+0x148>)
 8006474:	f7ff fc56 	bl	8005d24 <ADC_MEASUREMENT_ADV_GetResult>
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	4b21      	ldr	r3, [pc, #132]	; (8006504 <DRV_START+0x14c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4413      	add	r3, r2
 8006482:	4a20      	ldr	r2, [pc, #128]	; (8006504 <DRV_START+0x14c>)
 8006484:	6013      	str	r3, [r2, #0]
		ivOffset += ADC_MEASUREMENT_ADV_GetResult(&ADC_V_Channel_A_handle);
 8006486:	4820      	ldr	r0, [pc, #128]	; (8006508 <DRV_START+0x150>)
 8006488:	f7ff fc4c 	bl	8005d24 <ADC_MEASUREMENT_ADV_GetResult>
 800648c:	4603      	mov	r3, r0
 800648e:	461a      	mov	r2, r3
 8006490:	4b1e      	ldr	r3, [pc, #120]	; (800650c <DRV_START+0x154>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4413      	add	r3, r2
 8006496:	4a1d      	ldr	r2, [pc, #116]	; (800650c <DRV_START+0x154>)
 8006498:	6013      	str	r3, [r2, #0]
		for(uint16_t j = 0; j < 1000; j++);	//delay
 800649a:	2300      	movs	r3, #0
 800649c:	833b      	strh	r3, [r7, #24]
 800649e:	e002      	b.n	80064a6 <DRV_START+0xee>
 80064a0:	8b3b      	ldrh	r3, [r7, #24]
 80064a2:	3301      	adds	r3, #1
 80064a4:	833b      	strh	r3, [r7, #24]
 80064a6:	8b3b      	ldrh	r3, [r7, #24]
 80064a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ac:	d3f8      	bcc.n	80064a0 <DRV_START+0xe8>
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);
		SPI_MASTER_Transfer(&SPI_enkoder, zero, rec, 2);
	}
	DIGITAL_IO_SetOutputHigh(&DC_CAL);
	uint16_t iloscProbek = 50;
	for( uint16_t i = 0; i < iloscProbek; i++)
 80064ae:	8b7b      	ldrh	r3, [r7, #26]
 80064b0:	3301      	adds	r3, #1
 80064b2:	837b      	strh	r3, [r7, #26]
 80064b4:	8b7a      	ldrh	r2, [r7, #26]
 80064b6:	8afb      	ldrh	r3, [r7, #22]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d3da      	bcc.n	8006472 <DRV_START+0xba>
	{
		iuOffset += ADC_MEASUREMENT_ADV_GetResult(&ADC_U_Channel_A_handle);
		ivOffset += ADC_MEASUREMENT_ADV_GetResult(&ADC_V_Channel_A_handle);
		for(uint16_t j = 0; j < 1000; j++);	//delay
	}
	iuOffset /= iloscProbek;
 80064bc:	4b11      	ldr	r3, [pc, #68]	; (8006504 <DRV_START+0x14c>)
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	8afb      	ldrh	r3, [r7, #22]
 80064c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80064c6:	4a0f      	ldr	r2, [pc, #60]	; (8006504 <DRV_START+0x14c>)
 80064c8:	6013      	str	r3, [r2, #0]
	ivOffset /= iloscProbek;
 80064ca:	4b10      	ldr	r3, [pc, #64]	; (800650c <DRV_START+0x154>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	8afb      	ldrh	r3, [r7, #22]
 80064d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80064d4:	4a0d      	ldr	r2, [pc, #52]	; (800650c <DRV_START+0x154>)
 80064d6:	6013      	str	r3, [r2, #0]
	iwOffset /= iloscProbek;
 80064d8:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <DRV_START+0x158>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	8afb      	ldrh	r3, [r7, #22]
 80064de:	fb92 f3f3 	sdiv	r3, r2, r3
 80064e2:	4a0b      	ldr	r2, [pc, #44]	; (8006510 <DRV_START+0x158>)
 80064e4:	6013      	str	r3, [r2, #0]

	DIGITAL_IO_SetOutputLow(&DC_CAL);
 80064e6:	4805      	ldr	r0, [pc, #20]	; (80064fc <DRV_START+0x144>)
 80064e8:	f7ff fbea 	bl	8005cc0 <DIGITAL_IO_SetOutputLow>
}
 80064ec:	3728      	adds	r7, #40	; 0x28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	200000a0 	.word	0x200000a0
 80064f8:	20000088 	.word	0x20000088
 80064fc:	08007ee8 	.word	0x08007ee8
 8006500:	08007f98 	.word	0x08007f98
 8006504:	20000458 	.word	0x20000458
 8006508:	08007fdc 	.word	0x08007fdc
 800650c:	20000460 	.word	0x20000460
 8006510:	20000468 	.word	0x20000468

08006514 <LiczeniePradu>:
void LiczeniePradu(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
	i[0] = ADC_MEASUREMENT_ADV_GetResult(&ADC_U_Channel_A_handle);
 8006518:	483a      	ldr	r0, [pc, #232]	; (8006604 <LiczeniePradu+0xf0>)
 800651a:	f7ff fc03 	bl	8005d24 <ADC_MEASUREMENT_ADV_GetResult>
 800651e:	4603      	mov	r3, r0
 8006520:	461a      	mov	r2, r3
 8006522:	4b39      	ldr	r3, [pc, #228]	; (8006608 <LiczeniePradu+0xf4>)
 8006524:	601a      	str	r2, [r3, #0]
	i[1] = ADC_MEASUREMENT_ADV_GetResult(&ADC_V_Channel_A_handle);
 8006526:	4839      	ldr	r0, [pc, #228]	; (800660c <LiczeniePradu+0xf8>)
 8006528:	f7ff fbfc 	bl	8005d24 <ADC_MEASUREMENT_ADV_GetResult>
 800652c:	4603      	mov	r3, r0
 800652e:	461a      	mov	r2, r3
 8006530:	4b35      	ldr	r3, [pc, #212]	; (8006608 <LiczeniePradu+0xf4>)
 8006532:	605a      	str	r2, [r3, #4]

	i[1] = i[1] - ivOffset;
 8006534:	4b34      	ldr	r3, [pc, #208]	; (8006608 <LiczeniePradu+0xf4>)
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	4b35      	ldr	r3, [pc, #212]	; (8006610 <LiczeniePradu+0xfc>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	4a32      	ldr	r2, [pc, #200]	; (8006608 <LiczeniePradu+0xf4>)
 8006540:	6053      	str	r3, [r2, #4]
	i[1] = (i[1] * v3v) / 4095; // w tym miejscu sa miliwolty
 8006542:	4b31      	ldr	r3, [pc, #196]	; (8006608 <LiczeniePradu+0xf4>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	4a33      	ldr	r2, [pc, #204]	; (8006614 <LiczeniePradu+0x100>)
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	fb02 f303 	mul.w	r3, r2, r3
 800654e:	4a32      	ldr	r2, [pc, #200]	; (8006618 <LiczeniePradu+0x104>)
 8006550:	fb82 1203 	smull	r1, r2, r2, r3
 8006554:	441a      	add	r2, r3
 8006556:	12d2      	asrs	r2, r2, #11
 8006558:	17db      	asrs	r3, r3, #31
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	4a2a      	ldr	r2, [pc, #168]	; (8006608 <LiczeniePradu+0xf4>)
 800655e:	6053      	str	r3, [r2, #4]
	i[1] *= 10;
 8006560:	4b29      	ldr	r3, [pc, #164]	; (8006608 <LiczeniePradu+0xf4>)
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	461a      	mov	r2, r3
 800656e:	4b26      	ldr	r3, [pc, #152]	; (8006608 <LiczeniePradu+0xf4>)
 8006570:	605a      	str	r2, [r3, #4]

	i[0] = i[0] - iuOffset;
 8006572:	4b25      	ldr	r3, [pc, #148]	; (8006608 <LiczeniePradu+0xf4>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b29      	ldr	r3, [pc, #164]	; (800661c <LiczeniePradu+0x108>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	4a22      	ldr	r2, [pc, #136]	; (8006608 <LiczeniePradu+0xf4>)
 800657e:	6013      	str	r3, [r2, #0]
	i[0] = (i[0] * v3v) / 4095;
 8006580:	4b21      	ldr	r3, [pc, #132]	; (8006608 <LiczeniePradu+0xf4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a23      	ldr	r2, [pc, #140]	; (8006614 <LiczeniePradu+0x100>)
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	fb02 f303 	mul.w	r3, r2, r3
 800658c:	4a22      	ldr	r2, [pc, #136]	; (8006618 <LiczeniePradu+0x104>)
 800658e:	fb82 1203 	smull	r1, r2, r2, r3
 8006592:	441a      	add	r2, r3
 8006594:	12d2      	asrs	r2, r2, #11
 8006596:	17db      	asrs	r3, r3, #31
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	4a1b      	ldr	r2, [pc, #108]	; (8006608 <LiczeniePradu+0xf4>)
 800659c:	6013      	str	r3, [r2, #0]
	i[0] *= 10;
 800659e:	4b1a      	ldr	r3, [pc, #104]	; (8006608 <LiczeniePradu+0xf4>)
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b16      	ldr	r3, [pc, #88]	; (8006608 <LiczeniePradu+0xf4>)
 80065ae:	601a      	str	r2, [r3, #0]

	iu = (iu * 6) + (i[0]* 2);
 80065b0:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <LiczeniePradu+0x10c>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	441a      	add	r2, r3
 80065ba:	4b13      	ldr	r3, [pc, #76]	; (8006608 <LiczeniePradu+0xf4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4413      	add	r3, r2
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	4a17      	ldr	r2, [pc, #92]	; (8006620 <LiczeniePradu+0x10c>)
 80065c4:	6013      	str	r3, [r2, #0]
	iu = iu >> 3;
 80065c6:	4b16      	ldr	r3, [pc, #88]	; (8006620 <LiczeniePradu+0x10c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	10db      	asrs	r3, r3, #3
 80065cc:	4a14      	ldr	r2, [pc, #80]	; (8006620 <LiczeniePradu+0x10c>)
 80065ce:	6013      	str	r3, [r2, #0]
	iv = (iv * 6) + (i[1]* 2);
 80065d0:	4b14      	ldr	r3, [pc, #80]	; (8006624 <LiczeniePradu+0x110>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	441a      	add	r2, r3
 80065da:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <LiczeniePradu+0xf4>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	4413      	add	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4a10      	ldr	r2, [pc, #64]	; (8006624 <LiczeniePradu+0x110>)
 80065e4:	6013      	str	r3, [r2, #0]
	iv = iv >> 3;
 80065e6:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <LiczeniePradu+0x110>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	10db      	asrs	r3, r3, #3
 80065ec:	4a0d      	ldr	r2, [pc, #52]	; (8006624 <LiczeniePradu+0x110>)
 80065ee:	6013      	str	r3, [r2, #0]

	iw = - iu - iv;
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <LiczeniePradu+0x10c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	425a      	negs	r2, r3
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <LiczeniePradu+0x110>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	4a0a      	ldr	r2, [pc, #40]	; (8006628 <LiczeniePradu+0x114>)
 80065fe:	6013      	str	r3, [r2, #0]
}
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	08007f98 	.word	0x08007f98
 8006608:	2000046c 	.word	0x2000046c
 800660c:	08007fdc 	.word	0x08007fdc
 8006610:	20000460 	.word	0x20000460
 8006614:	200002c0 	.word	0x200002c0
 8006618:	80080081 	.word	0x80080081
 800661c:	20000458 	.word	0x20000458
 8006620:	20000454 	.word	0x20000454
 8006624:	2000045c 	.word	0x2000045c
 8006628:	20000464 	.word	0x20000464

0800662c <CCU80_2_IRQHandler>:
void ADC_START(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0

}
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <XMC_Init>:
void ADC_Pomiary(void)
{
}
void XMC_Init()
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
	switch (silnik) {									//TODO dodac konfiguracje dla pozostałych silnikow
 800663c:	4b47      	ldr	r3, [pc, #284]	; (800675c <XMC_Init+0x124>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b07      	cmp	r3, #7
 8006642:	d866      	bhi.n	8006712 <XMC_Init+0xda>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <XMC_Init+0x14>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	0800666d 	.word	0x0800666d
 8006650:	08006683 	.word	0x08006683
 8006654:	08006697 	.word	0x08006697
 8006658:	080066ab 	.word	0x080066ab
 800665c:	080066bf 	.word	0x080066bf
 8006660:	080066d3 	.word	0x080066d3
 8006664:	080066e9 	.word	0x080066e9
 8006668:	080066ff 	.word	0x080066ff
		case 0:
			adress = 0x10;
 800666c:	4b3c      	ldr	r3, [pc, #240]	; (8006760 <XMC_Init+0x128>)
 800666e:	2210      	movs	r2, #16
 8006670:	701a      	strb	r2, [r3, #0]
			offset_elektryczny = 8000;
 8006672:	4b3c      	ldr	r3, [pc, #240]	; (8006764 <XMC_Init+0x12c>)
 8006674:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006678:	601a      	str	r2, [r3, #0]
			znak = -1;
 800667a:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <XMC_Init+0x130>)
 800667c:	22ff      	movs	r2, #255	; 0xff
 800667e:	701a      	strb	r2, [r3, #0]
			break;
 8006680:	e048      	b.n	8006714 <XMC_Init+0xdc>
		case 1:
			adress = 0x11;
 8006682:	4b37      	ldr	r3, [pc, #220]	; (8006760 <XMC_Init+0x128>)
 8006684:	2211      	movs	r2, #17
 8006686:	701a      	strb	r2, [r3, #0]
			offset_elektryczny = -1590;
 8006688:	4b36      	ldr	r3, [pc, #216]	; (8006764 <XMC_Init+0x12c>)
 800668a:	4a38      	ldr	r2, [pc, #224]	; (800676c <XMC_Init+0x134>)
 800668c:	601a      	str	r2, [r3, #0]
			znak = 1;
 800668e:	4b36      	ldr	r3, [pc, #216]	; (8006768 <XMC_Init+0x130>)
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
			break;
 8006694:	e03e      	b.n	8006714 <XMC_Init+0xdc>
		case 2:
			adress = 0x12;
 8006696:	4b32      	ldr	r3, [pc, #200]	; (8006760 <XMC_Init+0x128>)
 8006698:	2212      	movs	r2, #18
 800669a:	701a      	strb	r2, [r3, #0]
			offset_elektryczny = -14100;
 800669c:	4b31      	ldr	r3, [pc, #196]	; (8006764 <XMC_Init+0x12c>)
 800669e:	4a34      	ldr	r2, [pc, #208]	; (8006770 <XMC_Init+0x138>)
 80066a0:	601a      	str	r2, [r3, #0]
			znak = -1;
 80066a2:	4b31      	ldr	r3, [pc, #196]	; (8006768 <XMC_Init+0x130>)
 80066a4:	22ff      	movs	r2, #255	; 0xff
 80066a6:	701a      	strb	r2, [r3, #0]
			break;
 80066a8:	e034      	b.n	8006714 <XMC_Init+0xdc>
		case 3:
			adress = 0x13;
 80066aa:	4b2d      	ldr	r3, [pc, #180]	; (8006760 <XMC_Init+0x128>)
 80066ac:	2213      	movs	r2, #19
 80066ae:	701a      	strb	r2, [r3, #0]
			offset_elektryczny = -7850;
 80066b0:	4b2c      	ldr	r3, [pc, #176]	; (8006764 <XMC_Init+0x12c>)
 80066b2:	4a30      	ldr	r2, [pc, #192]	; (8006774 <XMC_Init+0x13c>)
 80066b4:	601a      	str	r2, [r3, #0]
			znak = 1;
 80066b6:	4b2c      	ldr	r3, [pc, #176]	; (8006768 <XMC_Init+0x130>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]
			break;
 80066bc:	e02a      	b.n	8006714 <XMC_Init+0xdc>
		case 4:
			adress = 0x14;
 80066be:	4b28      	ldr	r3, [pc, #160]	; (8006760 <XMC_Init+0x128>)
 80066c0:	2214      	movs	r2, #20
 80066c2:	701a      	strb	r2, [r3, #0]
			offset_elektryczny = -25500;
 80066c4:	4b27      	ldr	r3, [pc, #156]	; (8006764 <XMC_Init+0x12c>)
 80066c6:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <XMC_Init+0x140>)
 80066c8:	601a      	str	r2, [r3, #0]
			znak = -1;
 80066ca:	4b27      	ldr	r3, [pc, #156]	; (8006768 <XMC_Init+0x130>)
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	701a      	strb	r2, [r3, #0]
			break;
 80066d0:	e020      	b.n	8006714 <XMC_Init+0xdc>
		case 5:
			adress = 0x15;
 80066d2:	4b23      	ldr	r3, [pc, #140]	; (8006760 <XMC_Init+0x128>)
 80066d4:	2215      	movs	r2, #21
 80066d6:	701a      	strb	r2, [r3, #0]
			offset_elektryczny = 32000;
 80066d8:	4b22      	ldr	r3, [pc, #136]	; (8006764 <XMC_Init+0x12c>)
 80066da:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80066de:	601a      	str	r2, [r3, #0]
			znak = 1;
 80066e0:	4b21      	ldr	r3, [pc, #132]	; (8006768 <XMC_Init+0x130>)
 80066e2:	2201      	movs	r2, #1
 80066e4:	701a      	strb	r2, [r3, #0]
			break;
 80066e6:	e015      	b.n	8006714 <XMC_Init+0xdc>
		case 6:
			adress = 0x16;
 80066e8:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <XMC_Init+0x128>)
 80066ea:	2216      	movs	r2, #22
 80066ec:	701a      	strb	r2, [r3, #0]
			offset_elektryczny = 25840;
 80066ee:	4b1d      	ldr	r3, [pc, #116]	; (8006764 <XMC_Init+0x12c>)
 80066f0:	f246 42f0 	movw	r2, #25840	; 0x64f0
 80066f4:	601a      	str	r2, [r3, #0]
			znak = -1;
 80066f6:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <XMC_Init+0x130>)
 80066f8:	22ff      	movs	r2, #255	; 0xff
 80066fa:	701a      	strb	r2, [r3, #0]
			break;
 80066fc:	e00a      	b.n	8006714 <XMC_Init+0xdc>
		case 7:
			adress = 0x17;
 80066fe:	4b18      	ldr	r3, [pc, #96]	; (8006760 <XMC_Init+0x128>)
 8006700:	2217      	movs	r2, #23
 8006702:	701a      	strb	r2, [r3, #0]
			offset_elektryczny = -25500;
 8006704:	4b17      	ldr	r3, [pc, #92]	; (8006764 <XMC_Init+0x12c>)
 8006706:	4a1c      	ldr	r2, [pc, #112]	; (8006778 <XMC_Init+0x140>)
 8006708:	601a      	str	r2, [r3, #0]
			znak = 1;
 800670a:	4b17      	ldr	r3, [pc, #92]	; (8006768 <XMC_Init+0x130>)
 800670c:	2201      	movs	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
			break;
 8006710:	e000      	b.n	8006714 <XMC_Init+0xdc>
		default:
			break;
 8006712:	bf00      	nop
	}
	PI_Iq.kP = 4500;
 8006714:	4b19      	ldr	r3, [pc, #100]	; (800677c <XMC_Init+0x144>)
 8006716:	f241 1294 	movw	r2, #4500	; 0x1194
 800671a:	801a      	strh	r2, [r3, #0]
	PI_Iq.kI =412;
 800671c:	4b17      	ldr	r3, [pc, #92]	; (800677c <XMC_Init+0x144>)
 800671e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006722:	805a      	strh	r2, [r3, #2]
	PI_Id.kP =2107;
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <XMC_Init+0x148>)
 8006726:	f640 023b 	movw	r2, #2107	; 0x83b
 800672a:	801a      	strh	r2, [r3, #0]
	PI_Id.kI =1130;
 800672c:	4b14      	ldr	r3, [pc, #80]	; (8006780 <XMC_Init+0x148>)
 800672e:	f240 426a 	movw	r2, #1130	; 0x46a
 8006732:	805a      	strh	r2, [r3, #2]
	RS_Init();
 8006734:	f7ff fb42 	bl	8005dbc <RS_Init>
	while(init == 0)
 8006738:	e007      	b.n	800674a <XMC_Init+0x112>
	{
		UART_Receive(&UART_0, &rxByte,1);
 800673a:	4812      	ldr	r0, [pc, #72]	; (8006784 <XMC_Init+0x14c>)
 800673c:	4912      	ldr	r1, [pc, #72]	; (8006788 <XMC_Init+0x150>)
 800673e:	2201      	movs	r2, #1
 8006740:	f7fb fece 	bl	80024e0 <UART_Receive>

		DIGITAL_IO_ToggleOutput(&LED);
 8006744:	4811      	ldr	r0, [pc, #68]	; (800678c <XMC_Init+0x154>)
 8006746:	f7ff facb 	bl	8005ce0 <DIGITAL_IO_ToggleOutput>
	PI_Iq.kP = 4500;
	PI_Iq.kI =412;
	PI_Id.kP =2107;
	PI_Id.kI =1130;
	RS_Init();
	while(init == 0)
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <XMC_Init+0x158>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f3      	beq.n	800673a <XMC_Init+0x102>
	{
		UART_Receive(&UART_0, &rxByte,1);

		DIGITAL_IO_ToggleOutput(&LED);
	}
	DIGITAL_IO_SetOutputLow(&LED);
 8006752:	480e      	ldr	r0, [pc, #56]	; (800678c <XMC_Init+0x154>)
 8006754:	f7ff fab4 	bl	8005cc0 <DIGITAL_IO_SetOutputLow>
}
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200002b1 	.word	0x200002b1
 8006760:	20000408 	.word	0x20000408
 8006764:	2000044c 	.word	0x2000044c
 8006768:	2000040a 	.word	0x2000040a
 800676c:	fffff9ca 	.word	0xfffff9ca
 8006770:	ffffc8ec 	.word	0xffffc8ec
 8006774:	ffffe156 	.word	0xffffe156
 8006778:	ffff9c64 	.word	0xffff9c64
 800677c:	2000072c 	.word	0x2000072c
 8006780:	2000074c 	.word	0x2000074c
 8006784:	20000000 	.word	0x20000000
 8006788:	20000424 	.word	0x20000424
 800678c:	08007ed4 	.word	0x08007ed4
 8006790:	20000409 	.word	0x20000409

08006794 <end_transmit>:
void end_transmit()
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
}
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <end_receive>:
void end_receive()
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
	if(rxByte == SOF)
 80067a4:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <end_receive+0x70>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2bcc      	cmp	r3, #204	; 0xcc
 80067aa:	d107      	bne.n	80067bc <end_receive+0x1c>
	{
		rxData[0] = rxByte;
 80067ac:	4b18      	ldr	r3, [pc, #96]	; (8006810 <end_receive+0x70>)
 80067ae:	781a      	ldrb	r2, [r3, #0]
 80067b0:	4b18      	ldr	r3, [pc, #96]	; (8006814 <end_receive+0x74>)
 80067b2:	701a      	strb	r2, [r3, #0]
		iterator_wiadomosci = 1;
 80067b4:	4b18      	ldr	r3, [pc, #96]	; (8006818 <end_receive+0x78>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	e023      	b.n	8006804 <end_receive+0x64>
	}
	else if (rxByte == EOF)
 80067bc:	4b14      	ldr	r3, [pc, #80]	; (8006810 <end_receive+0x70>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2bdd      	cmp	r3, #221	; 0xdd
 80067c2:	d10e      	bne.n	80067e2 <end_receive+0x42>
	{
		rxData[iterator_wiadomosci +1] = EOF;
 80067c4:	4b14      	ldr	r3, [pc, #80]	; (8006818 <end_receive+0x78>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	4a12      	ldr	r2, [pc, #72]	; (8006814 <end_receive+0x74>)
 80067cc:	21dd      	movs	r1, #221	; 0xdd
 80067ce:	54d1      	strb	r1, [r2, r3]
		iterator_wiadomosci++;
 80067d0:	4b11      	ldr	r3, [pc, #68]	; (8006818 <end_receive+0x78>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <end_receive+0x78>)
 80067da:	701a      	strb	r2, [r3, #0]
		interpreter_wiadomosci();
 80067dc:	f000 f820 	bl	8006820 <interpreter_wiadomosci>
 80067e0:	e010      	b.n	8006804 <end_receive+0x64>

	}
	else if ( iterator_wiadomosci < 10)
 80067e2:	4b0d      	ldr	r3, [pc, #52]	; (8006818 <end_receive+0x78>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d80c      	bhi.n	8006804 <end_receive+0x64>
	{
		rxData[iterator_wiadomosci] =rxByte;
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <end_receive+0x78>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <end_receive+0x70>)
 80067f2:	7819      	ldrb	r1, [r3, #0]
 80067f4:	4b07      	ldr	r3, [pc, #28]	; (8006814 <end_receive+0x74>)
 80067f6:	5499      	strb	r1, [r3, r2]
		iterator_wiadomosci++;
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <end_receive+0x78>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	3301      	adds	r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <end_receive+0x78>)
 8006802:	701a      	strb	r2, [r3, #0]
	}
	UART_Receive(&UART_0, &rxByte,1);
 8006804:	4805      	ldr	r0, [pc, #20]	; (800681c <end_receive+0x7c>)
 8006806:	4902      	ldr	r1, [pc, #8]	; (8006810 <end_receive+0x70>)
 8006808:	2201      	movs	r2, #1
 800680a:	f7fb fe69 	bl	80024e0 <UART_Receive>
}
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20000424 	.word	0x20000424
 8006814:	2000040c 	.word	0x2000040c
 8006818:	20000425 	.word	0x20000425
 800681c:	20000000 	.word	0x20000000

08006820 <interpreter_wiadomosci>:
void interpreter_wiadomosci()
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
	if(rxData[0] == SOF && rxData[1] == adress)
 8006824:	4b36      	ldr	r3, [pc, #216]	; (8006900 <interpreter_wiadomosci+0xe0>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2bcc      	cmp	r3, #204	; 0xcc
 800682a:	d165      	bne.n	80068f8 <interpreter_wiadomosci+0xd8>
 800682c:	4b34      	ldr	r3, [pc, #208]	; (8006900 <interpreter_wiadomosci+0xe0>)
 800682e:	785a      	ldrb	r2, [r3, #1]
 8006830:	4b34      	ldr	r3, [pc, #208]	; (8006904 <interpreter_wiadomosci+0xe4>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d15f      	bne.n	80068f8 <interpreter_wiadomosci+0xd8>
	{
		if(rxData[2] == INIT)			//inicjalizacja
 8006838:	4b31      	ldr	r3, [pc, #196]	; (8006900 <interpreter_wiadomosci+0xe0>)
 800683a:	789b      	ldrb	r3, [r3, #2]
 800683c:	2ba1      	cmp	r3, #161	; 0xa1
 800683e:	d10d      	bne.n	800685c <interpreter_wiadomosci+0x3c>
		{
			init = 1;
 8006840:	4b31      	ldr	r3, [pc, #196]	; (8006908 <interpreter_wiadomosci+0xe8>)
 8006842:	2201      	movs	r2, #1
 8006844:	701a      	strb	r2, [r3, #0]
			txData[3] =INIT;
 8006846:	4b31      	ldr	r3, [pc, #196]	; (800690c <interpreter_wiadomosci+0xec>)
 8006848:	22a1      	movs	r2, #161	; 0xa1
 800684a:	70da      	strb	r2, [r3, #3]
			txData[4] =init;
 800684c:	4b2e      	ldr	r3, [pc, #184]	; (8006908 <interpreter_wiadomosci+0xe8>)
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	4b2e      	ldr	r3, [pc, #184]	; (800690c <interpreter_wiadomosci+0xec>)
 8006852:	711a      	strb	r2, [r3, #4]
			txData[5] = EOF;
 8006854:	4b2d      	ldr	r3, [pc, #180]	; (800690c <interpreter_wiadomosci+0xec>)
 8006856:	22dd      	movs	r2, #221	; 0xdd
 8006858:	715a      	strb	r2, [r3, #5]
 800685a:	e04d      	b.n	80068f8 <interpreter_wiadomosci+0xd8>
			//UART_Transmit(&UART_0, txData, 6);
		}
		else if(rxData[2] == CHECK)				//status check
 800685c:	4b28      	ldr	r3, [pc, #160]	; (8006900 <interpreter_wiadomosci+0xe0>)
 800685e:	789b      	ldrb	r3, [r3, #2]
 8006860:	2ba3      	cmp	r3, #163	; 0xa3
 8006862:	d10e      	bne.n	8006882 <interpreter_wiadomosci+0x62>
		{
			txData[3] =CHECK;
 8006864:	4b29      	ldr	r3, [pc, #164]	; (800690c <interpreter_wiadomosci+0xec>)
 8006866:	22a3      	movs	r2, #163	; 0xa3
 8006868:	70da      	strb	r2, [r3, #3]
			txData[4] =init;
 800686a:	4b27      	ldr	r3, [pc, #156]	; (8006908 <interpreter_wiadomosci+0xe8>)
 800686c:	781a      	ldrb	r2, [r3, #0]
 800686e:	4b27      	ldr	r3, [pc, #156]	; (800690c <interpreter_wiadomosci+0xec>)
 8006870:	711a      	strb	r2, [r3, #4]
			txData[5] = silnik;
 8006872:	4b27      	ldr	r3, [pc, #156]	; (8006910 <interpreter_wiadomosci+0xf0>)
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	4b25      	ldr	r3, [pc, #148]	; (800690c <interpreter_wiadomosci+0xec>)
 8006878:	715a      	strb	r2, [r3, #5]
			txData[6] = EOF;
 800687a:	4b24      	ldr	r3, [pc, #144]	; (800690c <interpreter_wiadomosci+0xec>)
 800687c:	22dd      	movs	r2, #221	; 0xdd
 800687e:	719a      	strb	r2, [r3, #6]
 8006880:	e03a      	b.n	80068f8 <interpreter_wiadomosci+0xd8>
			//UART_Transmit(&UART_0, txData, 7);
		}
		else	if ( init == 1)														//zadawanie momentu
 8006882:	4b21      	ldr	r3, [pc, #132]	; (8006908 <interpreter_wiadomosci+0xe8>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d136      	bne.n	80068f8 <interpreter_wiadomosci+0xd8>
		{
			poz_zad = rxData[2] << 8 | rxData[3];
 800688a:	4b1d      	ldr	r3, [pc, #116]	; (8006900 <interpreter_wiadomosci+0xe0>)
 800688c:	789b      	ldrb	r3, [r3, #2]
 800688e:	021b      	lsls	r3, r3, #8
 8006890:	b29a      	uxth	r2, r3
 8006892:	4b1b      	ldr	r3, [pc, #108]	; (8006900 <interpreter_wiadomosci+0xe0>)
 8006894:	78db      	ldrb	r3, [r3, #3]
 8006896:	b29b      	uxth	r3, r3
 8006898:	4313      	orrs	r3, r2
 800689a:	b29b      	uxth	r3, r3
 800689c:	b29a      	uxth	r2, r3
 800689e:	4b1d      	ldr	r3, [pc, #116]	; (8006914 <interpreter_wiadomosci+0xf4>)
 80068a0:	801a      	strh	r2, [r3, #0]
			ks = rxData[4] << 8 | rxData[5];
 80068a2:	4b17      	ldr	r3, [pc, #92]	; (8006900 <interpreter_wiadomosci+0xe0>)
 80068a4:	791b      	ldrb	r3, [r3, #4]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <interpreter_wiadomosci+0xe0>)
 80068ac:	795b      	ldrb	r3, [r3, #5]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	4313      	orrs	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	4b18      	ldr	r3, [pc, #96]	; (8006918 <interpreter_wiadomosci+0xf8>)
 80068b8:	801a      	strh	r2, [r3, #0]
			kd = rxData[6] << 8 | txData[7];
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <interpreter_wiadomosci+0xe0>)
 80068bc:	799b      	ldrb	r3, [r3, #6]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	4b12      	ldr	r3, [pc, #72]	; (800690c <interpreter_wiadomosci+0xec>)
 80068c4:	79db      	ldrb	r3, [r3, #7]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	4313      	orrs	r3, r2
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	4b13      	ldr	r3, [pc, #76]	; (800691c <interpreter_wiadomosci+0xfc>)
 80068d0:	801a      	strh	r2, [r3, #0]
			if(poz_zad > 40000 || poz_zad < -2000 || ks > 12000)					//basic error correction mechanism
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <interpreter_wiadomosci+0xf4>)
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	f649 4240 	movw	r2, #40000	; 0x9c40
 80068da:	4293      	cmp	r3, r2
 80068dc:	d805      	bhi.n	80068ea <interpreter_wiadomosci+0xca>
 80068de:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <interpreter_wiadomosci+0xf8>)
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d906      	bls.n	80068f8 <interpreter_wiadomosci+0xd8>
				{ poz_zad = 16000; ks = 100; }
 80068ea:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <interpreter_wiadomosci+0xf4>)
 80068ec:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	4b09      	ldr	r3, [pc, #36]	; (8006918 <interpreter_wiadomosci+0xf8>)
 80068f4:	2264      	movs	r2, #100	; 0x64
 80068f6:	801a      	strh	r2, [r3, #0]
			//UART_Transmit(&UART_0, txData, 10);
		}
	}
}
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	2000040c 	.word	0x2000040c
 8006904:	20000408 	.word	0x20000408
 8006908:	20000409 	.word	0x20000409
 800690c:	20000418 	.word	0x20000418
 8006910:	200002b1 	.word	0x200002b1
 8006914:	200002b8 	.word	0x200002b8
 8006918:	200002ba 	.word	0x200002ba
 800691c:	200002bc 	.word	0x200002bc

08006920 <CCU43_1_IRQHandler>:
	TIMER_Start(&DELAY);
	while(is_delay);
	TIMER_Stop(&DELAY);
}
void TIMER_IRQ()
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
	is_delay = 0;
 8006924:	4b03      	ldr	r3, [pc, #12]	; (8006934 <CCU43_1_IRQHandler+0x14>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
}
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	200002b4 	.word	0x200002b4

08006938 <sqrtf>:
 8006938:	b530      	push	{r4, r5, lr}
 800693a:	ed2d 8b02 	vpush	{d8}
 800693e:	4d28      	ldr	r5, [pc, #160]	; (80069e0 <sqrtf+0xa8>)
 8006940:	b08b      	sub	sp, #44	; 0x2c
 8006942:	ee08 0a10 	vmov	s16, r0
 8006946:	f000 f84f 	bl	80069e8 <__ieee754_sqrtf>
 800694a:	f995 3000 	ldrsb.w	r3, [r5]
 800694e:	3301      	adds	r3, #1
 8006950:	4604      	mov	r4, r0
 8006952:	d009      	beq.n	8006968 <sqrtf+0x30>
 8006954:	ee18 0a10 	vmov	r0, s16
 8006958:	f000 f89e 	bl	8006a98 <__fpclassifyf>
 800695c:	b120      	cbz	r0, 8006968 <sqrtf+0x30>
 800695e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006966:	d404      	bmi.n	8006972 <sqrtf+0x3a>
 8006968:	4620      	mov	r0, r4
 800696a:	b00b      	add	sp, #44	; 0x2c
 800696c:	ecbd 8b02 	vpop	{d8}
 8006970:	bd30      	pop	{r4, r5, pc}
 8006972:	2301      	movs	r3, #1
 8006974:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <sqrtf+0xac>)
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	ee18 0a10 	vmov	r0, s16
 800697c:	2300      	movs	r3, #0
 800697e:	9201      	str	r2, [sp, #4]
 8006980:	9308      	str	r3, [sp, #32]
 8006982:	f000 fa07 	bl	8006d94 <__aeabi_f2d>
 8006986:	782c      	ldrb	r4, [r5, #0]
 8006988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800698c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006990:	b98c      	cbnz	r4, 80069b6 <sqrtf+0x7e>
 8006992:	2200      	movs	r2, #0
 8006994:	2300      	movs	r3, #0
 8006996:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800699a:	4668      	mov	r0, sp
 800699c:	f000 f87a 	bl	8006a94 <matherr>
 80069a0:	b198      	cbz	r0, 80069ca <sqrtf+0x92>
 80069a2:	9b08      	ldr	r3, [sp, #32]
 80069a4:	b9b3      	cbnz	r3, 80069d4 <sqrtf+0x9c>
 80069a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069aa:	f000 fc59 	bl	8007260 <__aeabi_d2f>
 80069ae:	b00b      	add	sp, #44	; 0x2c
 80069b0:	ecbd 8b02 	vpop	{d8}
 80069b4:	bd30      	pop	{r4, r5, pc}
 80069b6:	2000      	movs	r0, #0
 80069b8:	2100      	movs	r1, #0
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	f000 fb67 	bl	8007090 <__aeabi_ddiv>
 80069c2:	2c02      	cmp	r4, #2
 80069c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069c8:	d1e7      	bne.n	800699a <sqrtf+0x62>
 80069ca:	f000 fc99 	bl	8007300 <__errno>
 80069ce:	2321      	movs	r3, #33	; 0x21
 80069d0:	6003      	str	r3, [r0, #0]
 80069d2:	e7e6      	b.n	80069a2 <sqrtf+0x6a>
 80069d4:	f000 fc94 	bl	8007300 <__errno>
 80069d8:	9b08      	ldr	r3, [sp, #32]
 80069da:	6003      	str	r3, [r0, #0]
 80069dc:	e7e3      	b.n	80069a6 <sqrtf+0x6e>
 80069de:	bf00      	nop
 80069e0:	200002c4 	.word	0x200002c4
 80069e4:	08008054 	.word	0x08008054

080069e8 <__ieee754_sqrtf>:
 80069e8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80069ec:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80069f0:	b470      	push	{r4, r5, r6}
 80069f2:	ee07 0a90 	vmov	s15, r0
 80069f6:	4603      	mov	r3, r0
 80069f8:	d232      	bcs.n	8006a60 <__ieee754_sqrtf+0x78>
 80069fa:	b36a      	cbz	r2, 8006a58 <__ieee754_sqrtf+0x70>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	db41      	blt.n	8006a84 <__ieee754_sqrtf+0x9c>
 8006a00:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006a04:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006a08:	d330      	bcc.n	8006a6c <__ieee754_sqrtf+0x84>
 8006a0a:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 8006a0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006a12:	07d1      	lsls	r1, r2, #31
 8006a14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a18:	bf48      	it	mi
 8006a1a:	005b      	lslmi	r3, r3, #1
 8006a1c:	2400      	movs	r4, #0
 8006a1e:	1056      	asrs	r6, r2, #1
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	4625      	mov	r5, r4
 8006a24:	2119      	movs	r1, #25
 8006a26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a2a:	18a8      	adds	r0, r5, r2
 8006a2c:	4298      	cmp	r0, r3
 8006a2e:	dc02      	bgt.n	8006a36 <__ieee754_sqrtf+0x4e>
 8006a30:	1a1b      	subs	r3, r3, r0
 8006a32:	1885      	adds	r5, r0, r2
 8006a34:	4414      	add	r4, r2
 8006a36:	3901      	subs	r1, #1
 8006a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a3c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006a40:	d1f3      	bne.n	8006a2a <__ieee754_sqrtf+0x42>
 8006a42:	b113      	cbz	r3, 8006a4a <__ieee754_sqrtf+0x62>
 8006a44:	f004 0301 	and.w	r3, r4, #1
 8006a48:	441c      	add	r4, r3
 8006a4a:	1064      	asrs	r4, r4, #1
 8006a4c:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8006a50:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	ee17 0a90 	vmov	r0, s15
 8006a5c:	bc70      	pop	{r4, r5, r6}
 8006a5e:	4770      	bx	lr
 8006a60:	eee7 7aa7 	vfma.f32	s15, s15, s15
 8006a64:	bc70      	pop	{r4, r5, r6}
 8006a66:	ee17 0a90 	vmov	r0, s15
 8006a6a:	4770      	bx	lr
 8006a6c:	f410 0200 	ands.w	r2, r0, #8388608	; 0x800000
 8006a70:	d10d      	bne.n	8006a8e <__ieee754_sqrtf+0xa6>
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	0218      	lsls	r0, r3, #8
 8006a76:	f102 0201 	add.w	r2, r2, #1
 8006a7a:	d5fa      	bpl.n	8006a72 <__ieee754_sqrtf+0x8a>
 8006a7c:	f1c2 0201 	rsb	r2, r2, #1
 8006a80:	4411      	add	r1, r2
 8006a82:	e7c2      	b.n	8006a0a <__ieee754_sqrtf+0x22>
 8006a84:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8006a88:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 8006a8c:	e7e4      	b.n	8006a58 <__ieee754_sqrtf+0x70>
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4411      	add	r1, r2
 8006a92:	e7ba      	b.n	8006a0a <__ieee754_sqrtf+0x22>

08006a94 <matherr>:
 8006a94:	2000      	movs	r0, #0
 8006a96:	4770      	bx	lr

08006a98 <__fpclassifyf>:
 8006a98:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 8006a9c:	d101      	bne.n	8006aa2 <__fpclassifyf+0xa>
 8006a9e:	2002      	movs	r0, #2
 8006aa0:	4770      	bx	lr
 8006aa2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8006aa6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8006aaa:	d201      	bcs.n	8006ab0 <__fpclassifyf+0x18>
 8006aac:	2004      	movs	r0, #4
 8006aae:	4770      	bx	lr
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <__fpclassifyf+0x30>)
 8006ab2:	1e42      	subs	r2, r0, #1
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d801      	bhi.n	8006abc <__fpclassifyf+0x24>
 8006ab8:	2003      	movs	r0, #3
 8006aba:	4770      	bx	lr
 8006abc:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 8006ac0:	fab0 f080 	clz	r0, r0
 8006ac4:	0940      	lsrs	r0, r0, #5
 8006ac6:	4770      	bx	lr
 8006ac8:	007ffffe 	.word	0x007ffffe

08006acc <__aeabi_drsub>:
 8006acc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006ad0:	e002      	b.n	8006ad8 <__adddf3>
 8006ad2:	bf00      	nop

08006ad4 <__aeabi_dsub>:
 8006ad4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006ad8 <__adddf3>:
 8006ad8:	b530      	push	{r4, r5, lr}
 8006ada:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006ade:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006ae2:	ea94 0f05 	teq	r4, r5
 8006ae6:	bf08      	it	eq
 8006ae8:	ea90 0f02 	teqeq	r0, r2
 8006aec:	bf1f      	itttt	ne
 8006aee:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006af2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006af6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006afa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006afe:	f000 80e2 	beq.w	8006cc6 <__adddf3+0x1ee>
 8006b02:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006b06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006b0a:	bfb8      	it	lt
 8006b0c:	426d      	neglt	r5, r5
 8006b0e:	dd0c      	ble.n	8006b2a <__adddf3+0x52>
 8006b10:	442c      	add	r4, r5
 8006b12:	ea80 0202 	eor.w	r2, r0, r2
 8006b16:	ea81 0303 	eor.w	r3, r1, r3
 8006b1a:	ea82 0000 	eor.w	r0, r2, r0
 8006b1e:	ea83 0101 	eor.w	r1, r3, r1
 8006b22:	ea80 0202 	eor.w	r2, r0, r2
 8006b26:	ea81 0303 	eor.w	r3, r1, r3
 8006b2a:	2d36      	cmp	r5, #54	; 0x36
 8006b2c:	bf88      	it	hi
 8006b2e:	bd30      	pophi	{r4, r5, pc}
 8006b30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006b34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006b38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006b3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006b40:	d002      	beq.n	8006b48 <__adddf3+0x70>
 8006b42:	4240      	negs	r0, r0
 8006b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006b48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006b4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006b50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006b54:	d002      	beq.n	8006b5c <__adddf3+0x84>
 8006b56:	4252      	negs	r2, r2
 8006b58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006b5c:	ea94 0f05 	teq	r4, r5
 8006b60:	f000 80a7 	beq.w	8006cb2 <__adddf3+0x1da>
 8006b64:	f1a4 0401 	sub.w	r4, r4, #1
 8006b68:	f1d5 0e20 	rsbs	lr, r5, #32
 8006b6c:	db0d      	blt.n	8006b8a <__adddf3+0xb2>
 8006b6e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006b72:	fa22 f205 	lsr.w	r2, r2, r5
 8006b76:	1880      	adds	r0, r0, r2
 8006b78:	f141 0100 	adc.w	r1, r1, #0
 8006b7c:	fa03 f20e 	lsl.w	r2, r3, lr
 8006b80:	1880      	adds	r0, r0, r2
 8006b82:	fa43 f305 	asr.w	r3, r3, r5
 8006b86:	4159      	adcs	r1, r3
 8006b88:	e00e      	b.n	8006ba8 <__adddf3+0xd0>
 8006b8a:	f1a5 0520 	sub.w	r5, r5, #32
 8006b8e:	f10e 0e20 	add.w	lr, lr, #32
 8006b92:	2a01      	cmp	r2, #1
 8006b94:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006b98:	bf28      	it	cs
 8006b9a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006b9e:	fa43 f305 	asr.w	r3, r3, r5
 8006ba2:	18c0      	adds	r0, r0, r3
 8006ba4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006ba8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006bac:	d507      	bpl.n	8006bbe <__adddf3+0xe6>
 8006bae:	f04f 0e00 	mov.w	lr, #0
 8006bb2:	f1dc 0c00 	rsbs	ip, ip, #0
 8006bb6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006bba:	eb6e 0101 	sbc.w	r1, lr, r1
 8006bbe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006bc2:	d31b      	bcc.n	8006bfc <__adddf3+0x124>
 8006bc4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006bc8:	d30c      	bcc.n	8006be4 <__adddf3+0x10c>
 8006bca:	0849      	lsrs	r1, r1, #1
 8006bcc:	ea5f 0030 	movs.w	r0, r0, rrx
 8006bd0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006bd4:	f104 0401 	add.w	r4, r4, #1
 8006bd8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006bdc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006be0:	f080 809a 	bcs.w	8006d18 <__adddf3+0x240>
 8006be4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006be8:	bf08      	it	eq
 8006bea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006bee:	f150 0000 	adcs.w	r0, r0, #0
 8006bf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006bf6:	ea41 0105 	orr.w	r1, r1, r5
 8006bfa:	bd30      	pop	{r4, r5, pc}
 8006bfc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006c00:	4140      	adcs	r0, r0
 8006c02:	eb41 0101 	adc.w	r1, r1, r1
 8006c06:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006c0a:	f1a4 0401 	sub.w	r4, r4, #1
 8006c0e:	d1e9      	bne.n	8006be4 <__adddf3+0x10c>
 8006c10:	f091 0f00 	teq	r1, #0
 8006c14:	bf04      	itt	eq
 8006c16:	4601      	moveq	r1, r0
 8006c18:	2000      	moveq	r0, #0
 8006c1a:	fab1 f381 	clz	r3, r1
 8006c1e:	bf08      	it	eq
 8006c20:	3320      	addeq	r3, #32
 8006c22:	f1a3 030b 	sub.w	r3, r3, #11
 8006c26:	f1b3 0220 	subs.w	r2, r3, #32
 8006c2a:	da0c      	bge.n	8006c46 <__adddf3+0x16e>
 8006c2c:	320c      	adds	r2, #12
 8006c2e:	dd08      	ble.n	8006c42 <__adddf3+0x16a>
 8006c30:	f102 0c14 	add.w	ip, r2, #20
 8006c34:	f1c2 020c 	rsb	r2, r2, #12
 8006c38:	fa01 f00c 	lsl.w	r0, r1, ip
 8006c3c:	fa21 f102 	lsr.w	r1, r1, r2
 8006c40:	e00c      	b.n	8006c5c <__adddf3+0x184>
 8006c42:	f102 0214 	add.w	r2, r2, #20
 8006c46:	bfd8      	it	le
 8006c48:	f1c2 0c20 	rsble	ip, r2, #32
 8006c4c:	fa01 f102 	lsl.w	r1, r1, r2
 8006c50:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006c54:	bfdc      	itt	le
 8006c56:	ea41 010c 	orrle.w	r1, r1, ip
 8006c5a:	4090      	lslle	r0, r2
 8006c5c:	1ae4      	subs	r4, r4, r3
 8006c5e:	bfa2      	ittt	ge
 8006c60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006c64:	4329      	orrge	r1, r5
 8006c66:	bd30      	popge	{r4, r5, pc}
 8006c68:	ea6f 0404 	mvn.w	r4, r4
 8006c6c:	3c1f      	subs	r4, #31
 8006c6e:	da1c      	bge.n	8006caa <__adddf3+0x1d2>
 8006c70:	340c      	adds	r4, #12
 8006c72:	dc0e      	bgt.n	8006c92 <__adddf3+0x1ba>
 8006c74:	f104 0414 	add.w	r4, r4, #20
 8006c78:	f1c4 0220 	rsb	r2, r4, #32
 8006c7c:	fa20 f004 	lsr.w	r0, r0, r4
 8006c80:	fa01 f302 	lsl.w	r3, r1, r2
 8006c84:	ea40 0003 	orr.w	r0, r0, r3
 8006c88:	fa21 f304 	lsr.w	r3, r1, r4
 8006c8c:	ea45 0103 	orr.w	r1, r5, r3
 8006c90:	bd30      	pop	{r4, r5, pc}
 8006c92:	f1c4 040c 	rsb	r4, r4, #12
 8006c96:	f1c4 0220 	rsb	r2, r4, #32
 8006c9a:	fa20 f002 	lsr.w	r0, r0, r2
 8006c9e:	fa01 f304 	lsl.w	r3, r1, r4
 8006ca2:	ea40 0003 	orr.w	r0, r0, r3
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	bd30      	pop	{r4, r5, pc}
 8006caa:	fa21 f004 	lsr.w	r0, r1, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	bd30      	pop	{r4, r5, pc}
 8006cb2:	f094 0f00 	teq	r4, #0
 8006cb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006cba:	bf06      	itte	eq
 8006cbc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006cc0:	3401      	addeq	r4, #1
 8006cc2:	3d01      	subne	r5, #1
 8006cc4:	e74e      	b.n	8006b64 <__adddf3+0x8c>
 8006cc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006cca:	bf18      	it	ne
 8006ccc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006cd0:	d029      	beq.n	8006d26 <__adddf3+0x24e>
 8006cd2:	ea94 0f05 	teq	r4, r5
 8006cd6:	bf08      	it	eq
 8006cd8:	ea90 0f02 	teqeq	r0, r2
 8006cdc:	d005      	beq.n	8006cea <__adddf3+0x212>
 8006cde:	ea54 0c00 	orrs.w	ip, r4, r0
 8006ce2:	bf04      	itt	eq
 8006ce4:	4619      	moveq	r1, r3
 8006ce6:	4610      	moveq	r0, r2
 8006ce8:	bd30      	pop	{r4, r5, pc}
 8006cea:	ea91 0f03 	teq	r1, r3
 8006cee:	bf1e      	ittt	ne
 8006cf0:	2100      	movne	r1, #0
 8006cf2:	2000      	movne	r0, #0
 8006cf4:	bd30      	popne	{r4, r5, pc}
 8006cf6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006cfa:	d105      	bne.n	8006d08 <__adddf3+0x230>
 8006cfc:	0040      	lsls	r0, r0, #1
 8006cfe:	4149      	adcs	r1, r1
 8006d00:	bf28      	it	cs
 8006d02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006d06:	bd30      	pop	{r4, r5, pc}
 8006d08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006d0c:	bf3c      	itt	cc
 8006d0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006d12:	bd30      	popcc	{r4, r5, pc}
 8006d14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006d18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006d1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d20:	f04f 0000 	mov.w	r0, #0
 8006d24:	bd30      	pop	{r4, r5, pc}
 8006d26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006d2a:	bf1a      	itte	ne
 8006d2c:	4619      	movne	r1, r3
 8006d2e:	4610      	movne	r0, r2
 8006d30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006d34:	bf1c      	itt	ne
 8006d36:	460b      	movne	r3, r1
 8006d38:	4602      	movne	r2, r0
 8006d3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006d3e:	bf06      	itte	eq
 8006d40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006d44:	ea91 0f03 	teqeq	r1, r3
 8006d48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006d4c:	bd30      	pop	{r4, r5, pc}
 8006d4e:	bf00      	nop

08006d50 <__aeabi_ui2d>:
 8006d50:	f090 0f00 	teq	r0, #0
 8006d54:	bf04      	itt	eq
 8006d56:	2100      	moveq	r1, #0
 8006d58:	4770      	bxeq	lr
 8006d5a:	b530      	push	{r4, r5, lr}
 8006d5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006d60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006d64:	f04f 0500 	mov.w	r5, #0
 8006d68:	f04f 0100 	mov.w	r1, #0
 8006d6c:	e750      	b.n	8006c10 <__adddf3+0x138>
 8006d6e:	bf00      	nop

08006d70 <__aeabi_i2d>:
 8006d70:	f090 0f00 	teq	r0, #0
 8006d74:	bf04      	itt	eq
 8006d76:	2100      	moveq	r1, #0
 8006d78:	4770      	bxeq	lr
 8006d7a:	b530      	push	{r4, r5, lr}
 8006d7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006d80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006d84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006d88:	bf48      	it	mi
 8006d8a:	4240      	negmi	r0, r0
 8006d8c:	f04f 0100 	mov.w	r1, #0
 8006d90:	e73e      	b.n	8006c10 <__adddf3+0x138>
 8006d92:	bf00      	nop

08006d94 <__aeabi_f2d>:
 8006d94:	0042      	lsls	r2, r0, #1
 8006d96:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006d9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8006d9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006da2:	bf1f      	itttt	ne
 8006da4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006da8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006dac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006db0:	4770      	bxne	lr
 8006db2:	f092 0f00 	teq	r2, #0
 8006db6:	bf14      	ite	ne
 8006db8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006dbc:	4770      	bxeq	lr
 8006dbe:	b530      	push	{r4, r5, lr}
 8006dc0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006dc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006dc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006dcc:	e720      	b.n	8006c10 <__adddf3+0x138>
 8006dce:	bf00      	nop

08006dd0 <__aeabi_ul2d>:
 8006dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8006dd4:	bf08      	it	eq
 8006dd6:	4770      	bxeq	lr
 8006dd8:	b530      	push	{r4, r5, lr}
 8006dda:	f04f 0500 	mov.w	r5, #0
 8006dde:	e00a      	b.n	8006df6 <__aeabi_l2d+0x16>

08006de0 <__aeabi_l2d>:
 8006de0:	ea50 0201 	orrs.w	r2, r0, r1
 8006de4:	bf08      	it	eq
 8006de6:	4770      	bxeq	lr
 8006de8:	b530      	push	{r4, r5, lr}
 8006dea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006dee:	d502      	bpl.n	8006df6 <__aeabi_l2d+0x16>
 8006df0:	4240      	negs	r0, r0
 8006df2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006df6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006dfa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006dfe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006e02:	f43f aedc 	beq.w	8006bbe <__adddf3+0xe6>
 8006e06:	f04f 0203 	mov.w	r2, #3
 8006e0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006e0e:	bf18      	it	ne
 8006e10:	3203      	addne	r2, #3
 8006e12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006e16:	bf18      	it	ne
 8006e18:	3203      	addne	r2, #3
 8006e1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006e1e:	f1c2 0320 	rsb	r3, r2, #32
 8006e22:	fa00 fc03 	lsl.w	ip, r0, r3
 8006e26:	fa20 f002 	lsr.w	r0, r0, r2
 8006e2a:	fa01 fe03 	lsl.w	lr, r1, r3
 8006e2e:	ea40 000e 	orr.w	r0, r0, lr
 8006e32:	fa21 f102 	lsr.w	r1, r1, r2
 8006e36:	4414      	add	r4, r2
 8006e38:	e6c1      	b.n	8006bbe <__adddf3+0xe6>
 8006e3a:	bf00      	nop

08006e3c <__aeabi_dmul>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006e42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006e46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006e4a:	bf1d      	ittte	ne
 8006e4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006e50:	ea94 0f0c 	teqne	r4, ip
 8006e54:	ea95 0f0c 	teqne	r5, ip
 8006e58:	f000 f8de 	bleq	8007018 <__aeabi_dmul+0x1dc>
 8006e5c:	442c      	add	r4, r5
 8006e5e:	ea81 0603 	eor.w	r6, r1, r3
 8006e62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006e66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006e6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006e6e:	bf18      	it	ne
 8006e70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006e74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e7c:	d038      	beq.n	8006ef0 <__aeabi_dmul+0xb4>
 8006e7e:	fba0 ce02 	umull	ip, lr, r0, r2
 8006e82:	f04f 0500 	mov.w	r5, #0
 8006e86:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006e8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006e8e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006e92:	f04f 0600 	mov.w	r6, #0
 8006e96:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006e9a:	f09c 0f00 	teq	ip, #0
 8006e9e:	bf18      	it	ne
 8006ea0:	f04e 0e01 	orrne.w	lr, lr, #1
 8006ea4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006ea8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006eac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006eb0:	d204      	bcs.n	8006ebc <__aeabi_dmul+0x80>
 8006eb2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006eb6:	416d      	adcs	r5, r5
 8006eb8:	eb46 0606 	adc.w	r6, r6, r6
 8006ebc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006ec0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006ec4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006ec8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006ecc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006ed0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006ed4:	bf88      	it	hi
 8006ed6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006eda:	d81e      	bhi.n	8006f1a <__aeabi_dmul+0xde>
 8006edc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006ee0:	bf08      	it	eq
 8006ee2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006ee6:	f150 0000 	adcs.w	r0, r0, #0
 8006eea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006ef4:	ea46 0101 	orr.w	r1, r6, r1
 8006ef8:	ea40 0002 	orr.w	r0, r0, r2
 8006efc:	ea81 0103 	eor.w	r1, r1, r3
 8006f00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006f04:	bfc2      	ittt	gt
 8006f06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006f0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006f0e:	bd70      	popgt	{r4, r5, r6, pc}
 8006f10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006f14:	f04f 0e00 	mov.w	lr, #0
 8006f18:	3c01      	subs	r4, #1
 8006f1a:	f300 80ab 	bgt.w	8007074 <__aeabi_dmul+0x238>
 8006f1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006f22:	bfde      	ittt	le
 8006f24:	2000      	movle	r0, #0
 8006f26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006f2a:	bd70      	pople	{r4, r5, r6, pc}
 8006f2c:	f1c4 0400 	rsb	r4, r4, #0
 8006f30:	3c20      	subs	r4, #32
 8006f32:	da35      	bge.n	8006fa0 <__aeabi_dmul+0x164>
 8006f34:	340c      	adds	r4, #12
 8006f36:	dc1b      	bgt.n	8006f70 <__aeabi_dmul+0x134>
 8006f38:	f104 0414 	add.w	r4, r4, #20
 8006f3c:	f1c4 0520 	rsb	r5, r4, #32
 8006f40:	fa00 f305 	lsl.w	r3, r0, r5
 8006f44:	fa20 f004 	lsr.w	r0, r0, r4
 8006f48:	fa01 f205 	lsl.w	r2, r1, r5
 8006f4c:	ea40 0002 	orr.w	r0, r0, r2
 8006f50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006f54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006f5c:	fa21 f604 	lsr.w	r6, r1, r4
 8006f60:	eb42 0106 	adc.w	r1, r2, r6
 8006f64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006f68:	bf08      	it	eq
 8006f6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}
 8006f70:	f1c4 040c 	rsb	r4, r4, #12
 8006f74:	f1c4 0520 	rsb	r5, r4, #32
 8006f78:	fa00 f304 	lsl.w	r3, r0, r4
 8006f7c:	fa20 f005 	lsr.w	r0, r0, r5
 8006f80:	fa01 f204 	lsl.w	r2, r1, r4
 8006f84:	ea40 0002 	orr.w	r0, r0, r2
 8006f88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006f8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006f90:	f141 0100 	adc.w	r1, r1, #0
 8006f94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006f98:	bf08      	it	eq
 8006f9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	f1c4 0520 	rsb	r5, r4, #32
 8006fa4:	fa00 f205 	lsl.w	r2, r0, r5
 8006fa8:	ea4e 0e02 	orr.w	lr, lr, r2
 8006fac:	fa20 f304 	lsr.w	r3, r0, r4
 8006fb0:	fa01 f205 	lsl.w	r2, r1, r5
 8006fb4:	ea43 0302 	orr.w	r3, r3, r2
 8006fb8:	fa21 f004 	lsr.w	r0, r1, r4
 8006fbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006fc0:	fa21 f204 	lsr.w	r2, r1, r4
 8006fc4:	ea20 0002 	bic.w	r0, r0, r2
 8006fc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006fcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006fd0:	bf08      	it	eq
 8006fd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	f094 0f00 	teq	r4, #0
 8006fdc:	d10f      	bne.n	8006ffe <__aeabi_dmul+0x1c2>
 8006fde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006fe2:	0040      	lsls	r0, r0, #1
 8006fe4:	eb41 0101 	adc.w	r1, r1, r1
 8006fe8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006fec:	bf08      	it	eq
 8006fee:	3c01      	subeq	r4, #1
 8006ff0:	d0f7      	beq.n	8006fe2 <__aeabi_dmul+0x1a6>
 8006ff2:	ea41 0106 	orr.w	r1, r1, r6
 8006ff6:	f095 0f00 	teq	r5, #0
 8006ffa:	bf18      	it	ne
 8006ffc:	4770      	bxne	lr
 8006ffe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8007002:	0052      	lsls	r2, r2, #1
 8007004:	eb43 0303 	adc.w	r3, r3, r3
 8007008:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800700c:	bf08      	it	eq
 800700e:	3d01      	subeq	r5, #1
 8007010:	d0f7      	beq.n	8007002 <__aeabi_dmul+0x1c6>
 8007012:	ea43 0306 	orr.w	r3, r3, r6
 8007016:	4770      	bx	lr
 8007018:	ea94 0f0c 	teq	r4, ip
 800701c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007020:	bf18      	it	ne
 8007022:	ea95 0f0c 	teqne	r5, ip
 8007026:	d00c      	beq.n	8007042 <__aeabi_dmul+0x206>
 8007028:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800702c:	bf18      	it	ne
 800702e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007032:	d1d1      	bne.n	8006fd8 <__aeabi_dmul+0x19c>
 8007034:	ea81 0103 	eor.w	r1, r1, r3
 8007038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800703c:	f04f 0000 	mov.w	r0, #0
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007046:	bf06      	itte	eq
 8007048:	4610      	moveq	r0, r2
 800704a:	4619      	moveq	r1, r3
 800704c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007050:	d019      	beq.n	8007086 <__aeabi_dmul+0x24a>
 8007052:	ea94 0f0c 	teq	r4, ip
 8007056:	d102      	bne.n	800705e <__aeabi_dmul+0x222>
 8007058:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800705c:	d113      	bne.n	8007086 <__aeabi_dmul+0x24a>
 800705e:	ea95 0f0c 	teq	r5, ip
 8007062:	d105      	bne.n	8007070 <__aeabi_dmul+0x234>
 8007064:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007068:	bf1c      	itt	ne
 800706a:	4610      	movne	r0, r2
 800706c:	4619      	movne	r1, r3
 800706e:	d10a      	bne.n	8007086 <__aeabi_dmul+0x24a>
 8007070:	ea81 0103 	eor.w	r1, r1, r3
 8007074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007078:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800707c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007080:	f04f 0000 	mov.w	r0, #0
 8007084:	bd70      	pop	{r4, r5, r6, pc}
 8007086:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800708a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800708e:	bd70      	pop	{r4, r5, r6, pc}

08007090 <__aeabi_ddiv>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007096:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800709a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800709e:	bf1d      	ittte	ne
 80070a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80070a4:	ea94 0f0c 	teqne	r4, ip
 80070a8:	ea95 0f0c 	teqne	r5, ip
 80070ac:	f000 f8a7 	bleq	80071fe <__aeabi_ddiv+0x16e>
 80070b0:	eba4 0405 	sub.w	r4, r4, r5
 80070b4:	ea81 0e03 	eor.w	lr, r1, r3
 80070b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80070bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80070c0:	f000 8088 	beq.w	80071d4 <__aeabi_ddiv+0x144>
 80070c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80070c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80070cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80070d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80070d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80070d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80070dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80070e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80070e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80070e8:	429d      	cmp	r5, r3
 80070ea:	bf08      	it	eq
 80070ec:	4296      	cmpeq	r6, r2
 80070ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80070f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80070f6:	d202      	bcs.n	80070fe <__aeabi_ddiv+0x6e>
 80070f8:	085b      	lsrs	r3, r3, #1
 80070fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80070fe:	1ab6      	subs	r6, r6, r2
 8007100:	eb65 0503 	sbc.w	r5, r5, r3
 8007104:	085b      	lsrs	r3, r3, #1
 8007106:	ea4f 0232 	mov.w	r2, r2, rrx
 800710a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800710e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8007112:	ebb6 0e02 	subs.w	lr, r6, r2
 8007116:	eb75 0e03 	sbcs.w	lr, r5, r3
 800711a:	bf22      	ittt	cs
 800711c:	1ab6      	subcs	r6, r6, r2
 800711e:	4675      	movcs	r5, lr
 8007120:	ea40 000c 	orrcs.w	r0, r0, ip
 8007124:	085b      	lsrs	r3, r3, #1
 8007126:	ea4f 0232 	mov.w	r2, r2, rrx
 800712a:	ebb6 0e02 	subs.w	lr, r6, r2
 800712e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007132:	bf22      	ittt	cs
 8007134:	1ab6      	subcs	r6, r6, r2
 8007136:	4675      	movcs	r5, lr
 8007138:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800713c:	085b      	lsrs	r3, r3, #1
 800713e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007142:	ebb6 0e02 	subs.w	lr, r6, r2
 8007146:	eb75 0e03 	sbcs.w	lr, r5, r3
 800714a:	bf22      	ittt	cs
 800714c:	1ab6      	subcs	r6, r6, r2
 800714e:	4675      	movcs	r5, lr
 8007150:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007154:	085b      	lsrs	r3, r3, #1
 8007156:	ea4f 0232 	mov.w	r2, r2, rrx
 800715a:	ebb6 0e02 	subs.w	lr, r6, r2
 800715e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007162:	bf22      	ittt	cs
 8007164:	1ab6      	subcs	r6, r6, r2
 8007166:	4675      	movcs	r5, lr
 8007168:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800716c:	ea55 0e06 	orrs.w	lr, r5, r6
 8007170:	d018      	beq.n	80071a4 <__aeabi_ddiv+0x114>
 8007172:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007176:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800717a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800717e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007182:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007186:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800718a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800718e:	d1c0      	bne.n	8007112 <__aeabi_ddiv+0x82>
 8007190:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007194:	d10b      	bne.n	80071ae <__aeabi_ddiv+0x11e>
 8007196:	ea41 0100 	orr.w	r1, r1, r0
 800719a:	f04f 0000 	mov.w	r0, #0
 800719e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80071a2:	e7b6      	b.n	8007112 <__aeabi_ddiv+0x82>
 80071a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80071a8:	bf04      	itt	eq
 80071aa:	4301      	orreq	r1, r0
 80071ac:	2000      	moveq	r0, #0
 80071ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80071b2:	bf88      	it	hi
 80071b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80071b8:	f63f aeaf 	bhi.w	8006f1a <__aeabi_dmul+0xde>
 80071bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80071c0:	bf04      	itt	eq
 80071c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80071c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80071ca:	f150 0000 	adcs.w	r0, r0, #0
 80071ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80071d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80071dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80071e0:	bfc2      	ittt	gt
 80071e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80071e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80071ea:	bd70      	popgt	{r4, r5, r6, pc}
 80071ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80071f0:	f04f 0e00 	mov.w	lr, #0
 80071f4:	3c01      	subs	r4, #1
 80071f6:	e690      	b.n	8006f1a <__aeabi_dmul+0xde>
 80071f8:	ea45 0e06 	orr.w	lr, r5, r6
 80071fc:	e68d      	b.n	8006f1a <__aeabi_dmul+0xde>
 80071fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007202:	ea94 0f0c 	teq	r4, ip
 8007206:	bf08      	it	eq
 8007208:	ea95 0f0c 	teqeq	r5, ip
 800720c:	f43f af3b 	beq.w	8007086 <__aeabi_dmul+0x24a>
 8007210:	ea94 0f0c 	teq	r4, ip
 8007214:	d10a      	bne.n	800722c <__aeabi_ddiv+0x19c>
 8007216:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800721a:	f47f af34 	bne.w	8007086 <__aeabi_dmul+0x24a>
 800721e:	ea95 0f0c 	teq	r5, ip
 8007222:	f47f af25 	bne.w	8007070 <__aeabi_dmul+0x234>
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	e72c      	b.n	8007086 <__aeabi_dmul+0x24a>
 800722c:	ea95 0f0c 	teq	r5, ip
 8007230:	d106      	bne.n	8007240 <__aeabi_ddiv+0x1b0>
 8007232:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007236:	f43f aefd 	beq.w	8007034 <__aeabi_dmul+0x1f8>
 800723a:	4610      	mov	r0, r2
 800723c:	4619      	mov	r1, r3
 800723e:	e722      	b.n	8007086 <__aeabi_dmul+0x24a>
 8007240:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007244:	bf18      	it	ne
 8007246:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800724a:	f47f aec5 	bne.w	8006fd8 <__aeabi_dmul+0x19c>
 800724e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007252:	f47f af0d 	bne.w	8007070 <__aeabi_dmul+0x234>
 8007256:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800725a:	f47f aeeb 	bne.w	8007034 <__aeabi_dmul+0x1f8>
 800725e:	e712      	b.n	8007086 <__aeabi_dmul+0x24a>

08007260 <__aeabi_d2f>:
 8007260:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007264:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007268:	bf24      	itt	cs
 800726a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800726e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007272:	d90d      	bls.n	8007290 <__aeabi_d2f+0x30>
 8007274:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007278:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800727c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007280:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007284:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007288:	bf08      	it	eq
 800728a:	f020 0001 	biceq.w	r0, r0, #1
 800728e:	4770      	bx	lr
 8007290:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007294:	d121      	bne.n	80072da <__aeabi_d2f+0x7a>
 8007296:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800729a:	bfbc      	itt	lt
 800729c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80072a0:	4770      	bxlt	lr
 80072a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80072a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80072aa:	f1c2 0218 	rsb	r2, r2, #24
 80072ae:	f1c2 0c20 	rsb	ip, r2, #32
 80072b2:	fa10 f30c 	lsls.w	r3, r0, ip
 80072b6:	fa20 f002 	lsr.w	r0, r0, r2
 80072ba:	bf18      	it	ne
 80072bc:	f040 0001 	orrne.w	r0, r0, #1
 80072c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80072c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80072c8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80072cc:	ea40 000c 	orr.w	r0, r0, ip
 80072d0:	fa23 f302 	lsr.w	r3, r3, r2
 80072d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072d8:	e7cc      	b.n	8007274 <__aeabi_d2f+0x14>
 80072da:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80072de:	d107      	bne.n	80072f0 <__aeabi_d2f+0x90>
 80072e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80072e4:	bf1e      	ittt	ne
 80072e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80072ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80072ee:	4770      	bxne	lr
 80072f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80072f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80072f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop

08007300 <__errno>:
 8007300:	4b01      	ldr	r3, [pc, #4]	; (8007308 <__errno+0x8>)
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000328 	.word	0x20000328

0800730c <__libc_init_array>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <__libc_init_array+0x3c>)
 8007310:	4c0e      	ldr	r4, [pc, #56]	; (800734c <__libc_init_array+0x40>)
 8007312:	1ae4      	subs	r4, r4, r3
 8007314:	10a4      	asrs	r4, r4, #2
 8007316:	2500      	movs	r5, #0
 8007318:	461e      	mov	r6, r3
 800731a:	42a5      	cmp	r5, r4
 800731c:	d004      	beq.n	8007328 <__libc_init_array+0x1c>
 800731e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007322:	4798      	blx	r3
 8007324:	3501      	adds	r5, #1
 8007326:	e7f8      	b.n	800731a <__libc_init_array+0xe>
 8007328:	f7fb f80c 	bl	8002344 <_init>
 800732c:	4c08      	ldr	r4, [pc, #32]	; (8007350 <__libc_init_array+0x44>)
 800732e:	4b09      	ldr	r3, [pc, #36]	; (8007354 <__libc_init_array+0x48>)
 8007330:	1ae4      	subs	r4, r4, r3
 8007332:	10a4      	asrs	r4, r4, #2
 8007334:	2500      	movs	r5, #0
 8007336:	461e      	mov	r6, r3
 8007338:	42a5      	cmp	r5, r4
 800733a:	d004      	beq.n	8007346 <__libc_init_array+0x3a>
 800733c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007340:	4798      	blx	r3
 8007342:	3501      	adds	r5, #1
 8007344:	e7f8      	b.n	8007338 <__libc_init_array+0x2c>
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	2000032c 	.word	0x2000032c
 800734c:	2000032c 	.word	0x2000032c
 8007350:	2000032c 	.word	0x2000032c
 8007354:	2000032c 	.word	0x2000032c

08007358 <memcpy>:
 8007358:	b510      	push	{r4, lr}
 800735a:	1e43      	subs	r3, r0, #1
 800735c:	440a      	add	r2, r1
 800735e:	4291      	cmp	r1, r2
 8007360:	d004      	beq.n	800736c <memcpy+0x14>
 8007362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800736a:	e7f8      	b.n	800735e <memcpy+0x6>
 800736c:	bd10      	pop	{r4, pc}

0800736e <memset>:
 800736e:	4402      	add	r2, r0
 8007370:	4603      	mov	r3, r0
 8007372:	4293      	cmp	r3, r2
 8007374:	d002      	beq.n	800737c <memset+0xe>
 8007376:	f803 1b01 	strb.w	r1, [r3], #1
 800737a:	e7fa      	b.n	8007372 <memset+0x4>
 800737c:	4770      	bx	lr
	...

08007380 <__PWM_SVM_SVMUpdate_veneer>:
 8007380:	b401      	push	{r0}
 8007382:	4802      	ldr	r0, [pc, #8]	; (800738c <__PWM_SVM_SVMUpdate_veneer+0xc>)
 8007384:	4684      	mov	ip, r0
 8007386:	bc01      	pop	{r0}
 8007388:	4760      	bx	ip
 800738a:	bf00      	nop
 800738c:	10000c01 	.word	0x10000c01

08007390 <g_xmc_vadc_group_array>:
 8007390:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

080073a0 <UART_0_channel_config>:
 80073a0:	0001c200 04010808 00000000              ............

080073ac <UART_0_tx_pin_config>:
 80073ac:	000000d0 00000001 00000004              ............

080073b8 <UART_0_tx_pin>:
 80073b8:	48028200 0000000e 080073ac              ...H.....s..

080073c4 <UART_0_config>:
 80073c4:	080073a0 080029ad 08006795 080067a1     .s...)...g...g..
	...
 80073e8:	080073b8 00000001 00000100              .s..........

080073f4 <SPI_enkoder_MOSI>:
 80073f4:	48028100 00000005                       ...H....

080073fc <SPI_enkoder_MISO>:
 80073fc:	48028100 00000004                       ...H....

08007404 <SPI_enkoder_SCLKOUT>:
 8007404:	48028100 0000000a                       ...H....

0800740c <SPI_enkoder_SCLKOUT_Config>:
 800740c:	00000090 00000001 00000001 00000000     ................
 800741c:	00000000                                ....

08007420 <SPI_enkoder_SS_0>:
 8007420:	48028100 00000008                       ...H....

08007428 <SPI_enkoder_SS_0_Config>:
 8007428:	00000090 00000001 00000001 00000000     ................
 8007438:	00020000                                ....

0800743c <SPI_enkoder_SS_1>:
 800743c:	48028100 0000000b                       ...H....

08007444 <SPI_enkoder_Config>:
 8007444:	2000005c 08003df5 080073f4 20000034     \.. .=...s..4.. 
 8007454:	080073fc 20000360 00000000 00000000     .s..`.. ........
	...
 800746c:	08007404 0800740c 08007420 0800743c     .t...t.. t..<t..
	...
 8007494:	08007428 20000048 00000000 00000000     (t..H.. ........
	...
 80074c0:	00000303 00000000 02000202 00000002     ................

080074d0 <SVPWM_PhUHighPin>:
 80074d0:	48028000 00000003                       ...H....

080074d8 <SVPWM_PhULowPin>:
 80074d8:	48028000 00000000                       ...H....

080074e0 <SVPWM_PhVHighPin>:
 80074e0:	48028000 00000004                       ...H....

080074e8 <SVPWM_PhVLowPin>:
 80074e8:	48028000 00000001                       ...H....

080074f0 <SVPWM_PhWHighPin>:
 80074f0:	48028000 00000005                       ...H....

080074f8 <SVPWM_PhWLowPin>:
 80074f8:	48028000 00000002                       ...H....

08007500 <SVPWM_PhUHiOutPinConf>:
 8007500:	00000098 00010000 00000000              ............

0800750c <SVPWM_PhULoOutPinConf>:
 800750c:	00000098 00010000 00000000              ............

08007518 <SVPWM_PhVHiOutPinConf>:
 8007518:	00000098 00010000 00000000              ............

08007524 <SVPWM_PhVLoOutPinConf>:
 8007524:	00000098 00010000 00000000              ............

08007530 <SVPWM_PhWHiOutPinConf>:
 8007530:	00000098 00010000 00000000              ............

0800753c <SVPWM_PhWLoOutPinConf>:
 800753c:	00000098 00010000 00000000              ............

08007548 <SVPWM_InverterPin>:
 8007548:	48028100 00000001                       ...H....

08007550 <SVPWM_InvPinConf>:
 8007550:	00000080 00010000 00000000              ............

0800755c <SVPWM_TrapPin>:
 800755c:	48028000 00000007                       ...H....

08007564 <SVPWM_TrapPinConf>:
 8007564:	00000000 00010000 00000000              ............

08007570 <SVPWM_TrapConfig>:
 8007570:	00010000                                ....

08007574 <SVPWM_PhU>:
 8007574:	40020300 00000002                       ...@....

0800757c <SVPWM_PhV>:
 800757c:	40020200 00000001                       ...@....

08007584 <SVPWM_PhW>:
 8007584:	40020100 00000000                       ...@....

0800758c <SVPWM_CurrentTrig>:
 800758c:	40020400 00000003                       ...@....

08007594 <SVPWM_StartConfig>:
 8007594:	00000107                                ....

08007598 <SVPWM_TimerInitHandle>:
 8007598:	00000001 00000000 00000014 00000000     ................

080075a8 <SVPWM_TimerInit_CurrentTrig>:
 80075a8:	20000001 0000000f 00000000 00000000     ... ............

080075b8 <SVPWM_AppConfig>:
 80075b8:	4002023c 4002013c 01000000 01000000     <..@<..@........
 80075c8:	01020002 00010101 00004650 07270e00     ........PF....'.
 80075d8:	00000100 00001111 00000000 00000000     ................
 80075e8:	00000000 00000002 03938700 00000727     ............'...
 80075f8:	00d00000 01000001 00000000              ............

08007604 <Sinus60_tab>:
 8007604:	00210000 00640043 00a70086 00ea00c9     ..!.C.d.........
 8007614:	012d010c 0170014f 01b30192 01f601d5     ..-.O.p.........
 8007624:	02390218 027c025b 02bf029e 030202e1     ..9.[.|.........
 8007634:	03450324 03880367 03cb03aa 040e03ed     $.E.g...........
 8007644:	04510430 04940473 04d704b6 051a04f9     0.Q.s...........
 8007654:	055d053b 05a0057e 05e305c1 06260604     ;.].~.........&.
 8007664:	06690647 06ac068a 06ef06cd 07320710     G.i...........2.
 8007674:	07740753 07b70796 07fa07d9 083d081c     S.t...........=.
 8007684:	0880085f 08c308a1 090608e4 09490927     _...........'.I.
 8007694:	098b096a 09ce09ad 0a1109f0 0a540a32     j...........2.T.
 80076a4:	0a970a75 0ad90ab8 0b1c0afb 0b5f0b3e     u...........>._.
 80076b4:	0ba20b80 0be40bc3 0c270c06 0c6a0c49     ..........'.I.j.
 80076c4:	0cad0c8b 0cef0cce 0d320d11 0d750d53     ..........2.S.u.
 80076d4:	0db70d96 0dfa0dd9 0e3c0e1b 0e7f0e5e     ..........<.^...
 80076e4:	0ec20ea0 0f040ee3 0f470f25 0f890f68     ........%.G.h...
 80076f4:	0fcc0fab 100e0fed 10511030 10931072     ........0.Q.r...
 8007704:	10d610b4 111810f7 115b1139 119d117c     ........9.[.|...
 8007714:	11df11be 12221200 12641243 12a61285     ......".C.d.....
 8007724:	12e912c7 132b130a 136d134c 13af138e     ......+.L.m.....
 8007734:	13f213d0 14341413 14761455 14b81497     ......4.U.v.....
 8007744:	14fa14d9 153c151b 157e155d 15c0159f     ......<.].~.....
 8007754:	160215e1 16441623 16861665 16c816a7     ....#.D.e.......
 8007764:	170a16e9 174c172b 178e176d 17d017af     ....+.L.m.......
 8007774:	181217f1 18541833 18951875 18d718b6     ....3.T.u.......
 8007784:	191918f8 195b193a 199c197b 19de19bd     ....:.[.{.......
 8007794:	1a2019ff 1a611a40 1aa31a82 1ae41ac3     .. .@.a.........
 80077a4:	1b261b05 1b671b46 1ba91b88 1bea1bc9     ..&.F.g.........
 80077b4:	1c2b1c0b 1c6d1c4c 1cae1c8e 1cef1ccf     ..+.L.m.........
 80077c4:	1d311d10 1d721d51 1db31d93 1df41dd4     ..1.Q.r.........
 80077d4:	1e351e15 1e771e56 1eb81e97 1ef91ed8     ..5.V.w.........
 80077e4:	1f3a1f19 1f7b1f5a 1fbc1f9b 1ffd1fdc     ..:.Z.{.........
 80077f4:	203d201d 207e205e 20bf209f 210020df     . = ^ ~ . . . .!
 8007804:	21412120 21812161 21c221a2 220321e2      !A!a!.!.!.!.!."
 8007814:	22432223 22842263 22c422a4 230522e4     #"C"c".".".".".#
 8007824:	23452325 23862365 23c623a6 240623e6     %#E#e#.#.#.#.#.$
 8007834:	24472426 24872467 24c724a7 250724e7     &$G$g$.$.$.$.$.%
 8007844:	25472527 25872567 25c725a7 260725e7     '%G%g%.%.%.%.%.&
 8007854:	26472627 26872667 26c726a7 270726e7     '&G&g&.&.&.&.&.'
 8007864:	27472727 27872767 27c627a7 280627e6     ''G'g'.'.'.'.'.(
 8007874:	28462826 28852866 28c528a5 290428e5     &(F(f(.(.(.(.(.)
 8007884:	29442924 29832964 29c329a3 2a0229e2     $)D)d).).).).).*
 8007894:	2a412a22 2a802a61 2ac02aa0 2aff2adf     "*A*a*.*.*.*.*.*
 80078a4:	2b3e2b1e 2b7d2b5d 2bbc2b9c 2bfb2bdb     .+>+]+}+.+.+.+.+
 80078b4:	2c3a2c1a 2c792c59 2cb82c98 2cf62cd7     .,:,Y,y,.,.,.,.,
 80078c4:	2d352d16 2d742d54 2db22d93 2df12dd2     .-5-T-t-.-.-.-.-
 80078d4:	2e2f2e10 2e6e2e4f 2eac2e8d 2eeb2ecc     ../.O.n.........
 80078e4:	2f292f0a 2f672f48 2fa62f86 2fe42fc5     ./)/H/g/././././
 80078f4:	30223003 30603041 309e307f 30dc30bd     .0"0A0`0.0.0.0.0
 8007904:	311a30fb 31583139 31963177 31d331b4     .0.191X1w1.1.1.1
 8007914:	321131f2 324f3230 328c326d 32ca32ab     .1.202O2m2.2.2.2
 8007924:	330732e9 33453326 33823363 33bf33a1     .2.3&3E3c3.3.3.3
 8007934:	33fd33de 343a341b 34773458 34b43496     .3.3.4:4X4w4.4.4
 8007944:	34f134d3 352e3510 356b354d 35a8358a     .4.4.5.5M5k5.5.5
 8007954:	35e535c6 36223603 365e3640 369b367d     .5.5.6"6@6^6}6.6
 8007964:	36d736b9 371436f6 37503732 378d376f     .6.6.6.727P7o7.7
 8007974:	37c937ab 380637e7 38423824 387e3860     .7.7.7.8$8B8`8~8
 8007984:	38ba389c 38f638d8 39323914 396e3950     .8.8.8.8.929P9n9
 8007994:	39aa398c 39e639c8 3a213a04 3a5d3a3f     .9.9.9.9.:!:?:]:
 80079a4:	3a993a7b 3ad43ab6 3b103af2 3b4b3b2d     {:.:.:.:.:.;-;K;
 80079b4:	3b863b69 3bc23ba4 3bfd3bdf 3c383c1b     i;.;.;.;.;.;.<8<
 80079c4:	3c733c56 3cae3c91 3ce93ccc 3d243d07     V<s<.<.<.<.<.=$=
 80079d4:	3d5f3d42 3d9a3d7c 3dd53db7 3e0f3df2     B=_=|=.=.=.=.=.>
 80079e4:	3e4a3e2c 3e843e67 3ebf3ea2 3ef93edc     ,>J>g>.>.>.>.>.>
 80079f4:	3f333f16 3f6e3f51 3fa83f8b 3fe23fc5     .?3?Q?n?.?.?.?.?
 8007a04:	401c3fff 40564039 40904073 40ca40ad     .?.@9@V@s@.@.@.@
 8007a14:	410340e7 413d4120 4177415a 41b04194     .@.A A=AZAwA.A.A
 8007a24:	41ea41cd 42234207 425d4240 42964279     .A.A.B#B@B]ByB.B
 8007a34:	42cf42b2 430842ec 43414325 437a435e     .B.B.B.C%CAC^CzC
 8007a44:	43b34397 43ec43d0 44254408 445d4441     .C.C.C.C.D%DAD]D
 8007a54:	4496447a 44cf44b2 450744eb 453f4523     zD.D.D.D.D.E#E?E
 8007a64:	4578455c 45b04594 45e845cc 46204604     \ExE.E.E.E.E.F F
 8007a74:	4658463c 46904674 46c846ac 470046e4     <FXFtF.F.F.F.F.G
 8007a84:	4738471c 476f4754 47a7478b 47de47c3     .G8GTGoG.G.G.G.G
 8007a94:	481647fa 484d4832 48844869 48bc48a0     .G.H2HMHiH.H.H.H
 8007aa4:	48f348d7 492a490e 49614945 4998497c     .H.H.I*IEIaI|I.I
 8007ab4:	49ce49b3 4a0549ea 4a3c4a20 4a724a57     .I.I.I.J J<JWJrJ
 8007ac4:	4aa94a8e 4adf4ac4 4b154afa 4b4c4b31     .J.J.J.J.J.K1KLK
 8007ad4:	4b824b67 4bb84b9d 4bee4bd3 4c244c09     gK.K.K.K.K.K.L$L
 8007ae4:	4c5a4c3f 4c8f4c75 4cc54caa 4cfb4ce0     ?LZLuL.L.L.L.L.L
 8007af4:	4d304d15 4d664d4b 4d9b4d80 4dd04db6     .M0MKMfM.M.M.M.M
 8007b04:	4e054deb 4e3a4e20 4e6f4e55 4ea44e8a     .M.N N:NUNoN.N.N
 8007b14:	4ed94ebf 4f0e4ef4 4f434f28 4f774f5d     .N.N.N.O(OCO]OwO
 8007b24:	4fac4f91 4fe04fc6 50144ffa 5049502f     .O.O.O.O.O.P/PIP
 8007b34:	507d5063 50b15097 50e550cb 511950ff     cP}P.P.P.P.P.P.Q
 8007b44:	514d5133 51805166 51b4519a 51e751ce     3QMQfQ.Q.Q.Q.Q.Q
 8007b54:	521b5201 524e5235 52825268 52b5529b     .R.R5RNRhR.R.R.R
 8007b64:	52e852ce 531b5301 534e5334 53815367     .R.R.S.S4SNSgS.S
 8007b74:	53b3539a 53e653cd 541953ff 544b5432     .S.S.S.S.S.T2TKT
 8007b84:	547d5464 54b05497 54e254c9 551454fb     dT}T.T.T.T.T.T.U
 8007b94:	5546552d 5578555f 55aa5591 55dc55c3     -UFU_UxU.U.U.U.U
 8007ba4:	560d55f4 563f5626 56705658 56a25689     .U.V&V?VXVpV.V.V
 8007bb4:	56d356ba 570456ec 5735571d 5766574e     .V.V.V.W.W5WNWfW
 8007bc4:	5797577f 57c857b0 57f957e0 58295811     .W.W.W.W.W.W.X)X
 8007bd4:	585a5842 588a5872 58bb58a3 58eb58d3     BXZXrX.X.X.X.X.X
 8007be4:	591b5903 594b5933 597b5963 59ab5993     .Y.Y3YKYcY{Y.Y.Y
 8007bf4:	59db59c3 5a0a59f3 5a3a5a22 5a6a5a52     .Y.Y.Y.Z"Z:ZRZjZ
 8007c04:	5a995a81 5ac85ab1 5af75ae0 5b275b0f     .Z.Z.Z.Z.Z.Z.['[
 8007c14:	5b565b3e 5b845b6d 5bb35b9c 5be25bcb     >[V[m[.[.[.[.[.[
 8007c24:	5c115bf9 5c3f5c28 5c6d5c56 5c9c5c85     .[.\(\?\V\m\.\.\
 8007c34:	5cca5cb3 5cf85ce1 5d265d0f 5d545d3d     .\.\.\.\.]&]=]T]
 8007c44:	5d825d6b 5db05d99 5ddd5dc6 5e0b5df4     k].].].].].].].^
 8007c54:	5e385e21 5e655e4f 5e935e7c 5ec05ea9     !^8^O^e^|^.^.^.^
 8007c64:	5eed5ed6 5f1a5f03 5f465f30 5f735f5d     .^.^._._0_F_]_s_
 8007c74:	5fa05f89 5fcc5fb6 5ff95fe2 6025600f     ._._._._._._.`%`
 8007c84:	6051603b 607d6067 60a96093 60d560bf     ;`Q`g`}`.`.`.`.`
 8007c94:	610160eb 612c6117 61586142 6184616e     .`.a.a,aBaXana.a
 8007ca4:	61af6199 61da61c5 620561f0 6230621b     .a.a.a.a.a.b.b0b
 8007cb4:	625b6246 62866271 62b1629b 62db62c6     Fb[bqb.b.b.b.b.b
 8007cc4:	630662f1 6330631b 635b6346 63856370     .b.c.c0cFc[cpc.c
 8007cd4:	63af639a 63d963c4 640363ee 642d6418     .c.c.c.c.c.d.d-d
 8007ce4:	64566441 6480646b 64a96495 64d364be     AdVdkd.d.d.d.d.d
 8007cf4:	64fc64e7 65256510 654e6539 65776562     .d.d.e%e9eNebewe
 8007d04:	65a0658b 65c865b4 65f165dd 66196605     .e.e.e.e.e.e.f.f
 8007d14:	6642662e 666a6656 6692667e 66ba66a6     .fBfVfjf~f.f.f.f
 8007d24:	66e266ce 670a66f6 6732671e 67596745     .f.f.f.g.g2gEgYg
 8007d34:	6781676d 67a86794 67cf67bc 67f667e3     mg.g.g.g.g.g.g.g
 8007d44:	681e680a 68446831 686b6858 6892687f     .h.h1hDhXhkh.h.h
 8007d54:	68b968a5 68df68cc 690568f2 692c6919     .h.h.h.h.h.i.i,i
 8007d64:	6952693f 69786965 699e698b 69c469b1     ?iRieixi.i.i.i.i
 8007d74:	69e969d6 6a0f69fc 6a346a22 6a5a6a47     .i.i.i.j"j4jGjZj
 8007d84:	6a7f6a6c 6aa46a91 6ac96ab6 6aee6adb     lj.j.j.j.j.j.j.j
 8007d94:	6b136b00 6b376b25 6b5c6b4a 6b806b6e     .k.k%k7kJk\knk.k
 8007da4:	6ba56b92 6bc96bb7 6bed6bdb 6c116bff     .k.k.k.k.k.k.k.l
 8007db4:	6c356c23 6c586c47 6c7c6c6a 6ca06c8e     #l5lGlXljl|l.l.l
 8007dc4:	6cc36cb1 6ce66cd5 6d096cf8 6d2c6d1b     .l.l.l.l.l.m.m,m
 8007dd4:	6d4f6d3e 6d726d61 6d956d84 6db76da6     >mOmamrm.m.m.m.m
 8007de4:	6dda6dc9 6dfc6deb 6e1e6e0d 6e416e30     .m.m.m.m.n.n0nAn
 8007df4:	6e636e52 6e846e73 6ea66e95 6ec86eb7     Rncnsn.n.n.n.n.n
 8007e04:	00006ed9                                .n..

08007e08 <MOTOR_LIB_E>:
 8007e08:	20000000 12e4051d 09fb385b 051111d4     ... ....[8......
 8007e18:	028b0d43 0145d7e1 00a2f61e 00517c55     C.....E.....U|Q.
 8007e28:	0028be53 00145f2e 000a2f98 000517cc     S.(.._.../......
 8007e38:	00028be6 000145f3 0000a2f9 0000517c     .....E......|Q..
 8007e48:	000028be 0000145f 00000a2f 00000517     .(.._.../.......
 8007e58:	0000028b 00000145 000000a2              ....E.......

08007e64 <INTERRUPT_0>:
 8007e64:	0100013e                                >...

08007e68 <TIM_IRQ>:
 8007e68:	01000139                                9...

08007e6c <group_init_handle0>:
	...

08007e80 <group_init_handle1>:
	...

08007e94 <group_init_handle2>:
	...

08007ea8 <group_init_handle3>:
	...

08007ebc <global_config>:
 8007ebc:	00000000 00000003 00000000 00000000     ................
	...

08007ed4 <LED>:
 8007ed4:	48028100 00000080 00010000 00000004     ...H............
 8007ee4:	00000000                                ....

08007ee8 <DC_CAL>:
 8007ee8:	48028000 00000080 00010000 00000000     ...H............
 8007ef8:	00000006                                ....

08007efc <SIGNAL>:
 8007efc:	48028300 00000080 00010000 00000000     ...H............
 8007f0c:	00000001 01040250 00010000 00000000     ....P...........
 8007f1c:	00010000 01010101                       ........

08007f24 <ADC_QUEUE_0_reqsrc_config_0>:
 8007f24:	00000013 00000002 00000000 00000001     ................

08007f34 <ADC_QUEUE_0_init_config_0>:
 8007f34:	0000000c 00004800 00000004              .....H......

08007f40 <ADC_QUEUE_1_reqsrc_config_1>:
 8007f40:	00000019 00000002 00000000 00000001     ................

08007f50 <ADC_QUEUE_1_init_config_1>:
 8007f50:	0000000c 00004800 00000004              .....H......

08007f5c <ADC_QUEUE_2_reqsrc_config_2>:
 8007f5c:	0000001a 00000002 00000000 00000001     ................

08007f6c <ADC_QUEUE_2_init_config_2>:
 8007f6c:	0000000c 00004800 00000004              .....H......

08007f78 <group_ptrs>:
 8007f78:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08007f88 <ADC_U_Channel_A_ch_config>:
 8007f88:	002f0400 00000000 0000ff01              ../.........

08007f94 <ADC_U_Channel_A_res_config>:
 8007f94:	80000000                                ....

08007f98 <ADC_U_Channel_A_handle>:
 8007f98:	08007f88 08007f94 00000000              ............

08007fa4 <ADC_U_Channel_A_queue_entry_0>:
 8007fa4:	00000000 01010000 00000000              ............

08007fb0 <ADC_U>:
 8007fb0:	20000294 20000290 08005a05 20000230     ... ... .Z..0.. 
 8007fc0:	20000298 01010002 00000001              ... ........

08007fcc <ADC_V_Channel_A_ch_config>:
 8007fcc:	00230000 00000000 0000ff01              ..#.........

08007fd8 <ADC_V_Channel_A_res_config>:
 8007fd8:	80000000                                ....

08007fdc <ADC_V_Channel_A_handle>:
 8007fdc:	08007fcc 08007fd8 00000201              ............

08007fe8 <ADC_V_Channel_A_queue_entry_0>:
 8007fe8:	00000000 01010200 00000000              ............

08007ff4 <ADC_V>:
 8007ff4:	200002a0 2000029c 08005a19 20000250     ... ... .Z..P.. 
 8008004:	200002a4 01010102 00000001              ... ........

08008010 <ADC_W_Channel_A_ch_config>:
 8008010:	00200400 00000000 0000ff01              .. .........

0800801c <ADC_W_Channel_A_res_config>:
 800801c:	80000000                                ....

08008020 <ADC_W_Channel_A_handle>:
 8008020:	08008010 0800801c 00000002              ............

0800802c <ADC_W_Channel_A_queue_entry_0>:
 800802c:	00000000 01010000 00000000              ............

08008038 <ADC_W>:
 8008038:	200002ac 200002a8 08005a2d 20000270     ... ... -Z..p.. 
 8008048:	200002b0 01010202 00000001 74727173     ... ........sqrt
 8008058:	00000066 00000043                       f...C...

Disassembly of section .ram_code:

10000800 <PWM_SVM_lSymCompValUpdate>:
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        (uint16_t)(HandlePtr->v_tb + (uint16_t)((uint16_t) HandlePtr->tb >> (uint16_t) 1) + (uint16_t) HandlePtr->ta));

}
static void PWM_SVM_lSymCompValUpdate(PWM_SVM_t* const HandlePtr)
{
10000800:	b480      	push	{r7}
10000802:	b083      	sub	sp, #12
10000804:	af00      	add	r7, sp, #0
10000806:	6078      	str	r0, [r7, #4]
  /*Update the compare register with appropriate value  based on sector*/
  switch ((HandlePtr->sector & 7U))
10000808:	687b      	ldr	r3, [r7, #4]
1000080a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
1000080e:	f003 0307 	and.w	r3, r3, #7
10000812:	2b04      	cmp	r3, #4
10000814:	f200 8086 	bhi.w	10000924 <__initial_sp+0x124>
10000818:	a201      	add	r2, pc, #4	; (adr r2, 10000820 <__initial_sp+0x20>)
1000081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000081e:	bf00      	nop
10000820:	10000835 	.word	0x10000835
10000824:	10000865 	.word	0x10000865
10000828:	10000895 	.word	0x10000895
1000082c:	100008c5 	.word	0x100008c5
10000830:	100008f5 	.word	0x100008f5
    {
    case 0:/*sector 0*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
10000834:	687b      	ldr	r3, [r7, #4]
10000836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000838:	687a      	ldr	r2, [r7, #4]
1000083a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000083e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
10000840:	687b      	ldr	r3, [r7, #4]
10000842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10000844:	687a      	ldr	r2, [r7, #4]
10000846:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000084a:	4611      	mov	r1, r2
1000084c:	687a      	ldr	r2, [r7, #4]
1000084e:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
10000852:	440a      	add	r2, r1
10000854:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
10000856:	687b      	ldr	r3, [r7, #4]
10000858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000085a:	687a      	ldr	r2, [r7, #4]
1000085c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000860:	601a      	str	r2, [r3, #0]
       break;
10000862:	e077      	b.n	10000954 <__initial_sp+0x154>
    case 1:/*sector 1*/
      *HandlePtr->phaseu_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->ta);
10000864:	687b      	ldr	r3, [r7, #4]
10000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000868:	687a      	ldr	r2, [r7, #4]
1000086a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000086e:	4611      	mov	r1, r2
10000870:	687a      	ldr	r2, [r7, #4]
10000872:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
10000876:	440a      	add	r2, r1
10000878:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb);
1000087a:	687b      	ldr	r3, [r7, #4]
1000087c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000087e:	687a      	ldr	r2, [r7, #4]
10000880:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000884:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
10000886:	687b      	ldr	r3, [r7, #4]
10000888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000088a:	687a      	ldr	r2, [r7, #4]
1000088c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000890:	601a      	str	r2, [r3, #0]
       break;
10000892:	e05f      	b.n	10000954 <__initial_sp+0x154>
    case 2:/*sector 2*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
10000894:	687b      	ldr	r3, [r7, #4]
10000896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000898:	687a      	ldr	r2, [r7, #4]
1000089a:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1000089e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_tb;
100008a0:	687b      	ldr	r3, [r7, #4]
100008a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100008a4:	687a      	ldr	r2, [r7, #4]
100008a6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008aa:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
100008ac:	687b      	ldr	r3, [r7, #4]
100008ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100008b0:	687a      	ldr	r2, [r7, #4]
100008b2:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008b6:	4611      	mov	r1, r2
100008b8:	687a      	ldr	r2, [r7, #4]
100008ba:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
100008be:	440a      	add	r2, r1
100008c0:	601a      	str	r2, [r3, #0]
       break;
100008c2:	e047      	b.n	10000954 <__initial_sp+0x154>
    case 3:/*sector 3*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
100008c4:	687b      	ldr	r3, [r7, #4]
100008c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100008c8:	687a      	ldr	r2, [r7, #4]
100008ca:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
100008ce:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t)( HandlePtr->v_tb+ HandlePtr->ta);
100008d0:	687b      	ldr	r3, [r7, #4]
100008d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100008d4:	687a      	ldr	r2, [r7, #4]
100008d6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008da:	4611      	mov	r1, r2
100008dc:	687a      	ldr	r2, [r7, #4]
100008de:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
100008e2:	440a      	add	r2, r1
100008e4:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
100008e6:	687b      	ldr	r3, [r7, #4]
100008e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100008ea:	687a      	ldr	r2, [r7, #4]
100008ec:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008f0:	601a      	str	r2, [r3, #0]
       break;
100008f2:	e02f      	b.n	10000954 <__initial_sp+0x154>
    case 4:/*sector 4*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->tb;
100008f4:	687b      	ldr	r3, [r7, #4]
100008f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100008f8:	687a      	ldr	r2, [r7, #4]
100008fa:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008fe:	4611      	mov	r1, r2
10000900:	687a      	ldr	r2, [r7, #4]
10000902:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
10000906:	440a      	add	r2, r1
10000908:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
1000090a:	687b      	ldr	r3, [r7, #4]
1000090c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000090e:	687a      	ldr	r2, [r7, #4]
10000910:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000914:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
10000916:	687b      	ldr	r3, [r7, #4]
10000918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000091a:	687a      	ldr	r2, [r7, #4]
1000091c:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000920:	601a      	str	r2, [r3, #0]
       break;
10000922:	e017      	b.n	10000954 <__initial_sp+0x154>
    default:/*sector 5*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
10000924:	687b      	ldr	r3, [r7, #4]
10000926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000928:	687a      	ldr	r2, [r7, #4]
1000092a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000092e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
10000930:	687b      	ldr	r3, [r7, #4]
10000932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10000934:	687a      	ldr	r2, [r7, #4]
10000936:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1000093a:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->ta;
1000093c:	687b      	ldr	r3, [r7, #4]
1000093e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10000940:	687a      	ldr	r2, [r7, #4]
10000942:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000946:	4611      	mov	r1, r2
10000948:	687a      	ldr	r2, [r7, #4]
1000094a:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1000094e:	440a      	add	r2, r1
10000950:	601a      	str	r2, [r3, #0]
      break;
10000952:	bf00      	nop
    }
}
10000954:	370c      	adds	r7, #12
10000956:	46bd      	mov	sp, r7
10000958:	f85d 7b04 	ldr.w	r7, [sp], #4
1000095c:	4770      	bx	lr
1000095e:	bf00      	nop

10000960 <PWM_SVM_CalCmpValueSym7>:

/**
 * This function calculates the CCU8 slice compare valuefor Symmetric 7-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym7(PWM_SVM_t* const HandlePtr)
{
10000960:	b580      	push	{r7, lr}
10000962:	b082      	sub	sp, #8
10000964:	af00      	add	r7, sp, #0
10000966:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < (uint16_t) HandlePtr->tmin)
10000968:	687b      	ldr	r3, [r7, #4]
1000096a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1000096e:	687b      	ldr	r3, [r7, #4]
10000970:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000974:	429a      	cmp	r2, r3
10000976:	d205      	bcs.n	10000984 <PWM_SVM_CalCmpValueSym7+0x24>
  {
    HandlePtr->ta = (uint16_t) HandlePtr->tmin;
10000978:	687b      	ldr	r3, [r7, #4]
1000097a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1000097e:	687b      	ldr	r3, [r7, #4]
10000980:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < (uint16_t) HandlePtr->tmin)
10000984:	687b      	ldr	r3, [r7, #4]
10000986:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
1000098a:	687b      	ldr	r3, [r7, #4]
1000098c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000990:	429a      	cmp	r2, r3
10000992:	d205      	bcs.n	100009a0 <PWM_SVM_CalCmpValueSym7+0x40>
  {
    HandlePtr->tb = (uint16_t) HandlePtr->tmin;
10000994:	687b      	ldr	r3, [r7, #4]
10000996:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1000099a:	687b      	ldr	r3, [r7, #4]
1000099c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }

  HandlePtr->v_ta = (uint16_t)(((uint32_t) HandlePtr->period + (uint16_t) HandlePtr->ta) + (uint16_t) HandlePtr->tb)
100009a0:	687b      	ldr	r3, [r7, #4]
100009a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100009a6:	b29a      	uxth	r2, r3
100009a8:	687b      	ldr	r3, [r7, #4]
100009aa:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
100009ae:	4413      	add	r3, r2
100009b0:	b29a      	uxth	r2, r3
100009b2:	687b      	ldr	r3, [r7, #4]
100009b4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
100009b8:	4413      	add	r3, r2
100009ba:	b29b      	uxth	r3, r3
100009bc:	085b      	lsrs	r3, r3, #1
100009be:	b29a      	uxth	r2, r3
100009c0:	687b      	ldr	r3, [r7, #4]
100009c2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
                     >> (uint16_t) 1;
  HandlePtr->v_tb = (uint16_t)((uint16_t) HandlePtr->period - ((uint16_t) HandlePtr->ta + (uint16_t) HandlePtr->tb))
100009c6:	687b      	ldr	r3, [r7, #4]
100009c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100009cc:	b29a      	uxth	r2, r3
100009ce:	687b      	ldr	r3, [r7, #4]
100009d0:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	; 0xae
100009d4:	687b      	ldr	r3, [r7, #4]
100009d6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
100009da:	440b      	add	r3, r1
100009dc:	b29b      	uxth	r3, r3
100009de:	1ad3      	subs	r3, r2, r3
100009e0:	b29b      	uxth	r3, r3
100009e2:	085b      	lsrs	r3, r3, #1
100009e4:	b29a      	uxth	r2, r3
100009e6:	687b      	ldr	r3, [r7, #4]
100009e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
100009ec:	6878      	ldr	r0, [r7, #4]
100009ee:	f7ff ff07 	bl	10000800 <PWM_SVM_lSymCompValUpdate>

}
100009f2:	3708      	adds	r7, #8
100009f4:	46bd      	mov	sp, r7
100009f6:	bd80      	pop	{r7, pc}

100009f8 <PWM_SVM_CalCmpValueSym5>:

/**
 * This function calculates the CCU8 slice compare value for Symmetric 5-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym5(PWM_SVM_t* const HandlePtr)
{
100009f8:	b580      	push	{r7, lr}
100009fa:	b082      	sub	sp, #8
100009fc:	af00      	add	r7, sp, #0
100009fe:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < HandlePtr->tmin)
10000a00:	687b      	ldr	r3, [r7, #4]
10000a02:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
10000a06:	687b      	ldr	r3, [r7, #4]
10000a08:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000a0c:	429a      	cmp	r2, r3
10000a0e:	d205      	bcs.n	10000a1c <PWM_SVM_CalCmpValueSym5+0x24>
  {
    HandlePtr->ta = HandlePtr->tmin;
10000a10:	687b      	ldr	r3, [r7, #4]
10000a12:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
10000a16:	687b      	ldr	r3, [r7, #4]
10000a18:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < HandlePtr->tmin)
10000a1c:	687b      	ldr	r3, [r7, #4]
10000a1e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
10000a22:	687b      	ldr	r3, [r7, #4]
10000a24:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000a28:	429a      	cmp	r2, r3
10000a2a:	d205      	bcs.n	10000a38 <PWM_SVM_CalCmpValueSym5+0x40>
  {
    HandlePtr->tb = HandlePtr->tmin;
10000a2c:	687b      	ldr	r3, [r7, #4]
10000a2e:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
10000a32:	687b      	ldr	r3, [r7, #4]
10000a34:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }
  HandlePtr->v_ta = (uint16_t) HandlePtr->period + 1U;
10000a38:	687b      	ldr	r3, [r7, #4]
10000a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000a3e:	b29b      	uxth	r3, r3
10000a40:	3301      	adds	r3, #1
10000a42:	b29a      	uxth	r2, r3
10000a44:	687b      	ldr	r3, [r7, #4]
10000a46:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  HandlePtr->v_tb = ((uint16_t) HandlePtr->period - HandlePtr->ta) - HandlePtr->tb;
10000a4a:	687b      	ldr	r3, [r7, #4]
10000a4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000a50:	b29a      	uxth	r2, r3
10000a52:	687b      	ldr	r3, [r7, #4]
10000a54:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000a58:	1ad3      	subs	r3, r2, r3
10000a5a:	b29a      	uxth	r2, r3
10000a5c:	687b      	ldr	r3, [r7, #4]
10000a5e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000a62:	1ad3      	subs	r3, r2, r3
10000a64:	b29a      	uxth	r2, r3
10000a66:	687b      	ldr	r3, [r7, #4]
10000a68:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
10000a6c:	6878      	ldr	r0, [r7, #4]
10000a6e:	f7ff fec7 	bl	10000800 <PWM_SVM_lSymCompValUpdate>
}
10000a72:	3708      	adds	r7, #8
10000a74:	46bd      	mov	sp, r7
10000a76:	bd80      	pop	{r7, pc}

10000a78 <PWM_SVM_TimecalcUsingLUT>:
#if(1U == PWM_SVM_IS_LUT_ENABLE)
/*
 * SVM Segment Time calculation using Look up table
 */
void PWM_SVM_TimecalcUsingLUT(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
10000a78:	b480      	push	{r7}
10000a7a:	b08b      	sub	sp, #44	; 0x2c
10000a7c:	af00      	add	r7, sp, #0
10000a7e:	60f8      	str	r0, [r7, #12]
10000a80:	460b      	mov	r3, r1
10000a82:	607a      	str	r2, [r7, #4]
10000a84:	817b      	strh	r3, [r7, #10]
  uint16_t ta_tb,ta;
  uint32_t Dividend_Sine, Divisor_Sine;        /*Ts x sin(θrel), sin(θrel)+sin(60°-θrel)*/
  XMC_ASSERT("PWM_SVM_lTimecalcUsingLUT:NULL Handle Pointer",
      (HandlePtr != (PWM_SVM_t *)NULL));

  angletemp = (uint32_t)((Angle & (uint32_t)0xFFFFFF) >> 14U) * 6U;
10000a86:	687b      	ldr	r3, [r7, #4]
10000a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
10000a8c:	0b9a      	lsrs	r2, r3, #14
10000a8e:	4613      	mov	r3, r2
10000a90:	005b      	lsls	r3, r3, #1
10000a92:	4413      	add	r3, r2
10000a94:	005b      	lsls	r3, r3, #1
10000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HandlePtr->sector_angle = (uint32_t)(angletemp & (uint32_t) 0x003FF);
10000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000a9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
10000a9e:	68fb      	ldr	r3, [r7, #12]
10000aa0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  HandlePtr->sector = (uint32_t)((angletemp >> 10U) & 7U);
10000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000aa6:	0a9b      	lsrs	r3, r3, #10
10000aa8:	f003 0207 	and.w	r2, r3, #7
10000aac:	68fb      	ldr	r3, [r7, #12]
10000aae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  if ((uint16_t)Amplitude > (HandlePtr->max_amplitude))
10000ab2:	68fb      	ldr	r3, [r7, #12]
10000ab4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
10000ab8:	897a      	ldrh	r2, [r7, #10]
10000aba:	429a      	cmp	r2, r3
10000abc:	d903      	bls.n	10000ac6 <PWM_SVM_TimecalcUsingLUT+0x4e>
  {
    Amplitude = HandlePtr->max_amplitude;
10000abe:	68fb      	ldr	r3, [r7, #12]
10000ac0:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
10000ac4:	817b      	strh	r3, [r7, #10]
  }
  HandlePtr->tb = (uint16_t)((Amplitude* Sinus60_tab[1023U - HandlePtr->sector_angle])>> 15U);
10000ac6:	897a      	ldrh	r2, [r7, #10]
10000ac8:	68fb      	ldr	r3, [r7, #12]
10000aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000ace:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
10000ad2:	3303      	adds	r3, #3
10000ad4:	4949      	ldr	r1, [pc, #292]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000ad6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
10000ada:	fb03 f302 	mul.w	r3, r3, r2
10000ade:	13db      	asrs	r3, r3, #15
10000ae0:	b29a      	uxth	r2, r3
10000ae2:	68fb      	ldr	r3, [r7, #12]
10000ae4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  HandlePtr->tb = (uint16_t)((HandlePtr->tb * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
10000ae8:	68fb      	ldr	r3, [r7, #12]
10000aea:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000aee:	461a      	mov	r2, r3
10000af0:	68fb      	ldr	r3, [r7, #12]
10000af2:	681b      	ldr	r3, [r3, #0]
10000af4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
10000af8:	fb03 f302 	mul.w	r3, r3, r2
10000afc:	129b      	asrs	r3, r3, #10
10000afe:	b29a      	uxth	r2, r3
10000b00:	68fb      	ldr	r3, [r7, #12]
10000b02:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

  HandlePtr->ta = (uint16_t)((Amplitude* Sinus60_tab[HandlePtr->sector_angle])>> 15U);
10000b06:	897b      	ldrh	r3, [r7, #10]
10000b08:	68fa      	ldr	r2, [r7, #12]
10000b0a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
10000b0e:	493b      	ldr	r1, [pc, #236]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
10000b14:	fb02 f303 	mul.w	r3, r2, r3
10000b18:	13db      	asrs	r3, r3, #15
10000b1a:	b29a      	uxth	r2, r3
10000b1c:	68fb      	ldr	r3, [r7, #12]
10000b1e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  HandlePtr->ta = (uint16_t)((HandlePtr->ta * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
10000b22:	68fb      	ldr	r3, [r7, #12]
10000b24:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000b28:	461a      	mov	r2, r3
10000b2a:	68fb      	ldr	r3, [r7, #12]
10000b2c:	681b      	ldr	r3, [r3, #0]
10000b2e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
10000b32:	fb03 f302 	mul.w	r3, r3, r2
10000b36:	129b      	asrs	r3, r3, #10
10000b38:	b29a      	uxth	r2, r3
10000b3a:	68fb      	ldr	r3, [r7, #12]
10000b3c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ta_tb = HandlePtr->ta + HandlePtr->tb;
10000b40:	68fb      	ldr	r3, [r7, #12]
10000b42:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
10000b46:	68fb      	ldr	r3, [r7, #12]
10000b48:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000b4c:	4413      	add	r3, r2
10000b4e:	847b      	strh	r3, [r7, #34]	; 0x22
  HandlePtr->t0 = (uint16_t)(HandlePtr->period - ta_tb);
10000b50:	68fb      	ldr	r3, [r7, #12]
10000b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b56:	b29a      	uxth	r2, r3
10000b58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10000b5a:	1ad3      	subs	r3, r2, r3
10000b5c:	b29a      	uxth	r2, r3
10000b5e:	68fb      	ldr	r3, [r7, #12]
10000b60:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  if (ta_tb > (HandlePtr->period))
10000b64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
10000b66:	68fb      	ldr	r3, [r7, #12]
10000b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b6c:	429a      	cmp	r2, r3
10000b6e:	d93f      	bls.n	10000bf0 <PWM_SVM_TimecalcUsingLUT+0x178>
  {
    if (HandlePtr->over_modulation_enable == 1U)
10000b70:	68fb      	ldr	r3, [r7, #12]
10000b72:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
10000b76:	2b01      	cmp	r3, #1
10000b78:	d13a      	bne.n	10000bf0 <PWM_SVM_TimecalcUsingLUT+0x178>
      /* Above Ta and Tb are not used for SVM PWM.*/

      /* Calculate new T1 and T2 of maximum Vref on SVM Hexagon edges,
       * where T0 = 0 (i.e.: T1+T2 = PERIOD_REG). Relative angle θrel kept the same.
       */
      Dividend_Sine = HandlePtr->period * Sinus60_tab[HandlePtr->sector_angle];
10000b7a:	68fb      	ldr	r3, [r7, #12]
10000b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b80:	68fa      	ldr	r2, [r7, #12]
10000b82:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
10000b86:	491d      	ldr	r1, [pc, #116]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
10000b8c:	fb02 f303 	mul.w	r3, r2, r3
10000b90:	61fb      	str	r3, [r7, #28]
      Divisor_Sine  = Sinus60_tab[HandlePtr->sector_angle] + Sinus60_tab[1023U - HandlePtr->sector_angle];
10000b92:	68fb      	ldr	r3, [r7, #12]
10000b94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000b98:	4a18      	ldr	r2, [pc, #96]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
10000b9e:	4619      	mov	r1, r3
10000ba0:	68fb      	ldr	r3, [r7, #12]
10000ba2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000ba6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
10000baa:	3303      	adds	r3, #3
10000bac:	4a13      	ldr	r2, [pc, #76]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
10000bb2:	440b      	add	r3, r1
10000bb4:	61bb      	str	r3, [r7, #24]
      /* Unsigned Div. Dividend << SHIFT_OVERMODULATION, Quotient >> SHIFT_OVERMODULATION, Divisor no shift.*/
      MATH->DIVCON = (0x00008004 | (PWM_SVM_SHIFT_OVERMODULATION << 16U) | (PWM_SVM_SHIFT_OVERMODULATION << 8U));
      MATH->DVD = Dividend_Sine;
      MATH->DVS = Divisor_Sine;
      #else
      ta = (uint16_t)(Dividend_Sine/Divisor_Sine);
10000bb6:	69fa      	ldr	r2, [r7, #28]
10000bb8:	69bb      	ldr	r3, [r7, #24]
10000bba:	fbb2 f3f3 	udiv	r3, r2, r3
10000bbe:	82fb      	strh	r3, [r7, #22]
      #endif
      /*###* CPU computes the following simultaneously when DIV #2 is computing ###*/
      HandlePtr->t0 = 0U;
10000bc0:	68fb      	ldr	r3, [r7, #12]
10000bc2:	2200      	movs	r2, #0
10000bc4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
      ta_tb = (uint16_t)HandlePtr->period;                /* Make sure below T0/2 >= 0.*/
10000bc8:	68fb      	ldr	r3, [r7, #12]
10000bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000bce:	847b      	strh	r3, [r7, #34]	; 0x22
      #if defined (MATH)
      /*###* Results of DIV #2 for T2 of Over-Modulation ###*/
      while (MATH->DIVST) continue;          /* Wait if DIV is still running calculation.*/
      ta = MATH->QUOT;     /* Read DIV Quotient result. T2 = Ts x sin(theta) / (sin(theta)+sin(60-theta)).*/
      #endif
      HandlePtr->ta = ta;
10000bd0:	68fb      	ldr	r3, [r7, #12]
10000bd2:	8afa      	ldrh	r2, [r7, #22]
10000bd4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
      /* Ta + Tb = PERIOD_REG for Vref on SVM Hexagon edges.*/
      HandlePtr->tb = (uint16_t)(HandlePtr->period - HandlePtr->ta);
10000bd8:	68fb      	ldr	r3, [r7, #12]
10000bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000bde:	b29a      	uxth	r2, r3
10000be0:	68fb      	ldr	r3, [r7, #12]
10000be2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000be6:	1ad3      	subs	r3, r2, r3
10000be8:	b29a      	uxth	r2, r3
10000bea:	68fb      	ldr	r3, [r7, #12]
10000bec:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

    }
  }
}
10000bf0:	372c      	adds	r7, #44	; 0x2c
10000bf2:	46bd      	mov	sp, r7
10000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
10000bf8:	4770      	bx	lr
10000bfa:	bf00      	nop
10000bfc:	08007604 	.word	0x08007604

10000c00 <PWM_SVM_SVMUpdate>:
 * This is the SVM algorithm for sinusoidal commutation.
 * It updates the compare registers of the CCU8 slices as per calculated
 * duty cycle.
 */
void PWM_SVM_SVMUpdate(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
10000c00:	b580      	push	{r7, lr}
10000c02:	b086      	sub	sp, #24
10000c04:	af00      	add	r7, sp, #0
10000c06:	60f8      	str	r0, [r7, #12]
10000c08:	460b      	mov	r3, r1
10000c0a:	607a      	str	r2, [r7, #4]
10000c0c:	817b      	strh	r3, [r7, #10]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
10000c0e:	68fb      	ldr	r3, [r7, #12]
10000c10:	681b      	ldr	r3, [r3, #0]
10000c12:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_SVM_SVMUpdate:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));

  /*This function calculates segment time ta, tb using CORDIC or LUT as per UI configuration */
  HandlePtr->seg_time_calc_ptr(HandlePtr, (uint16_t) Amplitude, (uint32_t) Angle);
10000c14:	68fb      	ldr	r3, [r7, #12]
10000c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10000c1a:	897a      	ldrh	r2, [r7, #10]
10000c1c:	68f8      	ldr	r0, [r7, #12]
10000c1e:	4611      	mov	r1, r2
10000c20:	687a      	ldr	r2, [r7, #4]
10000c22:	4798      	blx	r3
  /*This function calculates and updates compare values in compare register*/
  HandlePtr->svm_schemesel_ptr(HandlePtr);
10000c24:	68fb      	ldr	r3, [r7, #12]
10000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000c2a:	68f8      	ldr	r0, [r7, #12]
10000c2c:	4798      	blx	r3

  /*Enable the shadow transfer for all three slice*/
  HandlePtr->global_ptr->GCSS |= svmptr->shadow_transfer_mask;
10000c2e:	68fb      	ldr	r3, [r7, #12]
10000c30:	685b      	ldr	r3, [r3, #4]
10000c32:	68fa      	ldr	r2, [r7, #12]
10000c34:	6852      	ldr	r2, [r2, #4]
10000c36:	6911      	ldr	r1, [r2, #16]
10000c38:	697a      	ldr	r2, [r7, #20]
10000c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
10000c3c:	430a      	orrs	r2, r1
10000c3e:	611a      	str	r2, [r3, #16]
}
10000c40:	3718      	adds	r7, #24
10000c42:	46bd      	mov	sp, r7
10000c44:	bd80      	pop	{r7, pc}
10000c46:	bf00      	nop
