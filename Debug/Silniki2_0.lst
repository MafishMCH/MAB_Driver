
Silniki2_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008b18  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08008b18  0c008b18  00010b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00028000  2**0
                  ALLOC
  3 .ram_code     00000448  10000800  0c008b20  00018800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data         00000334  20000000  0c008f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000484  20000334  0c00929c  00020334  2**2
                  ALLOC
  6 .no_init      00000014  2000ffc0  2000ffc0  00027fc0  2**2
                  ALLOC
  7 .debug_aranges 00001988  00000000  00000000  00020338  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002d531  00000000  00000000  00021cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004fce  00000000  00000000  0004f1f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000b5ed  00000000  00000000  000541bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00006cd4  00000000  00000000  0005f7ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0001077c  00000000  00000000  00066480  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000e022  00000000  00000000  00076bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001648  00000000  00000000  00084c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000d04  00000000  00000000  00086266  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	75 34 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     u4..............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	41 5b 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     A[..............
 800009c:	b1 02 00 08 b1 02 00 08 51 5b 00 08 61 5b 00 08     ........Q[..a[..
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 3d 6e 00 08 b1 02 00 08     ........=n......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 f1 6b 00 08     .............k..
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 f9 2b 00 08     .............+..
 80001ac:	e9 2b 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     .+..............
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c008f68 	.word	0x0c008f68
 800024c:	20000000 	.word	0x20000000
 8000250:	00000334 	.word	0x00000334
 8000254:	0c00929c 	.word	0x0c00929c
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c008f68 	.word	0x0c008f68
 8000264:	10000c48 	.word	0x10000c48
 8000268:	00000000 	.word	0x00000000
 800026c:	0c008b20 	.word	0x0c008b20
 8000270:	10000800 	.word	0x10000800
 8000274:	00000448 	.word	0x00000448

08000278 <__copy_table_end__>:
 8000278:	20000334 	.word	0x20000334
 800027c:	00000484 	.word	0x00000484
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000c48 	.word	0x10000c48
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08007dc1 	.word	0x08007dc1
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080063b1 	.word	0x080063b1

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f005 f951 	bl	800556c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f005 f9b9 	bl	8005640 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f005 f998 	bl	800562c <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a37      	ldr	r2, [pc, #220]	; (80004e0 <XMC_GPIO_Init+0x138>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a36      	ldr	r2, [pc, #216]	; (80004e4 <XMC_GPIO_Init+0x13c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e03c      	b.n	80004a0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	409a      	lsls	r2, r3
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	4618      	mov	r0, r3
 800043a:	7afb      	ldrb	r3, [r7, #11]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3210      	adds	r2, #16
 8000446:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	f003 0307 	and.w	r3, r3, #7
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	4619      	mov	r1, r3
 8000454:	2307      	movs	r3, #7
 8000456:	408b      	lsls	r3, r1
 8000458:	43db      	mvns	r3, r3
 800045a:	ea02 0103 	and.w	r1, r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	f100 0210 	add.w	r2, r0, #16
 8000464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4618      	mov	r0, r3
 8000470:	7afb      	ldrb	r3, [r7, #11]
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3210      	adds	r2, #16
 800047c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7a1b      	ldrb	r3, [r3, #8]
 8000484:	4619      	mov	r1, r3
 8000486:	7afb      	ldrb	r3, [r7, #11]
 8000488:	f003 0307 	and.w	r3, r3, #7
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	ea42 0103 	orr.w	r1, r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f100 0210 	add.w	r2, r0, #16
 800049c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	7afb      	ldrb	r3, [r7, #11]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3204      	adds	r2, #4
 80004b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	f003 0303 	and.w	r3, r3, #3
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	ea42 0103 	orr.w	r1, r2, r3
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	1d02      	adds	r2, r0, #4
 80004d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	48028e00 	.word	0x48028e00
 80004e4:	48028f00 	.word	0x48028f00

080004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004ee:	681b      	ldr	r3, [r3, #0]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000ffc0 	.word	0x2000ffc0

08000500 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <XMC_SCU_GetMirrorStatus+0x14>)
 8000506:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	50004000 	.word	0x50004000

08000518 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000520:	f7ff fed8 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <XMC_SCU_lDelay+0x3c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <XMC_SCU_lDelay+0x40>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	0c9a      	lsrs	r2, r3, #18
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	fb02 f303 	mul.w	r3, r2, r3
 8000536:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e003      	b.n	8000546 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800053e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3301      	adds	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	d3f7      	bcc.n	800053e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000ffc0 	.word	0x2000ffc0
 8000558:	431bde83 	.word	0x431bde83

0800055c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000564:	2000      	movs	r0, #0
 8000566:	f000 f8bf 	bl	80006e8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800056a:	f000 fa51 	bl	8000a10 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	79db      	ldrb	r3, [r3, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00a      	beq.n	800058c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000576:	f000 fa89 	bl	8000a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800057a:	bf00      	nop
 800057c:	f000 fa74 	bl	8000a68 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000580:	4603      	mov	r3, r0
 8000582:	f083 0301 	eor.w	r3, r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f7      	bne.n	800057c <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7a5b      	ldrb	r3, [r3, #9]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f923 	bl	80007dc <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000596:	bf00      	nop
 8000598:	f7ff ffb2 	bl	8000500 <XMC_SCU_GetMirrorStatus>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1fa      	bne.n	8000598 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a1b      	ldrb	r3, [r3, #8]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fa0c 	bl	80009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7c1b      	ldrb	r3, [r3, #16]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f931 	bl	8000818 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	7c5b      	ldrb	r3, [r3, #17]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f954 	bl	8000868 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7c9b      	ldrb	r3, [r3, #18]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f93b 	bl	8000840 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7cdb      	ldrb	r3, [r3, #19]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f95e 	bl	8000890 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	799b      	ldrb	r3, [r3, #6]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00a      	beq.n	80005f2 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005dc:	f000 fa8a 	bl	8000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005e0:	bf00      	nop
 80005e2:	f000 faaf 	bl	8000b44 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005e6:	4603      	mov	r3, r0
 80005e8:	f083 0301 	eor.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1f7      	bne.n	80005e2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	78db      	ldrb	r3, [r3, #3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80005fa:	f000 fac7 	bl	8000b8c <XMC_SCU_CLOCK_DisableSystemPll>
 80005fe:	e014      	b.n	800062a <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000600:	f000 fab4 	bl	8000b6c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	8899      	ldrh	r1, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000610:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000616:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4608      	mov	r0, r1
 8000620:	4611      	mov	r1, r2
 8000622:	462a      	mov	r2, r5
 8000624:	4623      	mov	r3, r4
 8000626:	f000 fac1 	bl	8000bac <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000632:	d103      	bne.n	800063c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000634:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000638:	f000 f856 	bl	80006e8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800063c:	f7ff fe4a 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bdb0      	pop	{r4, r5, r7, pc}
 8000646:	bf00      	nop

08000648 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0f1b      	lsrs	r3, r3, #28
 8000654:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800065c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	461a      	mov	r2, r3
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 800066c:	4413      	add	r3, r2
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	50004414 	.word	0x50004414

08000680 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	0f1b      	lsrs	r3, r3, #28
 800068c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000694:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006a4:	4413      	add	r3, r2
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4013      	ands	r3, r2
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf14      	ite	ne
 80006b0:	2301      	movne	r3, #1
 80006b2:	2300      	moveq	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	5000440c 	.word	0x5000440c

080006c8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006cc:	f7ff ff0c 	bl	80004e8 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006d0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006d4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006de:	4618      	mov	r0, r3
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	50004600 	.word	0x50004600

080006e8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006f0:	4906      	ldr	r1, [pc, #24]	; (800070c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006f4:	68db      	ldr	r3, [r3, #12]
 80006f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	50004600 	.word	0x50004600

08000710 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000718:	4906      	ldr	r1, [pc, #24]	; (8000734 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	50004600 	.word	0x50004600

08000738 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	50004600 	.word	0x50004600

08000760 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d108      	bne.n	8000782 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800077a:	f023 0301 	bic.w	r3, r3, #1
 800077e:	60d3      	str	r3, [r2, #12]
 8000780:	e007      	b.n	8000792 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000782:	4a06      	ldr	r2, [pc, #24]	; (800079c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	60d3      	str	r3, [r2, #12]
  }
}
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	50004710 	.word	0x50004710

080007a0 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007aa:	bf00      	nop
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f8      	bne.n	80007ac <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ba:	4907      	ldr	r1, [pc, #28]	; (80007d8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007c4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007c6:	4313      	orrs	r3, r2
 80007c8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	50004000 	.word	0x50004000
 80007d8:	50004300 	.word	0x50004300

080007dc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007e6:	bf00      	nop
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f8      	bne.n	80007e8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007f6:	4907      	ldr	r1, [pc, #28]	; (8000814 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000800:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000802:	4313      	orrs	r3, r2
 8000804:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	50004000 	.word	0x50004000
 8000814:	50004300 	.word	0x50004300

08000818 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800082e:	4313      	orrs	r3, r2
 8000830:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	50004600 	.word	0x50004600

08000840 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000848:	4906      	ldr	r1, [pc, #24]	; (8000864 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000856:	4313      	orrs	r3, r2
 8000858:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	50004600 	.word	0x50004600

08000868 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000870:	4906      	ldr	r1, [pc, #24]	; (800088c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800087e:	4313      	orrs	r3, r2
 8000880:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	50004600 	.word	0x50004600

08000890 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000898:	4906      	ldr	r1, [pc, #24]	; (80008b4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008a6:	4313      	orrs	r3, r2
 80008a8:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	50004600 	.word	0x50004600

080008b8 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008ce:	4313      	orrs	r3, r2
 80008d0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	50004600 	.word	0x50004600

080008e0 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008e8:	4906      	ldr	r1, [pc, #24]	; (8000904 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008f6:	4313      	orrs	r3, r2
 80008f8:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	50004600 	.word	0x50004600

08000908 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000910:	4906      	ldr	r1, [pc, #24]	; (800092c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800091e:	4313      	orrs	r3, r2
 8000920:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	50004600 	.word	0x50004600

08000930 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	6053      	str	r3, [r2, #4]
}
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	50004600 	.word	0x50004600

08000950 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800095a:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000966:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000972:	4913      	ldr	r1, [pc, #76]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	3b01      	subs	r3, #1
 8000978:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3b01      	subs	r3, #1
 800097e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000980:	4313      	orrs	r3, r2
 8000982:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f023 0310 	bic.w	r3, r3, #16
 800099a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800099c:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009a8:	bf00      	nop
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f9      	beq.n	80009aa <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	50004710 	.word	0x50004710

080009c4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009d8:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d10e      	bne.n	80009fe <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009ea:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009ec:	2064      	movs	r0, #100	; 0x64
 80009ee:	f7ff fd93 	bl	8000518 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80009f2:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009fc:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f7ff fd8a 	bl	8000518 <XMC_SCU_lDelay>
}
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	50004710 	.word	0x50004710

08000a10 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d109      	bne.n	8000a34 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a26:	bf00      	nop
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f9      	beq.n	8000a28 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00a      	beq.n	8000a56 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a48:	bf00      	nop
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f9      	bne.n	8000a4a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	50004200 	.word	0x50004200
 8000a64:	50004400 	.word	0x50004400

08000a68 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	bf0c      	ite	eq
 8000a78:	2301      	moveq	r3, #1
 8000a7a:	2300      	movne	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	50004300 	.word	0x50004300

08000a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a90:	bf00      	nop
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f8      	bne.n	8000a92 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000aaa:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000aac:	bf00      	nop
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000ab0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1f8      	bne.n	8000aae <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000ac8:	bf00      	nop
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000acc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1f8      	bne.n	8000aca <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000ade:	bf00      	nop
 8000ae0:	f7ff fd0e 	bl	8000500 <XMC_SCU_GetMirrorStatus>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1fa      	bne.n	8000ae0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	50004000 	.word	0x50004000
 8000af0:	50004300 	.word	0x50004300

08000af4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000af8:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b02:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b04:	4d0d      	ldr	r5, [pc, #52]	; (8000b3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b0e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b12:	f004 fd8b 	bl	800562c <OSCHP_GetFrequency>
 8000b16:	4602      	mov	r2, r0
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8000b1e:	0d1b      	lsrs	r3, r3, #20
 8000b20:	3b01      	subs	r3, #1
 8000b22:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b24:	4323      	orrs	r3, r4
 8000b26:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b32:	6053      	str	r3, [r2, #4]
}
 8000b34:	bdb0      	pop	{r4, r5, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	50004710 	.word	0x50004710
 8000b3c:	50004700 	.word	0x50004700
 8000b40:	6b5fca6b 	.word	0x6b5fca6b

08000b44 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b50:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b54:	bf0c      	ite	eq
 8000b56:	2301      	moveq	r3, #1
 8000b58:	2300      	movne	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	50004710 	.word	0x50004710

08000b6c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b70:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7a:	f023 0302 	bic.w	r3, r3, #2
 8000b7e:	6053      	str	r3, [r2, #4]
}
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	50004710 	.word	0x50004710

08000b8c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b90:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	6053      	str	r3, [r2, #4]
}
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	50004710 	.word	0x50004710

08000bac <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60ba      	str	r2, [r7, #8]
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	81fb      	strh	r3, [r7, #14]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fdcd 	bl	8000760 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000bc6:	7b7b      	ldrb	r3, [r7, #13]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	f040 8084 	bne.w	8000cd6 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000bd4:	f004 fd2a 	bl	800562c <OSCHP_GetFrequency>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	4b4b      	ldr	r3, [pc, #300]	; (8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8000be0:	0c9b      	lsrs	r3, r3, #18
 8000be2:	059b      	lsls	r3, r3, #22
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	e002      	b.n	8000bee <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000be8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bec:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	fb02 f203 	mul.w	r2, r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4a42      	ldr	r2, [pc, #264]	; (8000d0c <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	0d9b      	lsrs	r3, r3, #22
 8000c0a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c0c:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c0e:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c18:	4a3d      	ldr	r2, [pc, #244]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1a:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c24:	493a      	ldr	r1, [pc, #232]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c2c:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	3a01      	subs	r2, #1
 8000c32:	0212      	lsls	r2, r2, #8
 8000c34:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c3c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c44:	4313      	orrs	r3, r2
 8000c46:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c48:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c52:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c54:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f023 0310 	bic.w	r3, r3, #16
 8000c5e:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c60:	4a2b      	ldr	r2, [pc, #172]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c62:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c6c:	bf00      	nop
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f9      	beq.n	8000c6e <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c7a:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c86:	bf00      	nop
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f9      	bne.n	8000c88 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	095b      	lsrs	r3, r3, #5
 8000c9e:	0d9b      	lsrs	r3, r3, #22
 8000ca0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000ca2:	6a3a      	ldr	r2, [r7, #32]
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d202      	bcs.n	8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000caa:	6938      	ldr	r0, [r7, #16]
 8000cac:	f000 f838 	bl	8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	085b      	lsrs	r3, r3, #1
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	0d9b      	lsrs	r3, r3, #22
 8000cbe:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cc0:	6a3a      	ldr	r2, [r7, #32]
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d202      	bcs.n	8000cce <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000cc8:	6938      	ldr	r0, [r7, #16]
 8000cca:	f000 f829 	bl	8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000cce:	6a38      	ldr	r0, [r7, #32]
 8000cd0:	f000 f826 	bl	8000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000cd4:	e015      	b.n	8000d02 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ce8:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000cf4:	bf00      	nop
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f9      	beq.n	8000cf6 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	aaaaaaab 	.word	0xaaaaaaab
 8000d10:	50004710 	.word	0x50004710
 8000d14:	f08080ff 	.word	0xf08080ff
 8000d18:	88888889 	.word	0x88888889
 8000d1c:	b60b60b7 	.word	0xb60b60b7

08000d20 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d3c:	2032      	movs	r0, #50	; 0x32
 8000d3e:	f7ff fbeb 	bl	8000518 <XMC_SCU_lDelay>
}
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	50004710 	.word	0x50004710

08000d4c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60da      	str	r2, [r3, #12]
}
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <XMC_CCU4_lDeassertReset+0x4c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d103      	bne.n	8000d84 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	f7ff fc63 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d82:	e016      	b.n	8000db2 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <XMC_CCU4_lDeassertReset+0x50>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d103      	bne.n	8000d94 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000d8c:	2008      	movs	r0, #8
 8000d8e:	f7ff fc5b 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d92:	e00e      	b.n	8000db2 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <XMC_CCU4_lDeassertReset+0x54>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d103      	bne.n	8000da4 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000d9c:	2010      	movs	r0, #16
 8000d9e:	f7ff fc53 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000da2:	e006      	b.n	8000db2 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <XMC_CCU4_lDeassertReset+0x58>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d102      	bne.n	8000db2 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <XMC_CCU4_lDeassertReset+0x5c>)
 8000dae:	f7ff fc4b 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	4000c000 	.word	0x4000c000
 8000dbc:	40010000 	.word	0x40010000
 8000dc0:	40014000 	.word	0x40014000
 8000dc4:	48004000 	.word	0x48004000
 8000dc8:	10000001 	.word	0x10000001

08000dcc <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f7ff fdab 	bl	8000930 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffc6 	bl	8000d6c <XMC_CCU4_lDeassertReset>
#endif
}
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop

08000de8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffe9 	bl	8000dcc <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa6 	bl	8000d4c <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e0c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	039b      	lsls	r3, r3, #14
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	795b      	ldrb	r3, [r3, #5]
 8000e3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	051a      	lsls	r2, r3, #20
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	791b      	ldrb	r3, [r3, #4]
 8000e4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	795b      	ldrb	r3, [r3, #5]
 8000e6a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	791b      	ldrb	r3, [r3, #4]
 8000e7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ea8:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ee2:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	2b09      	cmp	r3, #9
 8000ee8:	d82c      	bhi.n	8000f44 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f19 	.word	0x08000f19
 8000ef4:	08000f19 	.word	0x08000f19
 8000ef8:	08000f23 	.word	0x08000f23
 8000efc:	08000f23 	.word	0x08000f23
 8000f00:	08000f45 	.word	0x08000f45
 8000f04:	08000f45 	.word	0x08000f45
 8000f08:	08000f45 	.word	0x08000f45
 8000f0c:	08000f45 	.word	0x08000f45
 8000f10:	08000f2d 	.word	0x08000f2d
 8000f14:	08000f39 	.word	0x08000f39
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000f18:	2303      	movs	r3, #3
 8000f1a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
      break;
 8000f20:	e016      	b.n	8000f50 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000f22:	230c      	movs	r3, #12
 8000f24:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000f26:	2302      	movs	r3, #2
 8000f28:	617b      	str	r3, [r7, #20]
      break;
 8000f2a:	e011      	b.n	8000f50 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000f2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f30:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000f32:	2308      	movs	r3, #8
 8000f34:	617b      	str	r3, [r7, #20]
      break;
 8000f36:	e00b      	b.n	8000f50 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000f38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f3c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000f3e:	230a      	movs	r3, #10
 8000f40:	617b      	str	r3, [r7, #20]
      break;
 8000f42:	e005      	b.n	8000f50 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000f44:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f48:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	617b      	str	r3, [r7, #20]
      break;
 8000f4e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	4013      	ands	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8000f5a:	78ba      	ldrb	r2, [r7, #2]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	60da      	str	r2, [r3, #12]
}
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	611a      	str	r2, [r3, #16]
}
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <XMC_CCU8_lDeassertReset+0x30>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d103      	bne.n	8000fcc <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8000fc4:	2080      	movs	r0, #128	; 0x80
 8000fc6:	f7ff fb3f 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000fca:	e007      	b.n	8000fdc <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <XMC_CCU8_lDeassertReset+0x34>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d103      	bne.n	8000fdc <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8000fd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fd8:	f7ff fb36 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40024000 	.word	0x40024000

08000fec <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000ff4:	2010      	movs	r0, #16
 8000ff6:	f7ff fc9b 	bl	8000930 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffda 	bl	8000fb4 <XMC_CCU8_lDeassertReset>
#endif
}
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop

08001008 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ffe9 	bl	8000fec <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffae 	bl	8000f7c <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800102c:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	039b      	lsls	r3, r3, #14
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	601a      	str	r2, [r3, #0]
}
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffa4 	bl	8000f9c <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	7b5b      	ldrb	r3, [r3, #13]
 8001060:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	051a      	lsls	r2, r3, #20
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	7b1b      	ldrb	r3, [r3, #12]
 8001070:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001074:	b2db      	uxtb	r3, r3
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	7b1b      	ldrb	r3, [r3, #12]
 8001080:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001084:	b2db      	uxtb	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	7b5b      	ldrb	r3, [r3, #13]
 8001090:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001094:	b2db      	uxtb	r3, r3
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f083 0214 	eor.w	r2, r3, #20
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop

080010b8 <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
 80010c4:	4613      	mov	r3, r2
 80010c6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f023 0303 	bic.w	r3, r3, #3
 80010d4:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	4313      	orrs	r3, r2
 80010dc:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d104      	bne.n	80010fa <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e003      	b.n	8001102 <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001100:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	615a      	str	r2, [r3, #20]
}
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
 8001120:	4613      	mov	r3, r2
 8001122:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 8001146:	78bb      	ldrb	r3, [r7, #2]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e003      	b.n	800115e <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800115c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d104      	bne.n	800116e <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e003      	b.n	8001176 <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001174:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	615a      	str	r2, [r3, #20]
}
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	460b      	mov	r3, r1
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8001196:	7afb      	ldrb	r3, [r7, #11]
 8001198:	3b01      	subs	r3, #1
 800119a:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80011a2:	7ffb      	ldrb	r3, [r7, #31]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	3310      	adds	r3, #16
 80011aa:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	461a      	mov	r2, r3
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	3316      	adds	r3, #22
 80011d2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	2201      	movs	r2, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	789b      	ldrb	r3, [r3, #2]
 80011e8:	461a      	mov	r2, r3
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	3319      	adds	r3, #25
 80011fe:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	78db      	ldrb	r3, [r3, #3]
 8001214:	461a      	mov	r2, r3
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8001222:	7ffb      	ldrb	r3, [r7, #31]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	601a      	str	r2, [r3, #0]
#endif
}
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop

0800125c <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001268:	887a      	ldrh	r2, [r7, #2]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
 8001284:	4613      	mov	r3, r2
 8001286:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d103      	bne.n	8001296 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 800128e:	883a      	ldrh	r2, [r7, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	63da      	str	r2, [r3, #60]	; 0x3c
 8001294:	e002      	b.n	800129c <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 8001296:	883a      	ldrh	r2, [r7, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop

080012a8 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>:
  slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
}

/* Configures status ST1, ST2 mapping to STy */
void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_STATUS_t channel)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel));

  slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	615a      	str	r2, [r3, #20]
  slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	075b      	lsls	r3, r3, #29
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	615a      	str	r2, [r3, #20]
}
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <XMC_DAC_CH_EnableOutput>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 8001310:	78f8      	ldrb	r0, [r7, #3]
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4413      	add	r3, r2
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	00c3      	lsls	r3, r0, #3
 8001324:	440b      	add	r3, r1
 8001326:	609a      	str	r2, [r3, #8]
}
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <XMC_DAC_CH_EnablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SIGNEN_Msk;
 8001340:	78f8      	ldrb	r0, [r7, #3]
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	00c3      	lsls	r3, r0, #3
 8001354:	440b      	add	r3, r1
 8001356:	605a      	str	r2, [r3, #4]
}
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <XMC_DAC_CH_DisablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_EnablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_DisablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].low &= ~DAC_DAC0CFG0_SIGNEN_Msk;
 8001370:	78f8      	ldrb	r0, [r7, #3]
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	00c3      	lsls	r3, r0, #3
 8001384:	440b      	add	r3, r1
 8001386:	605a      	str	r2, [r3, #4]
}
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <XMC_DAC_CH_SetRampStart>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStop()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStart(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
 80013a0:	4613      	mov	r3, r2
 80013a2:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACDATA[channel] = start;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	883a      	ldrh	r2, [r7, #0]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	3304      	adds	r3, #4
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	605a      	str	r2, [r3, #4]
}
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <XMC_DAC_CH_SetRampStop>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
 80013c8:	4613      	mov	r3, r2
 80013ca:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80013da:	408b      	lsls	r3, r1
 80013dc:	43db      	mvns	r3, r3
 80013de:	4013      	ands	r3, r2
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 80013e0:	883a      	ldrh	r2, [r7, #0]
 80013e2:	78f9      	ldrb	r1, [r7, #3]
 80013e4:	0109      	lsls	r1, r1, #4
 80013e6:	408a      	lsls	r2, r1
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	61da      	str	r2, [r3, #28]
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
}
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <XMC_DAC_CH_SetTrigger>:
 * \par
 * Channel \a channel trigger source is selected by \a TRIGSEL bit-field of \a DAC0CFG1 register (for channel 0) / DAC1CFG1 register(for channel 1).
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetTrigger(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	460b      	mov	r3, r1
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: trigger parameter not valid\n", XMC_DAC_IS_TRIGGER_VALID(trigger));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_TRIGSEL_Msk | DAC_DAC0CFG1_TRIGMOD_Msk)) |
 8001406:	7af8      	ldrb	r0, [r7, #11]
 8001408:	7afb      	ldrb	r3, [r7, #11]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4413      	add	r3, r2
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f423 22ce 	bic.w	r2, r3, #421888	; 0x67000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	431a      	orrs	r2, r3
 800141a:	68f9      	ldr	r1, [r7, #12]
 800141c:	00c3      	lsls	r3, r0, #3
 800141e:	440b      	add	r3, r1
 8001420:	609a      	str	r2, [r3, #8]
                              trigger;
}
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	460b      	mov	r3, r1
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 800143a:	7af8      	ldrb	r0, [r7, #11]
 800143c:	7afb      	ldrb	r3, [r7, #11]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	431a      	orrs	r2, r3
 800144e:	68f9      	ldr	r1, [r7, #12]
 8001450:	00c3      	lsls	r3, r0, #3
 8001452:	440b      	add	r3, r1
 8001454:	605a      	str	r2, [r3, #4]
                             mode;
}
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <XMC_DAC_Enable>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* API to enable the DAC module */
void XMC_DAC_Enable(XMC_DAC_t *const dac)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(dac);
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <XMC_DAC_Enable+0x14>)
 800146a:	f7ff f8ed 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	10000020 	.word	0x10000020

08001478 <XMC_DAC_CH_Init>:
  return (status);
}

/* API to initialize DAC channel configuration */
void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	460b      	mov	r3, r1
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_Enable(dac);
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff ffea 	bl	8001460 <XMC_DAC_Enable>

  dac->DACCFG[channel].low = config->cfg0;
 800148c:	7afb      	ldrb	r3, [r7, #11]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	68f9      	ldr	r1, [r7, #12]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	605a      	str	r2, [r3, #4]
  dac->DACCFG[channel].high = config->cfg1;
 800149a:	7afb      	ldrb	r3, [r7, #11]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6852      	ldr	r2, [r2, #4]
 80014a0:	68f9      	ldr	r1, [r7, #12]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	609a      	str	r2, [r3, #8]
  if (channel < XMC_DAC_NO_CHANNELS)
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d804      	bhi.n	80014b8 <XMC_DAC_CH_Init+0x40>
  {
    XMC_DAC_CH_EnableOutput(dac, channel);
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff ff26 	bl	8001304 <XMC_DAC_CH_EnableOutput>
  }
}
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop

080014c0 <XMC_DAC_CH_SetFrequency>:

/* API to set the waveform frequency except in Ramp and Pattern generation mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac,
                                            const uint8_t channel,
                                            const uint32_t frequency)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	460b      	mov	r3, r1
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	72fb      	strb	r3, [r7, #11]
  uint32_t divider;
  XMC_DAC_CH_STATUS_t status;

  XMC_ASSERT("XMC_DAC_CH_SetFrequency: frequency must be greater than zero", frequency > 0U);

  divider = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / frequency;
 80014ce:	f7ff f8fb 	bl	80006c8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80014d2:	4602      	mov	r2, r0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	613b      	str	r3, [r7, #16]

  if (divider < XMC_DAC_MIN_FREQ_DIVIDER)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	d802      	bhi.n	80014e8 <XMC_DAC_CH_SetFrequency+0x28>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH;
 80014e2:	2304      	movs	r3, #4
 80014e4:	75fb      	strb	r3, [r7, #23]
 80014e6:	e016      	b.n	8001516 <XMC_DAC_CH_SetFrequency+0x56>
  }
  else if (divider >= XMC_DAC_MAX_FREQ_DIVIDER)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ee:	d302      	bcc.n	80014f6 <XMC_DAC_CH_SetFrequency+0x36>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2LOW;
 80014f0:	2303      	movs	r3, #3
 80014f2:	75fb      	strb	r3, [r7, #23]
 80014f4:	e00f      	b.n	8001516 <XMC_DAC_CH_SetFrequency+0x56>
  }
  else {
    dac->DACCFG[channel].low = (dac->DACCFG[channel].low & (uint32_t)(~DAC_DAC0CFG0_FREQ_Msk)) |
 80014f6:	7af8      	ldrb	r0, [r7, #11]
 80014f8:	7afb      	ldrb	r3, [r7, #11]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4413      	add	r3, r2
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	0d1b      	lsrs	r3, r3, #20
 8001504:	051b      	lsls	r3, r3, #20
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	431a      	orrs	r2, r3
 800150a:	68f9      	ldr	r1, [r7, #12]
 800150c:	00c3      	lsls	r3, r0, #3
 800150e:	440b      	add	r3, r1
 8001510:	605a      	str	r2, [r3, #4]
                               (divider << DAC_DAC0CFG0_FREQ_Pos);
    status = XMC_DAC_CH_STATUS_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001516:	7dfb      	ldrb	r3, [r7, #23]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <XMC_DAC_CH_SetRampFrequency>:

/* API to set the waveform frequency in Ramp Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac,
                                                const uint8_t channel,
                                                const uint32_t frequency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	460b      	mov	r3, r1
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	72fb      	strb	r3, [r7, #11]
  uint32_t stop;
  uint32_t start;

  start = dac->DACDATA[channel];
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	3304      	adds	r3, #4
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	617b      	str	r3, [r7, #20]
  stop = (dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & (uint32_t)DAC_DAC01DATA_DATA0_Msk;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	7afa      	ldrb	r2, [r7, #11]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	40d3      	lsrs	r3, r2
 8001546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154a:	613b      	str	r3, [r7, #16]

  return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	3301      	adds	r3, #1
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	7afa      	ldrb	r2, [r7, #11]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	f7ff ffad 	bl	80014c0 <XMC_DAC_CH_SetFrequency>
 8001566:	4603      	mov	r3, r0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <XMC_DAC_CH_StartSingleValueMode>:

/* API to start the operation in Single Value Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001586:	f7ff ff51 	bl	800142c <XMC_DAC_CH_SetMode>

  return XMC_DAC_CH_STATUS_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <XMC_DAC_CH_StartDataMode>:
/* API to start the operation in Data Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
                                             const uint8_t channel,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	460b      	mov	r3, r1
 80015a2:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80015a8:	7afb      	ldrb	r3, [r7, #11]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	4619      	mov	r1, r3
 80015ae:	2200      	movs	r2, #0
 80015b0:	f7ff ff3c 	bl	800142c <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d107      	bne.n	80015ca <XMC_DAC_CH_StartDataMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	4619      	mov	r1, r3
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	f7ff ff7d 	bl	80014c0 <XMC_DAC_CH_SetFrequency>
 80015c6:	4603      	mov	r3, r0
 80015c8:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10c      	bne.n	80015ea <XMC_DAC_CH_StartDataMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80015d0:	7afb      	ldrb	r3, [r7, #11]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	4619      	mov	r1, r3
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	f7ff ff0e 	bl	80013f8 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_DATA);
 80015dc:	7afb      	ldrb	r3, [r7, #11]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015e6:	f7ff ff21 	bl	800142c <XMC_DAC_CH_SetMode>
  }

  return status;
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <XMC_DAC_CH_StartRampMode>:
                                             const uint8_t channel,
                                             const uint16_t start,
                                             const uint16_t stop,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	72fb      	strb	r3, [r7, #11]
 8001606:	460b      	mov	r3, r1
 8001608:	813b      	strh	r3, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001612:	7afb      	ldrb	r3, [r7, #11]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	4619      	mov	r1, r3
 8001618:	2200      	movs	r2, #0
 800161a:	f7ff ff07 	bl	800142c <XMC_DAC_CH_SetMode>

  XMC_DAC_CH_SetRampStart(dac, channel, start);
 800161e:	7afa      	ldrb	r2, [r7, #11]
 8001620:	893b      	ldrh	r3, [r7, #8]
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	4611      	mov	r1, r2
 8001626:	461a      	mov	r2, r3
 8001628:	f7ff feb4 	bl	8001394 <XMC_DAC_CH_SetRampStart>
  XMC_DAC_CH_SetRampStop(dac, channel, stop);
 800162c:	7afa      	ldrb	r2, [r7, #11]
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	4611      	mov	r1, r2
 8001634:	461a      	mov	r2, r3
 8001636:	f7ff fec1 	bl	80013bc <XMC_DAC_CH_SetRampStop>
  XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	4619      	mov	r1, r3
 8001640:	6a3a      	ldr	r2, [r7, #32]
 8001642:	f7ff fed9 	bl	80013f8 <XMC_DAC_CH_SetTrigger>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d107      	bne.n	800165c <XMC_DAC_CH_StartRampMode+0x68>
  {
    status = XMC_DAC_CH_SetRampFrequency(dac, channel, frequency);
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	4619      	mov	r1, r3
 8001652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001654:	f7ff ff64 	bl	8001520 <XMC_DAC_CH_SetRampFrequency>
 8001658:	4603      	mov	r3, r0
 800165a:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <XMC_DAC_CH_StartRampMode+0x7c>
  {
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_RAMP);
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	4619      	mov	r1, r3
 8001668:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800166c:	f7ff fede 	bl	800142c <XMC_DAC_CH_SetMode>
  }

  return status;
 8001670:	7dfb      	ldrb	r3, [r7, #23]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop

0800167c <XMC_DAC_CH_StartPatternMode>:
                                                const uint8_t channel,
                                                const uint8_t *const pattern,
                                                const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
                                                const XMC_DAC_CH_TRIGGER_t trigger,
                                                const uint32_t frequency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	461a      	mov	r2, r3
 8001688:	460b      	mov	r3, r1
 800168a:	72fb      	strb	r3, [r7, #11]
 800168c:	4613      	mov	r3, r2
 800168e:	72bb      	strb	r3, [r7, #10]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001694:	7afb      	ldrb	r3, [r7, #11]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	4619      	mov	r1, r3
 800169a:	2200      	movs	r2, #0
 800169c:	f7ff fec6 	bl	800142c <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <XMC_DAC_CH_StartPatternMode+0x3e>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	015b      	lsls	r3, r3, #5
 80016aa:	7afa      	ldrb	r2, [r7, #11]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	4611      	mov	r1, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	f7ff ff05 	bl	80014c0 <XMC_DAC_CH_SetFrequency>
 80016b6:	4603      	mov	r3, r0
 80016b8:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d120      	bne.n	8001702 <XMC_DAC_CH_StartPatternMode+0x86>
  {
    XMC_DAC_CH_SetPattern(dac, channel, pattern);
 80016c0:	7afb      	ldrb	r3, [r7, #11]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	4619      	mov	r1, r3
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	f000 f850 	bl	800176c <XMC_DAC_CH_SetPattern>
    if (XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED == sign_output)
 80016cc:	7abb      	ldrb	r3, [r7, #10]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <XMC_DAC_CH_StartPatternMode+0x62>
    {
      XMC_DAC_CH_EnablePatternSignOutput(dac, channel);
 80016d2:	7afb      	ldrb	r3, [r7, #11]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff fe2c 	bl	8001334 <XMC_DAC_CH_EnablePatternSignOutput>
 80016dc:	e004      	b.n	80016e8 <XMC_DAC_CH_StartPatternMode+0x6c>
    }
    else
    {
      XMC_DAC_CH_DisablePatternSignOutput(dac, channel);
 80016de:	7afb      	ldrb	r3, [r7, #11]
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fe3e 	bl	8001364 <XMC_DAC_CH_DisablePatternSignOutput>
    }
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80016e8:	7afb      	ldrb	r3, [r7, #11]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	4619      	mov	r1, r3
 80016ee:	6a3a      	ldr	r2, [r7, #32]
 80016f0:	f7ff fe82 	bl	80013f8 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_PATTERN);
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80016fe:	f7ff fe95 	bl	800142c <XMC_DAC_CH_SetMode>
  }

  return status;
 8001702:	7dfb      	ldrb	r3, [r7, #23]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <XMC_DAC_CH_StartNoiseMode>:
/* API to start the operation in Noise Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
                                              const uint8_t channel,
                                              const XMC_DAC_CH_TRIGGER_t trigger,
                                              const uint32_t frequency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	460b      	mov	r3, r1
 800171a:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001720:	7afb      	ldrb	r3, [r7, #11]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	4619      	mov	r1, r3
 8001726:	2200      	movs	r2, #0
 8001728:	f7ff fe80 	bl	800142c <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d107      	bne.n	8001742 <XMC_DAC_CH_StartNoiseMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 8001732:	7afb      	ldrb	r3, [r7, #11]
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	4619      	mov	r1, r3
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	f7ff fec1 	bl	80014c0 <XMC_DAC_CH_SetFrequency>
 800173e:	4603      	mov	r3, r0
 8001740:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10c      	bne.n	8001762 <XMC_DAC_CH_StartNoiseMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001748:	7afb      	ldrb	r3, [r7, #11]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	4619      	mov	r1, r3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	f7ff fe52 	bl	80013f8 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_NOISE);
 8001754:	7afb      	ldrb	r3, [r7, #11]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800175e:	f7ff fe65 	bl	800142c <XMC_DAC_CH_SetMode>
  }

  return status;
 8001762:	7dfb      	ldrb	r3, [r7, #23]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <XMC_DAC_CH_SetPattern>:

/* API to write the pattern data table. */
void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, uint8_t channel, const uint8_t *const data)
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	460b      	mov	r3, r1
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	72fb      	strb	r3, [r7, #11]

  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 8001780:	2301      	movs	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e010      	b.n	80017a8 <XMC_DAC_CH_SetPattern+0x3c>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
  for(index = 1U; index < 6U; ++index)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d9eb      	bls.n	8001786 <XMC_DAC_CH_SetPattern+0x1a>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;
 80017ae:	7afa      	ldrb	r2, [r7, #11]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3204      	adds	r2, #4
 80017b4:	6939      	ldr	r1, [r7, #16]
 80017b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

  temp = data[6U];
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3306      	adds	r3, #6
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 80017c2:	2301      	movs	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e011      	b.n	80017ec <XMC_DAC_CH_SetPattern+0x80>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3306      	adds	r3, #6
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;

  temp = data[6U];
  for(index = 1U; index < 6U; ++index)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d9ea      	bls.n	80017c8 <XMC_DAC_CH_SetPattern+0x5c>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].high = temp;
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	3304      	adds	r3, #4
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	605a      	str	r2, [r3, #4]
}
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	70fb      	strb	r3, [r7, #3]
 8001818:	4613      	mov	r3, r2
 800181a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4619      	mov	r1, r3
 8001826:	2303      	movs	r3, #3
 8001828:	408b      	lsls	r3, r1
 800182a:	43db      	mvns	r3, r3
 800182c:	401a      	ands	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001836:	78bb      	ldrb	r3, [r7, #2]
 8001838:	78f9      	ldrb	r1, [r7, #3]
 800183a:	0049      	lsls	r1, r1, #1
 800183c:	408b      	lsls	r3, r1
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f922 	bl	8001ac4 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	791b      	ldrb	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d106      	bne.n	8001896 <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	4619      	mov	r1, r3
 8001890:	2202      	movs	r2, #2
 8001892:	f000 f963 	bl	8001b5c <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <XMC_SPI_CH_Init+0x64>)
 800189a:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 80018a2:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	791b      	ldrb	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d107      	bne.n	80018bc <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 80018b0:	f043 030b 	orr.w	r3, r3, #11
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f04f 32ff 	mov.w	r2, #4294967295
 80018c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	88db      	ldrh	r3, [r3, #6]
 80018c8:	461a      	mov	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	073f0102 	.word	0x073f0102

080018d8 <XMC_SPI_CH_EnableSlaveSelect>:
  return status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <XMC_SPI_CH_DisableSlaveSelect>:

/* Disable the slave signals by clearing (SELO) bits in PCR register. */
void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	2101      	movs	r1, #1
 8001910:	f7ff ff9e 	bl	8001850 <XMC_SPI_CH_ClearStatusFlag>
  
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop

08001928 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001936:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d103      	bne.n	8001946 <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	81fb      	strh	r3, [r7, #14]
 8001944:	e003      	b.n	800194e <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800194c:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800194e:	89fb      	ldrh	r3, [r7, #14]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800196e:	b2db      	uxtb	r3, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 80019a2:	2310      	movs	r3, #16
 80019a4:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f88c 	bl	8001ac4 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	79db      	ldrb	r3, [r3, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	79db      	ldrb	r3, [r3, #7]
 80019b8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4619      	mov	r1, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	f000 f8ca 	bl	8001b5c <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	799b      	ldrb	r3, [r3, #6]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	3301      	adds	r3, #1
 80019d6:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80019d8:	4313      	orrs	r3, r2
 80019da:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	791b      	ldrb	r3, [r3, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	061b      	lsls	r3, r3, #24
 80019ee:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	795b      	ldrb	r3, [r3, #5]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	795b      	ldrb	r3, [r3, #5]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	041b      	lsls	r3, r3, #16
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a10:	e008      	b.n	8001a24 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	791b      	ldrb	r3, [r3, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	041b      	lsls	r3, r3, #16
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	891b      	ldrh	r3, [r3, #8]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a56:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d110      	bne.n	8001a80 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001a5e:	bf00      	nop
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff7b 	bl	800195c <XMC_USIC_CH_GetTransmitBufferStatus>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b80      	cmp	r3, #128	; 0x80
 8001a6a:	d0f9      	beq.n	8001a60 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a72:	f7ff ff83 	bl	800197c <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a7e:	e003      	b.n	8001a88 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8001a80:	887a      	ldrh	r2, [r7, #2]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop

08001a90 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001a9e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	81fb      	strh	r3, [r7, #14]
 8001aac:	e003      	b.n	8001ab6 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001ab4:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001ab6:	89fb      	ldrh	r3, [r7, #14]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a1a      	ldr	r2, [pc, #104]	; (8001b38 <XMC_USIC_CH_Enable+0x74>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d003      	beq.n	8001adc <XMC_USIC_CH_Enable+0x18>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <XMC_USIC_CH_Enable+0x78>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d103      	bne.n	8001ae4 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001adc:	4818      	ldr	r0, [pc, #96]	; (8001b40 <XMC_USIC_CH_Enable+0x7c>)
 8001ade:	f000 f93d 	bl	8001d5c <XMC_USIC_Enable>
 8001ae2:	e016      	b.n	8001b12 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <XMC_USIC_CH_Enable+0x80>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d003      	beq.n	8001af4 <XMC_USIC_CH_Enable+0x30>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <XMC_USIC_CH_Enable+0x84>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d103      	bne.n	8001afc <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001af4:	4815      	ldr	r0, [pc, #84]	; (8001b4c <XMC_USIC_CH_Enable+0x88>)
 8001af6:	f000 f931 	bl	8001d5c <XMC_USIC_Enable>
 8001afa:	e00a      	b.n	8001b12 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <XMC_USIC_CH_Enable+0x8c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d003      	beq.n	8001b0c <XMC_USIC_CH_Enable+0x48>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <XMC_USIC_CH_Enable+0x90>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d102      	bne.n	8001b12 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001b0c:	4812      	ldr	r0, [pc, #72]	; (8001b58 <XMC_USIC_CH_Enable+0x94>)
 8001b0e:	f000 f925 	bl	8001d5c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2203      	movs	r2, #3
 8001b16:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001b18:	bf00      	nop
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f9      	beq.n	8001b1a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f023 020f 	bic.w	r2, r3, #15
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40030000 	.word	0x40030000
 8001b3c:	40030200 	.word	0x40030200
 8001b40:	40030008 	.word	0x40030008
 8001b44:	48020000 	.word	0x48020000
 8001b48:	48020200 	.word	0x48020200
 8001b4c:	48020008 	.word	0x48020008
 8001b50:	48024000 	.word	0x48024000
 8001b54:	48024200 	.word	0x48024200
 8001b58:	48024008 	.word	0x48024008

08001b5c <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08e      	sub	sp, #56	; 0x38
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b63      	cmp	r3, #99	; 0x63
 8001b6c:	d958      	bls.n	8001c20 <XMC_USIC_CH_SetBaudrate+0xc4>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d055      	beq.n	8001c20 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001b74:	f7fe fda8 	bl	80006c8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4a2b      	ldr	r2, [pc, #172]	; (8001c34 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001b90:	2301      	movs	r3, #1
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001b94:	2301      	movs	r3, #1
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001b98:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001b9e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ba4:	e022      	b.n	8001bec <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001baa:	fb02 f203 	mul.w	r2, r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	0a9b      	lsrs	r3, r3, #10
 8001bc0:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc8:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd0:	d209      	bcs.n	8001be6 <XMC_USIC_CH_SetBaudrate+0x8a>
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d205      	bcs.n	8001be6 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be8:	3b01      	subs	r3, #1
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
 8001bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1d9      	bne.n	8001ba6 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001c02:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	3a01      	subs	r2, #1
 8001c08:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001c0a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001c12:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c1e:	e002      	b.n	8001c26 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3738      	adds	r7, #56	; 0x38
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	51eb851f 	.word	0x51eb851f
 8001c38:	fc0080ef 	.word	0xfc0080ef

08001c3c <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c52:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001c64:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	0211      	lsls	r1, r2, #8
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001c72:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001c74:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	f8ffc0c0 	.word	0xf8ffc0c0

08001c8c <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ca2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001cb4:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	0211      	lsls	r1, r2, #8
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001cbe:	79fa      	ldrb	r2, [r7, #7]
 8001cc0:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001cc2:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	efffc0c0 	.word	0xefffc0c0

08001ce0 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001cf4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001d0c:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
 8001d10:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001d12:	431a      	orrs	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	2107      	movs	r1, #7
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8001d42:	7afb      	ldrb	r3, [r7, #11]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop

08001d5c <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <XMC_USIC_Enable+0x40>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d104      	bne.n	8001d76 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001d6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d70:	f7fe fc6a 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001d74:	e00e      	b.n	8001d94 <XMC_USIC_Enable+0x38>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <XMC_USIC_Enable+0x44>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d103      	bne.n	8001d86 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001d7e:	4809      	ldr	r0, [pc, #36]	; (8001da4 <XMC_USIC_Enable+0x48>)
 8001d80:	f7fe fc62 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001d84:	e006      	b.n	8001d94 <XMC_USIC_Enable+0x38>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <XMC_USIC_Enable+0x4c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d102      	bne.n	8001d94 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <XMC_USIC_Enable+0x50>)
 8001d90:	f7fe fc5a 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40030008 	.word	0x40030008
 8001da0:	48020008 	.word	0x48020008
 8001da4:	10000080 	.word	0x10000080
 8001da8:	48024008 	.word	0x48024008
 8001dac:	10000100 	.word	0x10000100

08001db0 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001dba:	783b      	ldrb	r3, [r7, #0]
 8001dbc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001dc4:	78bb      	ldrb	r3, [r7, #2]
 8001dc6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001dee:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e2a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop

08001e40 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop

08001e64 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7fe fbed 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001e7a:	f7ff fff3 	bl	8001e64 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop

08001ec4 <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ed2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e016      	b.n	8001f10 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ef2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001efa:	bf00      	nop
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f8      	bne.n	8001efc <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d9e5      	bls.n	8001ee2 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	08007e48 	.word	0x08007e48

08001f24 <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	2300      	movs	r3, #0
 8001f38:	f000 f828 	bl	8001f8c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	2300      	movs	r3, #0
 8001f46:	f000 f821 	bl	8001f8c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	2301      	movs	r3, #1
 8001f54:	f000 f81a 	bl	8001f8c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	6899      	ldr	r1, [r3, #8]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2301      	movs	r3, #1
 8001f62:	f000 f813 	bl	8001f8c <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	f7ff ff16 	bl	8001db0 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop

08001f8c <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b08d      	sub	sp, #52	; 0x34
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d113      	bne.n	8001fca <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001fa6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8001fb0:	231f      	movs	r3, #31
 8001fb2:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001fb4:	7a3b      	ldrb	r3, [r7, #8]
 8001fb6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001fbe:	7a7b      	ldrb	r3, [r7, #9]
 8001fc0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	76fb      	strb	r3, [r7, #27]
 8001fc8:	e013      	b.n	8001ff2 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001fca:	2318      	movs	r3, #24
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001fce:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001fd8:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001fdc:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001fde:	7abb      	ldrb	r3, [r7, #10]
 8001fe0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	3228      	adds	r2, #40	; 0x28
 8001ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffc:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	43db      	mvns	r3, r3
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4013      	ands	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8002008:	7efa      	ldrb	r2, [r7, #27]
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	43db      	mvns	r3, r3
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4013      	ands	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	3228      	adds	r2, #40	; 0x28
 8002034:	6979      	ldr	r1, [r7, #20]
 8002036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800203a:	3734      	adds	r7, #52	; 0x34
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002056:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop

0800207c <XMC_VADC_GROUP_SetSyncSlave>:

/* API which programs a group as a slave group during sync conversions */
void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t slave_grp)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  
  #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )

  /* Determine the coding of SYNCTR */
  if (slave_grp > master_grp)
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	429a      	cmp	r2, r3
 800208e:	d902      	bls.n	8002096 <XMC_VADC_GROUP_SetSyncSlave+0x1a>
  {
    master_grp = master_grp + 1U;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3301      	adds	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
  }
  #endif
  
  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800209c:	617b      	str	r3, [r7, #20]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f023 0303 	bic.w	r3, r3, #3
 80020a4:	617b      	str	r3, [r7, #20]
  synctr   |= master_grp;
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]
  group_ptr->SYNCTR = synctr;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <XMC_VADC_GROUP_SetSyncMaster>:

/* API which programs a group as a master group during sync conversions */
void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t synctr;

  XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  synctr = group_ptr->SYNCTR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020ce:	60fb      	str	r3, [r7, #12]
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0303 	bic.w	r3, r3, #3
 80020d6:	60fb      	str	r3, [r7, #12]
  group_ptr->SYNCTR = synctr;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <XMC_VADC_GROUP_CheckSlaveReadiness>:

/* API to enable checking of readiness of slaves before a synchronous conversion request is issued */
void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1))))

  master_grp_num =0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e00b      	b.n	8002118 <XMC_VADC_GROUP_CheckSlaveReadiness+0x2c>
  {
    if(g_xmc_vadc_group_array[i] == group_ptr)
 8002100:	4a13      	ldr	r2, [pc, #76]	; (8002150 <XMC_VADC_GROUP_CheckSlaveReadiness+0x64>)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d101      	bne.n	8002112 <XMC_VADC_GROUP_CheckSlaveReadiness+0x26>
    {
      master_grp_num = i;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	60bb      	str	r3, [r7, #8]
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_group <= (XMC_VADC_MAXIMUM_NUM_GROUPS - 1))))

  master_grp_num =0;
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3301      	adds	r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d9f0      	bls.n	8002100 <XMC_VADC_GROUP_CheckSlaveReadiness+0x14>
      master_grp_num = i;
    }
  }


  if(slave_group < master_grp_num)
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	d202      	bcs.n	800212c <XMC_VADC_GROUP_CheckSlaveReadiness+0x40>
  {
    slave_group++;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	603b      	str	r3, [r7, #0]
  }
  group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3303      	adds	r3, #3
 8002136:	4619      	mov	r1, r3
 8002138:	2301      	movs	r3, #1
 800213a:	408b      	lsls	r3, r1
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	08007e48 	.word	0x08007e48

08002154 <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fe6e 	bl	8001e40 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
  
  reg = group_ptr->ARBPR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800216a:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <XMC_VADC_GROUP_QueueInit+0x48>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80021ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <XMC_VADC_GROUP_QueueInit+0x8e>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80021d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fe1a 	bl	8001e1c <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop

080021f0 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>:
  return ch_num;
}

/* Select a Service Request line for the request source event */
void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8002202:	60fb      	str	r3, [r7, #12]

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 030f 	bic.w	r3, r3, #15
 800220a:	60fb      	str	r3, [r7, #12]
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]

  group_ptr->SEVNP = sevnp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

}
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop

08002228 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7a1b      	ldrb	r3, [r3, #8]
 8002238:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2201      	movs	r2, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	4013      	ands	r3, r2
 8002250:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7a5b      	ldrb	r3, [r3, #9]
 800226c:	b25b      	sxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	db29      	blt.n	80022c6 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10a      	bne.n	8002292 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 800227c:	2308      	movs	r3, #8
 800227e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002286:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002290:	e00c      	b.n	80022ac <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022a2:	f023 021f 	bic.w	r2, r3, #31
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	7a52      	ldrb	r2, [r2, #9]
 80022b6:	b251      	sxtb	r1, r2
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	fa01 f202 	lsl.w	r2, r1, r2
 80022be:	431a      	orrs	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6819      	ldr	r1, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	3280      	adds	r2, #128	; 0x80
 80022e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80022e6:	3724      	adds	r7, #36	; 0x24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	71fb      	strb	r3, [r7, #7]

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b07      	cmp	r3, #7
 8002302:	d818      	bhi.n	8002336 <XMC_VADC_GROUP_SetResultInterruptNode+0x46>
  {
    route_mask  = group_ptr->REVNP0;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800230a:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	461a      	mov	r2, r3
 8002312:	230f      	movs	r3, #15
 8002314:	4093      	lsls	r3, r2
 8002316:	43db      	mvns	r3, r3
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4013      	ands	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	0092      	lsls	r2, r2, #2
 8002324:	4093      	lsls	r3, r2
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP0 = route_mask;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 8002334:	e01e      	b.n	8002374 <XMC_VADC_GROUP_SetResultInterruptNode+0x84>
  }
  else
  {
    route_mask = group_ptr->REVNP1;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800233c:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002344:	3b08      	subs	r3, #8
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	461a      	mov	r2, r3
 800234a:	230f      	movs	r3, #15
 800234c:	4093      	lsls	r3, r2
 800234e:	43db      	mvns	r3, r3
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4013      	ands	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 8002356:	79fa      	ldrb	r2, [r7, #7]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800235e:	3b08      	subs	r3, #8
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP1 = route_mask;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
}
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop

08002380 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop

080023d0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023e2:	b2db      	uxtb	r3, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002400:	409a      	lsls	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	43db      	mvns	r3, r3
 8002448:	401a      	ands	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800246a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf14      	ite	ne
 800248e:	2301      	movne	r3, #1
 8002490:	2300      	moveq	r3, #0
 8002492:	b2db      	uxtb	r3, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80024ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	43db      	mvns	r3, r3
 8002500:	401a      	ands	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002522:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4798      	blx	r3
 800256c:	4603      	mov	r3, r0
 800256e:	73fb      	strb	r3, [r7, #15]

  return status;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop

0800257c <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8002588:	2304      	movs	r3, #4
 800258a:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002594:	2b00      	cmp	r3, #0
 8002596:	d000      	beq.n	800259a <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8002598:	e007      	b.n	80025aa <UART_Transmit+0x2e>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	f000 f824 	bl	80025ec <UART_StartTransmitIRQ>
 80025a4:	4603      	mov	r3, r0
 80025a6:	75fb      	strb	r3, [r7, #23]
    break;
 80025a8:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80025c0:	2304      	movs	r3, #4
 80025c2:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d000      	beq.n	80025d2 <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80025d0:	e007      	b.n	80025e2 <UART_Receive+0x2e>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	f000 f864 	bl	80026a4 <UART_StartReceiveIRQ>
 80025dc:	4603      	mov	r3, r0
 80025de:	75fb      	strb	r3, [r7, #23]
    break;
 80025e0:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80025f8:	2304      	movs	r3, #4
 80025fa:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800260a:	2b00      	cmp	r3, #0
 800260c:	d144      	bne.n	8002698 <UART_StartTransmitIRQ+0xac>
  {
    ret_stat = UART_STATUS_BUSY;
 800260e:	2302      	movs	r3, #2
 8002610:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->tx_busy == false)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	7e1b      	ldrb	r3, [r3, #24]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d03a      	beq.n	8002698 <UART_StartTransmitIRQ+0xac>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d035      	beq.n	8002694 <UART_StartTransmitIRQ+0xa8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d032      	beq.n	8002694 <UART_StartTransmitIRQ+0xa8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2201      	movs	r2, #1
 8002644:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00c      	beq.n	800266c <UART_StartTransmitIRQ+0x80>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff00 	bl	800245c <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002666:	f7ff fed3 	bl	8002410 <XMC_USIC_CH_TXFIFO_EnableEvent>
 800266a:	e006      	b.n	800267a <UART_StartTransmitIRQ+0x8e>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002676:	f7ff fe89 	bl	800238c <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7ff feaf 	bl	80023f0 <XMC_USIC_CH_TriggerServiceRequest>
 8002692:	e001      	b.n	8002698 <UART_StartTransmitIRQ+0xac>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8002694:	2303      	movs	r3, #3
 8002696:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8002698:	7dfb      	ldrb	r3, [r7, #23]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80026b0:	2304      	movs	r3, #4
 80026b2:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d13e      	bne.n	8002744 <UART_StartReceiveIRQ+0xa0>
  {
    ret_stat = UART_STATUS_BUSY;
 80026c6:	2302      	movs	r3, #2
 80026c8:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->rx_busy == false)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	7e5b      	ldrb	r3, [r3, #25]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f083 0301 	eor.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d034      	beq.n	8002744 <UART_StartReceiveIRQ+0xa0>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d02f      	beq.n	8002740 <UART_StartReceiveIRQ+0x9c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02c      	beq.n	8002740 <UART_StartReceiveIRQ+0x9c>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2201      	movs	r2, #1
 80026f6:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <UART_StartReceiveIRQ+0x88>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff00 	bl	8002514 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	f000 f930 	bl	800297c <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002726:	f7ff fecf 	bl	80024c8 <XMC_USIC_CH_RXFIFO_EnableEvent>
 800272a:	e006      	b.n	800273a <UART_StartReceiveIRQ+0x96>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002736:	f7ff fe29 	bl	800238c <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
 800273e:	e001      	b.n	8002744 <UART_StartReceiveIRQ+0xa0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8002740:	2303      	movs	r3, #3
 8002742:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8002744:	7dfb      	ldrb	r3, [r7, #23]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop

08002750 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	429a      	cmp	r2, r3
 8002768:	d240      	bcs.n	80027ec <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002772:	2b00      	cmp	r3, #0
 8002774:	d027      	beq.n	80027c6 <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002776:	e01a      	b.n	80027ae <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	d212      	bcs.n	80027aa <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6819      	ldr	r1, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4413      	add	r3, r2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4608      	mov	r0, r1
 8002798:	4619      	mov	r1, r3
 800279a:	f7ff f953 	bl	8001a44 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	e001      	b.n	80027ae <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 80027aa:	bf00      	nop
 80027ac:	e053      	b.n	8002856 <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fe60 	bl	8002478 <XMC_USIC_CH_TXFIFO_IsFull>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f083 0301 	eor.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1d9      	bne.n	8002778 <UART_lTransmitHandler+0x28>
 80027c4:	e047      	b.n	8002856 <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4608      	mov	r0, r1
 80027da:	4619      	mov	r1, r3
 80027dc:	f7ff f932 	bl	8001a44 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	e034      	b.n	8002856 <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fe55 	bl	80024a0 <XMC_USIC_CH_TXFIFO_IsEmpty>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02c      	beq.n	8002856 <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002812:	f7ff fe0f 	bl	8002434 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8002816:	e006      	b.n	8002826 <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002822:	f7ff fdc3 	bl	80023ac <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002826:	bf00      	nop
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fdcf 	bl	80023d0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002832:	4603      	mov	r3, r0
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d0f7      	beq.n	8002828 <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4798      	blx	r3
      }
    }
  }
}
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d04e      	beq.n	8002914 <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002876:	e032      	b.n	80028de <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d211      	bcs.n	80028a8 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	18d4      	adds	r4, r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f8fc 	bl	8001a90 <XMC_UART_CH_GetReceivedData>
 8002898:	4603      	mov	r3, r0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d114      	bne.n	80028de <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80028c4:	f7ff fe12 	bl	80024ec <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4798      	blx	r3
        }
        break;
 80028da:	e00b      	b.n	80028f4 <UART_lReceiveHandler+0x98>
 80028dc:	e00a      	b.n	80028f4 <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fe24 	bl	8002530 <XMC_USIC_CH_RXFIFO_IsEmpty>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1c1      	bne.n	8002878 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d23a      	bcs.n	8002976 <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4619      	mov	r1, r3
 800290e:	f000 f835 	bl	800297c <UART_lReconfigureRxFIFO>
 8002912:	e030      	b.n	8002976 <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d211      	bcs.n	8002944 <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	18d4      	adds	r4, r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff f8ae 	bl	8001a90 <XMC_UART_CH_GetReceivedData>
 8002934:	4603      	mov	r3, r0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	429a      	cmp	r2, r3
 800294e:	d112      	bne.n	8002976 <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002960:	f7ff fd24 	bl	80023ac <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4798      	blx	r3
      }
    }
  }
}
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}

0800297c <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002992:	461a      	mov	r2, r3
 8002994:	2301      	movs	r3, #1
 8002996:	4093      	lsls	r3, r2
 8002998:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d203      	bcs.n	80029aa <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e002      	b.n	80029b0 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 80029b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	f7ff f98d 	bl	8001ce0 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <__NVIC_GetPriorityGrouping+0x18>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029d8:	0a1b      	lsrs	r3, r3, #8
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db0b      	blt.n	8002a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_EnableIRQ+0x34>)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	79fa      	ldrb	r2, [r7, #7]
 8002a04:	f002 021f 	and.w	r2, r2, #31
 8002a08:	2001      	movs	r0, #1
 8002a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	490d      	ldr	r1, [pc, #52]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	4909      	ldr	r1, [pc, #36]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	3b04      	subs	r3, #4
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	0092      	lsls	r2, r2, #2
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
  }
}
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	bf28      	it	cs
 8002a92:	2306      	movcs	r3, #6
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3306      	adds	r3, #6
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	1e5a      	subs	r2, r3, #1
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	401a      	ands	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	1e59      	subs	r1, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002ac8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3724      	adds	r7, #36	; 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop

08002ad8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002ae8:	78f8      	ldrb	r0, [r7, #3]
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	3306      	adds	r3, #6
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002afa:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002afc:	431a      	orrs	r2, r3
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	1d83      	adds	r3, r0, #6
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop

08002b14 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f023 030f 	bic.w	r3, r3, #15
 8002b24:	f043 0202 	orr.w	r2, r3, #2
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop

08002b38 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	71fb      	strb	r3, [r7, #7]
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &UART_0_channel_config);
 8002b42:	4825      	ldr	r0, [pc, #148]	; (8002bd8 <UART_0_init+0xa0>)
 8002b44:	4925      	ldr	r1, [pc, #148]	; (8002bdc <UART_0_init+0xa4>)
 8002b46:	f7fe ff27 	bl	8001998 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 3U);
 8002b4a:	4823      	ldr	r0, [pc, #140]	; (8002bd8 <UART_0_init+0xa0>)
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2203      	movs	r2, #3
 8002b50:	f7ff ffc2 	bl	8002ad8 <XMC_USIC_CH_SetInputSource>
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 8002b54:	4820      	ldr	r0, [pc, #128]	; (8002bd8 <UART_0_init+0xa0>)
 8002b56:	f7ff ffdd 	bl	8002b14 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 14U, &UART_0_tx_pin_config);
 8002b5a:	4821      	ldr	r0, [pc, #132]	; (8002be0 <UART_0_init+0xa8>)
 8002b5c:	210e      	movs	r1, #14
 8002b5e:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <UART_0_init+0xac>)
 8002b60:	f7fd fc22 	bl	80003a8 <XMC_GPIO_Init>

  /*Set service request for transmit interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
 8002b64:	481c      	ldr	r0, [pc, #112]	; (8002bd8 <UART_0_init+0xa0>)
 8002b66:	2104      	movs	r1, #4
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f7ff f8db 	bl	8001d24 <XMC_USIC_CH_SetInterruptNodePointer>
     1U);
  /*Set service request for receive interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
 8002b6e:	481a      	ldr	r0, [pc, #104]	; (8002bd8 <UART_0_init+0xa0>)
 8002b70:	2108      	movs	r1, #8
 8002b72:	2200      	movs	r2, #0
 8002b74:	f7ff f8d6 	bl	8001d24 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
 8002b78:	4817      	ldr	r0, [pc, #92]	; (8002bd8 <UART_0_init+0xa0>)
 8002b7a:	210c      	movs	r1, #12
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f7ff f8d1 	bl	8001d24 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8002b82:	4815      	ldr	r0, [pc, #84]	; (8002bd8 <UART_0_init+0xa0>)
 8002b84:	2110      	movs	r1, #16
 8002b86:	2202      	movs	r2, #2
 8002b88:	f7ff f8cc 	bl	8001d24 <XMC_USIC_CH_SetInterruptNodePointer>
     2U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002b8c:	f7ff ff1e 	bl	80029cc <__NVIC_GetPriorityGrouping>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4618      	mov	r0, r3
 8002b94:	2104      	movs	r1, #4
 8002b96:	2200      	movs	r2, #0
 8002b98:	f7ff ff6c 	bl	8002a74 <NVIC_EncodePriority>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	205b      	movs	r0, #91	; 0x5b
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7ff ff3d 	bl	8002a20 <__NVIC_SetPriority>
                        4U, 0U));
  NVIC_EnableIRQ((IRQn_Type)91);
 8002ba6:	205b      	movs	r0, #91	; 0x5b
 8002ba8:	f7ff ff1e 	bl	80029e8 <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002bac:	f7ff ff0e 	bl	80029cc <__NVIC_GetPriorityGrouping>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f7ff ff5c 	bl	8002a74 <NVIC_EncodePriority>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	205a      	movs	r0, #90	; 0x5a
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f7ff ff2d 	bl	8002a20 <__NVIC_SetPriority>
                      2U, 0U));
  NVIC_EnableIRQ((IRQn_Type)90);
 8002bc6:	205a      	movs	r0, #90	; 0x5a
 8002bc8:	f7ff ff0e 	bl	80029e8 <__NVIC_EnableIRQ>
  return status;
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	48020000 	.word	0x48020000
 8002bdc:	08007e58 	.word	0x08007e58
 8002be0:	48028200 	.word	0x48028200
 8002be4:	08007e64 	.word	0x08007e64

08002be8 <USIC1_1_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
 8002bec:	4801      	ldr	r0, [pc, #4]	; (8002bf4 <USIC1_1_IRQHandler+0xc>)
 8002bee:	f7ff fdaf 	bl	8002750 <UART_lTransmitHandler>
}
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000000 	.word	0x20000000

08002bf8 <USIC1_0_IRQHandler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
 8002bfc:	4801      	ldr	r0, [pc, #4]	; (8002c04 <USIC1_0_IRQHandler+0xc>)
 8002bfe:	f7ff fe2d 	bl	800285c <UART_lReceiveHandler>
}
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000000 	.word	0x20000000

08002c08 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60da      	str	r2, [r3, #12]
}
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop

08002c58 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	60da      	str	r2, [r3, #12]
}
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	611a      	str	r2, [r3, #16]
}
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	611a      	str	r2, [r3, #16]
}
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8002cc8:	887a      	ldrh	r2, [r7, #2]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	611a      	str	r2, [r3, #16]
}
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002d32:	f083 0301 	eor.w	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8f6 	bl	8002f38 <TIMER_CCU4_lInit>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop

08002d5c <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00c      	beq.n	8002d88 <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff6b 	bl	8002c58 <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	e001      	b.n	8002d8c <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop

08002d98 <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f81d 	bl	8002de0 <TIMER_GetTimerStatus>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d011      	beq.n	8002dd0 <TIMER_Stop+0x38>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00c      	beq.n	8002dd0 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff53 	bl	8002c70 <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	e001      	b.n	8002dd4 <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop

08002de0 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ff18 	bl	8002c30 <XMC_CCU4_SLICE_IsTimerRunning>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop

08002e10 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ffde 	bl	8002de0 <TIMER_GetTimerStatus>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f083 0301 	eor.w	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d079      	beq.n	8002f24 <TIMER_SetTimeInterval+0x114>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d874      	bhi.n	8002f24 <TIMER_SetTimeInterval+0x114>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d36f      	bcc.n	8002f24 <TIMER_SetTimeInterval+0x114>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8002e48:	e002      	b.n	8002e50 <TIMER_SetTimeInterval+0x40>
      {
        lprescaler++;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	f1c2 020f 	rsb	r2, r2, #15
 8002e5a:	fa23 f202 	lsr.w	r2, r3, r2
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d3f2      	bcc.n	8002e4a <TIMER_SetTimeInterval+0x3a>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d15a      	bne.n	8002f24 <TIMER_SetTimeInterval+0x114>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	b2d9      	uxtb	r1, r3
 8002e84:	7913      	ldrb	r3, [r2, #4]
 8002e86:	f361 0303 	bfi	r3, r1, #0, #4
 8002e8a:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	fb02 fe01 	mul.w	lr, r2, r1
 8002ea0:	fb00 f603 	mul.w	r6, r0, r3
 8002ea4:	4476      	add	r6, lr
 8002ea6:	fba0 2302 	umull	r2, r3, r0, r2
 8002eaa:	18f1      	adds	r1, r6, r3
 8002eac:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	69c9      	ldr	r1, [r1, #28]
 8002eb2:	7909      	ldrb	r1, [r1, #4]
 8002eb4:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8002eb8:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002eba:	f1c1 0620 	rsb	r6, r1, #32
 8002ebe:	f1a1 0020 	sub.w	r0, r1, #32
 8002ec2:	fa22 f401 	lsr.w	r4, r2, r1
 8002ec6:	fa03 f606 	lsl.w	r6, r3, r6
 8002eca:	4334      	orrs	r4, r6
 8002ecc:	fa23 f000 	lsr.w	r0, r3, r0
 8002ed0:	4304      	orrs	r4, r0
 8002ed2:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	4629      	mov	r1, r5
 8002eda:	a315      	add	r3, pc, #84	; (adr r3, 8002f30 <TIMER_SetTimeInterval+0x120>)
 8002edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee0:	f004 fc9c 	bl	800781c <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	845a      	strh	r2, [r3, #34]	; 0x22
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d905      	bls.n	8002f02 <TIMER_SetTimeInterval+0xf2>
        {
          (handle_ptr->period_value)--;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	845a      	strh	r2, [r3, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	791b      	ldrb	r3, [r3, #4]
 8002f0c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f7fd ffbb 	bl	8000e90 <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f858 	bl	8002fd0 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 8002f20:	2300      	movs	r3, #0
 8002f22:	75fb      	strb	r3, [r7, #23]
        status = TIMER_STATUS_SUCCESS;
      }
#endif
    }
  }
  return (status);
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	05f5e100 	.word	0x05f5e100
 8002f34:	00000000 	.word	0x00000000

08002f38 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 f8e7 	bl	8005118 <GLOBAL_CCU4_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7e1b      	ldrb	r3, [r3, #24]
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7ff fe54 	bl	8002c08 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f7fd ff5a 	bl	8000e24 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f82d 	bl	8002fd0 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00f      	beq.n	8002fa0 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f7fd ff9c 	bl	8000ecc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	f7ff feaa 	bl	8002cf4 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fe6f 	bl	8002c88 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fe49 	bl	8002c58 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7ff fe5c 	bl	8002ca0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	4618      	mov	r0, r3
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f7ff fe64 	bl	8002cbc <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	f7ff fe69 	bl	8002cd8 <XMC_CCU4_EnableShadowTransfer>
}
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <__NVIC_GetPriorityGrouping+0x18>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003018:	0a1b      	lsrs	r3, r3, #8
}
 800301a:	4618      	mov	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	490d      	ldr	r1, [pc, #52]	; (8003074 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	4909      	ldr	r1, [pc, #36]	; (8003078 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	0092      	lsls	r2, r2, #2
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
  }
}
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b06      	cmp	r3, #6
 8003098:	bf28      	it	cs
 800309a:	2306      	movcs	r3, #6
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3306      	adds	r3, #6
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2201      	movs	r2, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	1e5a      	subs	r2, r3, #1
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	401a      	ands	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	1e59      	subs	r1, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80030d0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00f      	b.n	8003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <SysTick_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003102:	213f      	movs	r1, #63	; 0x3f
 8003104:	f7ff ff90 	bl	8003028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <SysTick_Config+0x40>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <SysTick_Config+0x40>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8003124:	b490      	push	{r4, r7}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8003130:	496b      	ldr	r1, [pc, #428]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3318      	adds	r3, #24
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8003144:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4a62      	ldr	r2, [pc, #392]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003158:	4413      	add	r3, r2
 800315a:	4a62      	ldr	r2, [pc, #392]	; (80032e4 <SYSTIMER_lInsertTimerList+0x1c0>)
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e0bb      	b.n	80032d8 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8003160:	4b60      	ldr	r3, [pc, #384]	; (80032e4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 800316a:	e0ab      	b.n	80032c4 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	461a      	mov	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	dc7a      	bgt.n	8003274 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d026      	beq.n	80031d4 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003196:	4413      	add	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	4850      	ldr	r0, [pc, #320]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4403      	add	r3, r0
 80031ac:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 80031ae:	494c      	ldr	r1, [pc, #304]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4a45      	ldr	r2, [pc, #276]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80031cc:	441a      	add	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e01c      	b.n	800320e <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 80031d4:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	4841      	ldr	r0, [pc, #260]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4403      	add	r3, r0
 80031e6:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 80031e8:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4a3a      	ldr	r2, [pc, #232]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80031f8:	4413      	add	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4a36      	ldr	r2, [pc, #216]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003208:	4413      	add	r3, r2
 800320a:	4a36      	ldr	r2, [pc, #216]	; (80032e4 <SYSTIMER_lInsertTimerList+0x1c0>)
 800320c:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 800320e:	4934      	ldr	r1, [pc, #208]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	18d1      	adds	r1, r2, r3
 8003224:	482e      	ldr	r0, [pc, #184]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4403      	add	r3, r0
 8003232:	3318      	adds	r3, #24
 8003234:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8003236:	492a      	ldr	r1, [pc, #168]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	4826      	ldr	r0, [pc, #152]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4403      	add	r3, r0
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6998      	ldr	r0, [r3, #24]
 8003258:	4c21      	ldr	r4, [pc, #132]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4423      	add	r3, r4
 8003266:	3318      	adds	r3, #24
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	1ac3      	subs	r3, r0, r3
 800326c:	618b      	str	r3, [r1, #24]
        found_flag = true;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
 8003272:	e024      	b.n	80032be <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	dd21      	ble.n	80032be <SYSTIMER_lInsertTimerList+0x19a>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11d      	bne.n	80032be <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8003282:	4917      	ldr	r1, [pc, #92]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80032a0:	441a      	add	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 80032a6:	6939      	ldr	r1, [r7, #16]
 80032a8:	480d      	ldr	r0, [pc, #52]	; (80032e0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4403      	add	r3, r0
 80032b6:	3318      	adds	r3, #24
 80032b8:	6019      	str	r1, [r3, #0]
          found_flag = true;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <SYSTIMER_lInsertTimerList+0x1b4>
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	f083 0301 	eor.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f47f af4a 	bne.w	800316c <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc90      	pop	{r4, r7}
 80032de:	4770      	bx	lr
 80032e0:	20000484 	.word	0x20000484
 80032e4:	20000358 	.word	0x20000358

080032e8 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <SYSTIMER_lRemoveTimerList+0xb8>)
 80032fc:	4413      	add	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <SYSTIMER_lRemoveTimerList+0x30>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d103      	bne.n	8003318 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e03d      	b.n	8003394 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d114      	bne.n	800334a <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003326:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <SYSTIMER_lRemoveTimerList+0xbc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2200      	movs	r2, #0
 800332e:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	6991      	ldr	r1, [r2, #24]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	6992      	ldr	r2, [r2, #24]
 800333e:	440a      	add	r2, r1
 8003340:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e024      	b.n	8003394 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d107      	bne.n	8003362 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	e018      	b.n	8003394 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	6852      	ldr	r2, [r2, #4]
 8003374:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	6991      	ldr	r1, [r2, #24]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	6992      	ldr	r2, [r2, #24]
 8003384:	440a      	add	r2, r1
 8003386:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
  }
}
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000484 	.word	0x20000484
 80033a4:	20000358 	.word	0x20000358

080033a8 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 80033ae:	4b2f      	ldr	r3, [pc, #188]	; (800346c <SYSTIMER_lTimerHandler+0xc4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80033b4:	e050      	b.n	8003458 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff8f 	bl	80032e8 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	461a      	mov	r2, r3
 80033d6:	2301      	movs	r3, #1
 80033d8:	4093      	lsls	r3, r2
 80033da:	43da      	mvns	r2, r3
 80033dc:	4b24      	ldr	r3, [pc, #144]	; (8003470 <SYSTIMER_lTimerHandler+0xc8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4013      	ands	r3, r2
 80033e2:	4a23      	ldr	r2, [pc, #140]	; (8003470 <SYSTIMER_lTimerHandler+0xc8>)
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e034      	b.n	8003452 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	7b1b      	ldrb	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d112      	bne.n	8003416 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7b5b      	ldrb	r3, [r3, #13]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d12c      	bne.n	8003452 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff73 	bl	80032e8 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6912      	ldr	r2, [r2, #16]
 8003410:	4610      	mov	r0, r2
 8003412:	4798      	blx	r3
 8003414:	e01d      	b.n	8003452 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	7b1b      	ldrb	r3, [r3, #12]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d118      	bne.n	8003450 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	7b5b      	ldrb	r3, [r3, #13]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d115      	bne.n	8003452 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ff5c 	bl	80032e8 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe71 	bl	8003124 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6912      	ldr	r2, [r2, #16]
 800344a:	4610      	mov	r0, r2
 800344c:	4798      	blx	r3
 800344e:	e000      	b.n	8003452 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8003450:	e009      	b.n	8003466 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <SYSTIMER_lTimerHandler+0xc4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <SYSTIMER_lTimerHandler+0xbe>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0a7      	beq.n	80033b6 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000358 	.word	0x20000358
 8003470:	2000035c 	.word	0x2000035c

08003474 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <SysTick_Handler+0x40>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <SysTick_Handler+0x44>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	4a0c      	ldr	r2, [pc, #48]	; (80034b8 <SysTick_Handler+0x44>)
 8003488:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d905      	bls.n	80034a4 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	619a      	str	r2, [r3, #24]
 80034a2:	e004      	b.n	80034ae <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 80034aa:	f7ff ff7d 	bl	80033a8 <SYSTIMER_lTimerHandler>
    }
  }
}
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000358 	.word	0x20000358
 80034b8:	20000360 	.word	0x20000360

080034bc <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	f083 0301 	eor.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d021      	beq.n	800351a <SYSTIMER_Init+0x5e>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <SYSTIMER_Init+0x68>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 80034dc:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80034e0:	f7ff fdfe 	bl	80030e0 <SysTick_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d015      	beq.n	800351a <SYSTIMER_Init+0x5e>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 80034ee:	f7ff fd8d 	bl	800300c <__NVIC_GetPriorityGrouping>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4618      	mov	r0, r3
 80034f6:	210a      	movs	r1, #10
 80034f8:	2200      	movs	r2, #0
 80034fa:	f7ff fdbf 	bl	800307c <NVIC_EncodePriority>
 80034fe:	4603      	mov	r3, r0
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	4619      	mov	r1, r3
 8003506:	f7ff fd8f 	bl	8003028 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <SYSTIMER_Init+0x6c>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 800351a:	7bfb      	ldrb	r3, [r7, #15]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000358 	.word	0x20000358
 8003528:	2000035c 	.word	0x2000035c

0800352c <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	460b      	mov	r3, r1
 800353a:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b13      	cmp	r3, #19
 800354c:	d802      	bhi.n	8003554 <SYSTIMER_CreateTimer+0x28>
  {
    id = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	e07b      	b.n	800364c <SYSTIMER_CreateTimer+0x120>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8003554:	2300      	movs	r3, #0
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e075      	b.n	8003646 <SYSTIMER_CreateTimer+0x11a>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2201      	movs	r2, #1
 800355e:	409a      	lsls	r2, r3
 8003560:	4b3e      	ldr	r3, [pc, #248]	; (800365c <SYSTIMER_CreateTimer+0x130>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d16a      	bne.n	8003640 <SYSTIMER_CreateTimer+0x114>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2201      	movs	r2, #1
 800356e:	409a      	lsls	r2, r3
 8003570:	4b3a      	ldr	r3, [pc, #232]	; (800365c <SYSTIMER_CreateTimer+0x130>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	4a39      	ldr	r2, [pc, #228]	; (800365c <SYSTIMER_CreateTimer+0x130>)
 8003578:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 800357a:	4939      	ldr	r1, [pc, #228]	; (8003660 <SYSTIMER_CreateTimer+0x134>)
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3310      	adds	r3, #16
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 800358e:	4934      	ldr	r1, [pc, #208]	; (8003660 <SYSTIMER_CreateTimer+0x134>)
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3308      	adds	r3, #8
 800359e:	7afa      	ldrb	r2, [r7, #11]
 80035a0:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 80035a2:	492f      	ldr	r1, [pc, #188]	; (8003660 <SYSTIMER_CreateTimer+0x134>)
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3308      	adds	r3, #8
 80035b2:	2202      	movs	r2, #2
 80035b4:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <SYSTIMER_CreateTimer+0x138>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1c59      	adds	r1, r3, #1
 80035c6:	4826      	ldr	r0, [pc, #152]	; (8003660 <SYSTIMER_CreateTimer+0x134>)
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4403      	add	r3, r0
 80035d4:	3318      	adds	r3, #24
 80035d6:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 80035d8:	4921      	ldr	r1, [pc, #132]	; (8003660 <SYSTIMER_CreateTimer+0x134>)
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	3318      	adds	r3, #24
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 80035ec:	491c      	ldr	r1, [pc, #112]	; (8003660 <SYSTIMER_CreateTimer+0x134>)
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3308      	adds	r3, #8
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8003600:	4917      	ldr	r1, [pc, #92]	; (8003660 <SYSTIMER_CreateTimer+0x134>)
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3310      	adds	r3, #16
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8003614:	4912      	ldr	r1, [pc, #72]	; (8003660 <SYSTIMER_CreateTimer+0x134>)
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	2200      	movs	r2, #0
 8003624:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8003626:	490e      	ldr	r1, [pc, #56]	; (8003660 <SYSTIMER_CreateTimer+0x134>)
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	3301      	adds	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
        break;
 800363e:	e005      	b.n	800364c <SYSTIMER_CreateTimer+0x120>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	3301      	adds	r3, #1
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d986      	bls.n	800355a <SYSTIMER_CreateTimer+0x2e>
      }
    }

  }

  return (id);
 800364c:	69fb      	ldr	r3, [r7, #28]
}  
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	2000035c 	.word	0x2000035c
 8003660:	20000484 	.word	0x20000484
 8003664:	cccccccd 	.word	0xcccccccd

08003668 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1e5a      	subs	r2, r3, #1
 8003678:	491a      	ldr	r1, [pc, #104]	; (80036e4 <SYSTIMER_StartTimer+0x7c>)
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	3308      	adds	r3, #8
 8003686:	795b      	ldrb	r3, [r3, #5]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d126      	bne.n	80036da <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	1e5a      	subs	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1e59      	subs	r1, r3, #1
 8003694:	4813      	ldr	r0, [pc, #76]	; (80036e4 <SYSTIMER_StartTimer+0x7c>)
 8003696:	460b      	mov	r3, r1
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	440b      	add	r3, r1
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4403      	add	r3, r0
 80036a0:	3318      	adds	r3, #24
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	1c59      	adds	r1, r3, #1
 80036a6:	480f      	ldr	r0, [pc, #60]	; (80036e4 <SYSTIMER_StartTimer+0x7c>)
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4403      	add	r3, r0
 80036b2:	3318      	adds	r3, #24
 80036b4:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	1e5a      	subs	r2, r3, #1
 80036ba:	490a      	ldr	r1, [pc, #40]	; (80036e4 <SYSTIMER_StartTimer+0x7c>)
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3308      	adds	r3, #8
 80036c8:	2201      	movs	r2, #1
 80036ca:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fd27 	bl	8003124 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000484 	.word	0x20000484

080036e8 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
                                             const uint16_t data,
                                             const uint32_t transmit_control_information)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	460b      	mov	r3, r1
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 80036f6:	8979      	ldrh	r1, [r7, #10]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	3220      	adds	r2, #32
 80036fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800371e:	b2db      	uxtb	r3, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003738:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	460b      	mov	r3, r1
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 8003756:	8979      	ldrh	r1, [r7, #10]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	3260      	adds	r2, #96	; 0x60
 800375e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800377a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379a:	2b00      	cmp	r3, #0
 800379c:	bf14      	ite	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	2300      	moveq	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <XMC_USIC_CH_RXFIFO_ClearEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
                                                   const uint32_t event)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  channel->TRBSCR = event;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <XMC_SPI_CH_SetTransmitMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	019b      	lsls	r3, r3, #6
 8003828:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop

0800383c <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4798      	blx	r3
 8003884:	4603      	mov	r3, r0
 8003886:	73fb      	strb	r3, [r7, #15]

  return status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop

08003894 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 80038a0:	2301      	movs	r3, #1
 80038a2:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d106      	bne.n	80038be <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	f000 f807 	bl	80038c8 <SPI_MASTER_lStartTransmitPolling>
 80038ba:	4603      	mov	r3, r0
 80038bc:	75fb      	strb	r3, [r7, #23]
  }
#endif

  return status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <SPI_MASTER_lStartTransmitPolling>:
}
#endif

#if (SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lStartTransmitPolling(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  uint16_t data;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
 80038d4:	2301      	movs	r3, #1
 80038d6:	61bb      	str	r3, [r7, #24]
                                                            Specify the number of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  status = SPI_MASTER_STATUS_BUSY;
 80038d8:	2302      	movs	r3, #2
 80038da:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	617b      	str	r3, [r7, #20]
  data = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	83bb      	strh	r3, [r7, #28]

  XMC_ASSERT("SPI_MASTER_lStartTransmitPolling:handle NULL" , (handle != NULL));

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80f0 	beq.w	8003ace <SPI_MASTER_lStartTransmitPolling+0x206>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80ec 	beq.w	8003ace <SPI_MASTER_lStartTransmitPolling+0x206>
  {
    /* Check data pointer is valid or not */
    if (false == runtime_handle->tx_busy)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f083 0301 	eor.w	r3, r3, #1
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80e1 	beq.w	8003acc <SPI_MASTER_lStartTransmitPolling+0x204>
    {
      if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d901      	bls.n	8003918 <SPI_MASTER_lStartTransmitPolling+0x50>
      {
        bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8003914:	2302      	movs	r3, #2
 8003916:	61bb      	str	r3, [r7, #24]
      }

      runtime_handle->tx_busy = true;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2020 	strb.w	r2, [r3, #32]
      /* Obtain the address of data, size of data */
      runtime_handle->tx_data = dataptr;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	619a      	str	r2, [r3, #24]
      runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	3b01      	subs	r3, #1
 800392a:	461a      	mov	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	fa03 f202 	lsl.w	r2, r3, r2
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	605a      	str	r2, [r3, #4]
      /* Initialize to first index and set the busy flag */
      runtime_handle->tx_data_index = 0U;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]

      XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	7f1b      	ldrb	r3, [r3, #28]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	f7ff ff61 	bl	8003810 <XMC_SPI_CH_SetTransmitMode>

      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d04b      	beq.n	80039f2 <SPI_MASTER_lStartTransmitPolling+0x12a>
      {
        /* Flush the Transmit FIFO */
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ff04 	bl	800376c <XMC_USIC_CH_TXFIFO_Flush>

        while (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8003964:	e03e      	b.n	80039e4 <SPI_MASTER_lStartTransmitPolling+0x11c>
        {
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 8003966:	bf00      	nop
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff0b 	bl	8003788 <XMC_USIC_CH_TXFIFO_IsFull>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f7      	bne.n	8003968 <SPI_MASTER_lStartTransmitPolling+0xa0>
          {
              /* Wait until FIFO is having space for next entry */
          }
          if (runtime_handle->tx_data_dummy == true)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00b      	beq.n	800399c <SPI_MASTER_lStartTransmitPolling+0xd4>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	7f1b      	ldrb	r3, [r3, #28]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003994:	461a      	mov	r2, r3
 8003996:	f7ff fed7 	bl	8003748 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 800399a:	e01d      	b.n	80039d8 <SPI_MASTER_lStartTransmitPolling+0x110>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d107      	bne.n	80039b2 <SPI_MASTER_lStartTransmitPolling+0xea>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	4413      	add	r3, r2
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	83bb      	strh	r3, [r7, #28]
 80039b0:	e006      	b.n	80039c0 <SPI_MASTER_lStartTransmitPolling+0xf8>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	83bb      	strh	r3, [r7, #28]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	7f1b      	ldrb	r3, [r3, #28]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461c      	mov	r4, r3
 80039cc:	8bbb      	ldrh	r3, [r7, #28]
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	4622      	mov	r2, r4
 80039d4:	f7ff feb8 	bl	8003748 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	441a      	add	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	609a      	str	r2, [r3, #8]
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
      {
        /* Flush the Transmit FIFO */
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);

        while (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d3ba      	bcc.n	8003966 <SPI_MASTER_lStartTransmitPolling+0x9e>
 80039f0:	e056      	b.n	8003aa0 <SPI_MASTER_lStartTransmitPolling+0x1d8>
      }
      else
      {
        do
        {
          while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 80039f2:	bf00      	nop
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fe87 	bl	800370c <XMC_USIC_CH_GetTransmitBufferStatus>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b80      	cmp	r3, #128	; 0x80
 8003a02:	d0f7      	beq.n	80039f4 <SPI_MASTER_lStartTransmitPolling+0x12c>
          {
          }

          if (runtime_handle->tx_data_dummy == true)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00b      	beq.n	8003a28 <SPI_MASTER_lStartTransmitPolling+0x160>
          {
            XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, runtime_handle->spi_master_mode);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	7f1b      	ldrb	r3, [r3, #28]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a20:	461a      	mov	r2, r3
 8003a22:	f7ff fe61 	bl	80036e8 <XMC_USIC_CH_WriteToTBUFTCI>
 8003a26:	e01d      	b.n	8003a64 <SPI_MASTER_lStartTransmitPolling+0x19c>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d107      	bne.n	8003a3e <SPI_MASTER_lStartTransmitPolling+0x176>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4413      	add	r3, r2
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	83bb      	strh	r3, [r7, #28]
 8003a3c:	e006      	b.n	8003a4c <SPI_MASTER_lStartTransmitPolling+0x184>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	4413      	add	r3, r2
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	83bb      	strh	r3, [r7, #28]
            }
            XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, runtime_handle->spi_master_mode);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	7f1b      	ldrb	r3, [r3, #28]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	461c      	mov	r4, r3
 8003a58:	8bbb      	ldrh	r3, [r7, #28]
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4622      	mov	r2, r4
 8003a60:	f7ff fe42 	bl	80036e8 <XMC_USIC_CH_WriteToTBUFTCI>
          }
          (runtime_handle->tx_data_index)+=bytes_per_word;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	441a      	add	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	609a      	str	r2, [r3, #8]

          while ((XMC_SPI_CH_GetStatusFlag(handle->channel) & (uint32_t)XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION) == 0U)
 8003a70:	bf00      	nop
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fee0 	bl	800383c <XMC_SPI_CH_GetStatusFlag>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f5      	beq.n	8003a72 <SPI_MASTER_lStartTransmitPolling+0x1aa>
          {

          }
          XMC_SPI_CH_ClearStatusFlag(handle->channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a90:	f7ff fee0 	bl	8003854 <XMC_SPI_CH_ClearStatusFlag>
        } while(runtime_handle->tx_data_index < runtime_handle->tx_data_count);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d3a8      	bcc.n	80039f2 <SPI_MASTER_lStartTransmitPolling+0x12a>
      }

      while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003aa0:	bf00      	nop
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fe30 	bl	800370c <XMC_USIC_CH_GetTransmitBufferStatus>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b80      	cmp	r3, #128	; 0x80
 8003ab0:	d0f7      	beq.n	8003aa2 <SPI_MASTER_lStartTransmitPolling+0x1da>
      {
      }

      runtime_handle->tx_busy = false;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->tx_data_count = 0U;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]
      runtime_handle->tx_data_index = 0U;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
      status = SPI_MASTER_STATUS_SUCCESS;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	77fb      	strb	r3, [r7, #31]

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
  {
    /* Check data pointer is valid or not */
    if (false == runtime_handle->tx_busy)
 8003aca:	e002      	b.n	8003ad2 <SPI_MASTER_lStartTransmitPolling+0x20a>
 8003acc:	e001      	b.n	8003ad2 <SPI_MASTER_lStartTransmitPolling+0x20a>
      status = SPI_MASTER_STATUS_SUCCESS;
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	77fb      	strb	r3, [r7, #31]
  }
  runtime_handle->rx_data_dummy = true;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  return status;
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3724      	adds	r7, #36	; 0x24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd90      	pop	{r4, r7, pc}

08003ae4 <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 8003af2:	2302      	movs	r3, #2
 8003af4:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	7f1b      	ldrb	r3, [r3, #28]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d142      	bne.n	8003b8c <SPI_MASTER_Transfer+0xa8>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d03b      	beq.n	8003b84 <SPI_MASTER_Transfer+0xa0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d038      	beq.n	8003b84 <SPI_MASTER_Transfer+0xa0>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d035      	beq.n	8003b84 <SPI_MASTER_Transfer+0xa0>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	7fdb      	ldrb	r3, [r3, #31]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f083 0301 	eor.w	r3, r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02c      	beq.n	8003b82 <SPI_MASTER_Transfer+0x9e>
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f083 0301 	eor.w	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d023      	beq.n	8003b82 <SPI_MASTER_Transfer+0x9e>
      {
        runtime_handle->rx_busy = true;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        {
          status = SPI_MASTER_lReceiveDMA(handle, count);
        }
#endif
#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d109      	bne.n	8003b82 <SPI_MASTER_Transfer+0x9e>
        {
          status = SPI_MASTER_lReceivePolling(handle, count);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	6839      	ldr	r1, [r7, #0]
 8003b72:	f000 f813 	bl	8003b9c <SPI_MASTER_lReceivePolling>
 8003b76:	4603      	mov	r3, r0
 8003b78:	75fb      	strb	r3, [r7, #23]
          runtime_handle->rx_busy = false;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	77da      	strb	r2, [r3, #31]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8003b80:	e003      	b.n	8003b8a <SPI_MASTER_Transfer+0xa6>
 8003b82:	e002      	b.n	8003b8a <SPI_MASTER_Transfer+0xa6>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8003b84:	2303      	movs	r3, #3
 8003b86:	75fb      	strb	r3, [r7, #23]
 8003b88:	e002      	b.n	8003b90 <SPI_MASTER_Transfer+0xac>
 8003b8a:	e001      	b.n	8003b90 <SPI_MASTER_Transfer+0xac>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop

08003b9c <SPI_MASTER_lReceivePolling>:
}
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceivePolling(const SPI_MASTER_t *const handle, uint32_t count)
{
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
                                                           Specify the number of bytes for the configured word length */
  uint16_t data;

  runtime_handle = handle->runtime;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	827b      	strh	r3, [r7, #18]
  runtime_handle->rx_data_index = 0U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d901      	bls.n	8003bce <SPI_MASTER_lReceivePolling+0x32>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8003bca:	2302      	movs	r3, #2
 8003bcc:	617b      	str	r3, [r7, #20]
  }

  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	fa03 f202 	lsl.w	r2, r3, r2
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	60da      	str	r2, [r3, #12]

  XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	7f1b      	ldrb	r3, [r3, #28]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	f7ff fe10 	bl	8003810 <XMC_SPI_CH_SetTransmitMode>

    /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80d6 	beq.w	8003daa <SPI_MASTER_lReceivePolling+0x20e>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fdd4 	bl	80037b0 <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f9c5 	bl	8003f9c <SPI_MASTER_lStdRBUFFlush>

    if (runtime_handle->tx_data_dummy == true)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <SPI_MASTER_lReceivePolling+0x9a>
    {
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	7f1b      	ldrb	r3, [r3, #28]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7ff fd8a 	bl	8003748 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8003c34:	e01d      	b.n	8003c72 <SPI_MASTER_lReceivePolling+0xd6>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d107      	bne.n	8003c4c <SPI_MASTER_lReceivePolling+0xb0>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4413      	add	r3, r2
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	827b      	strh	r3, [r7, #18]
 8003c4a:	e006      	b.n	8003c5a <SPI_MASTER_lReceivePolling+0xbe>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	699a      	ldr	r2, [r3, #24]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4413      	add	r3, r2
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	7f1b      	ldrb	r3, [r3, #28]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461c      	mov	r4, r3
 8003c66:	8a7b      	ldrh	r3, [r7, #18]
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	f7ff fd6b 	bl	8003748 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	441a      	add	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	609a      	str	r2, [r3, #8]


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8003c7e:	e061      	b.n	8003d44 <SPI_MASTER_lReceivePolling+0x1a8>
    {
      if (runtime_handle->tx_data_dummy == true)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <SPI_MASTER_lReceivePolling+0x108>
      {
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	7f1b      	ldrb	r3, [r3, #28]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	4610      	mov	r0, r2
 8003c98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f7ff fd53 	bl	8003748 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8003ca2:	e01d      	b.n	8003ce0 <SPI_MASTER_lReceivePolling+0x144>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d107      	bne.n	8003cba <SPI_MASTER_lReceivePolling+0x11e>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	827b      	strh	r3, [r7, #18]
 8003cb8:	e006      	b.n	8003cc8 <SPI_MASTER_lReceivePolling+0x12c>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	7f1b      	ldrb	r3, [r3, #28]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461c      	mov	r4, r3
 8003cd4:	8a7b      	ldrh	r3, [r7, #18]
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4622      	mov	r2, r4
 8003cdc:	f7ff fd34 	bl	8003748 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
      }

      while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8003ce0:	bf00      	nop
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fd70 	bl	80037cc <XMC_USIC_CH_RXFIFO_IsEmpty>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f7      	bne.n	8003ce2 <SPI_MASTER_lReceivePolling+0x146>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fe16 	bl	8001928 <XMC_SPI_CH_GetReceivedData>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	8a7a      	ldrh	r2, [r7, #18]
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d10a      	bne.n	8003d2c <SPI_MASTER_lReceivePolling+0x190>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	4413      	add	r3, r2
 8003d22:	8a7a      	ldrh	r2, [r7, #18]
 8003d24:	0a12      	lsrs	r2, r2, #8
 8003d26:	b292      	uxth	r2, r2
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	441a      	add	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	441a      	add	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d397      	bcc.n	8003c80 <SPI_MASTER_lReceivePolling+0xe4>

      (runtime_handle->rx_data_index)+= bytes_per_word;
      (runtime_handle->tx_data_index)+= bytes_per_word;
    }

    while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8003d50:	bf00      	nop
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fd38 	bl	80037cc <XMC_USIC_CH_RXFIFO_IsEmpty>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f7      	bne.n	8003d52 <SPI_MASTER_lReceivePolling+0x1b6>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd fdde 	bl	8001928 <XMC_SPI_CH_GetReceivedData>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	8a7a      	ldrh	r2, [r7, #18]
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d10a      	bne.n	8003d9c <SPI_MASTER_lReceivePolling+0x200>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	8a7a      	ldrh	r2, [r7, #18]
 8003d94:	0a12      	lsrs	r2, r2, #8
 8003d96:	b292      	uxth	r2, r2
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]
    }

    XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, SPI_MASTER_FIFO_RECEIVE_INDICATION_FLAG);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	2105      	movs	r1, #5
 8003da4:	f7ff fd26 	bl	80037f4 <XMC_USIC_CH_RXFIFO_ClearEvent>
 8003da8:	e0e9      	b.n	8003f7e <SPI_MASTER_lReceivePolling+0x3e2>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f8f4 	bl	8003f9c <SPI_MASTER_lStdRBUFFlush>

    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003db4:	bf00      	nop
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fca6 	bl	800370c <XMC_USIC_CH_GetTransmitBufferStatus>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b80      	cmp	r3, #128	; 0x80
 8003dc4:	d0f7      	beq.n	8003db6 <SPI_MASTER_lReceivePolling+0x21a>
    {
    }

    if (runtime_handle->tx_data_dummy == true)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <SPI_MASTER_lReceivePolling+0x24e>
    {
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	7f1b      	ldrb	r3, [r3, #28]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7ff fc80 	bl	80036e8 <XMC_USIC_CH_WriteToTBUFTCI>
 8003de8:	e01d      	b.n	8003e26 <SPI_MASTER_lReceivePolling+0x28a>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d107      	bne.n	8003e00 <SPI_MASTER_lReceivePolling+0x264>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4413      	add	r3, r2
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	827b      	strh	r3, [r7, #18]
 8003dfe:	e006      	b.n	8003e0e <SPI_MASTER_lReceivePolling+0x272>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4413      	add	r3, r2
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	7f1b      	ldrb	r3, [r3, #28]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	461c      	mov	r4, r3
 8003e1a:	8a7b      	ldrh	r3, [r7, #18]
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4622      	mov	r2, r4
 8003e22:	f7ff fc61 	bl	80036e8 <XMC_USIC_CH_WriteToTBUFTCI>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	609a      	str	r2, [r3, #8]

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8003e32:	e071      	b.n	8003f18 <SPI_MASTER_lReceivePolling+0x37c>
    {
      while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003e34:	bf00      	nop
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fc66 	bl	800370c <XMC_USIC_CH_GetTransmitBufferStatus>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b80      	cmp	r3, #128	; 0x80
 8003e44:	d0f7      	beq.n	8003e36 <SPI_MASTER_lReceivePolling+0x29a>
      {

      }

      if (runtime_handle->tx_data_dummy == true)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <SPI_MASTER_lReceivePolling+0x2ce>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	7f1b      	ldrb	r3, [r3, #28]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e62:	461a      	mov	r2, r3
 8003e64:	f7ff fc40 	bl	80036e8 <XMC_USIC_CH_WriteToTBUFTCI>
 8003e68:	e01d      	b.n	8003ea6 <SPI_MASTER_lReceivePolling+0x30a>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d107      	bne.n	8003e80 <SPI_MASTER_lReceivePolling+0x2e4>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4413      	add	r3, r2
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	827b      	strh	r3, [r7, #18]
 8003e7e:	e006      	b.n	8003e8e <SPI_MASTER_lReceivePolling+0x2f2>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	699a      	ldr	r2, [r3, #24]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4413      	add	r3, r2
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	7f1b      	ldrb	r3, [r3, #28]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461c      	mov	r4, r3
 8003e9a:	8a7b      	ldrh	r3, [r7, #18]
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	f7ff fc21 	bl	80036e8 <XMC_USIC_CH_WriteToTBUFTCI>
      }

      while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8003ea6:	bf00      	nop
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fc3d 	bl	800372c <XMC_USIC_CH_GetReceiveBufferStatus>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f7      	beq.n	8003ea8 <SPI_MASTER_lReceivePolling+0x30c>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd fd33 	bl	8001928 <XMC_SPI_CH_GetReceivedData>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	4413      	add	r3, r2
 8003ed0:	8a7a      	ldrh	r2, [r7, #18]
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d10a      	bne.n	8003ef2 <SPI_MASTER_lReceivePolling+0x356>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	8a7a      	ldrh	r2, [r7, #18]
 8003eea:	0a12      	lsrs	r2, r2, #8
 8003eec:	b292      	uxth	r2, r2
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	441a      	add	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	441a      	add	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	609a      	str	r2, [r3, #8]

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003f14:	f7ff fc9e 	bl	8003854 <XMC_SPI_CH_ClearStatusFlag>
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d387      	bcc.n	8003e34 <SPI_MASTER_lReceivePolling+0x298>
      (runtime_handle->tx_data_index)+= bytes_per_word;

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
    }

    while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8003f24:	bf00      	nop
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fbfe 	bl	800372c <XMC_USIC_CH_GetReceiveBufferStatus>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f7      	beq.n	8003f26 <SPI_MASTER_lReceivePolling+0x38a>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd fcf4 	bl	8001928 <XMC_SPI_CH_GetReceivedData>
 8003f40:	4603      	mov	r3, r0
 8003f42:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	8a7a      	ldrh	r2, [r7, #18]
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d10a      	bne.n	8003f70 <SPI_MASTER_lReceivePolling+0x3d4>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	3301      	adds	r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	8a7a      	ldrh	r2, [r7, #18]
 8003f68:	0a12      	lsrs	r2, r2, #8
 8003f6a:	b292      	uxth	r2, r2
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	701a      	strb	r2, [r3, #0]
    }

    XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003f7a:	f7ff fc6b 	bl	8003854 <XMC_SPI_CH_ClearStatusFlag>
  }
  runtime_handle->rx_data_count = 0U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	60da      	str	r2, [r3, #12]
  runtime_handle->rx_data_index = 0U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]

  return SPI_MASTER_STATUS_SUCCESS;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd90      	pop	{r4, r7, pc}
 8003f9a:	bf00      	nop

08003f9c <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fd fcbf 	bl	8001928 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fcbc 	bl	8001928 <XMC_SPI_CH_GetReceivedData>
}
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop

08003fb8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8003fc8:	78f8      	ldrb	r0, [r7, #3]
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	3306      	adds	r3, #6
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8003fda:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	1d83      	adds	r3, r0, #6
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop

08003ff4 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004004:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	3b01      	subs	r3, #1
 800400c:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop

08004020 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004030:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	3b01      	subs	r3, #1
 8004038:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop

0800404c <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8004060:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 8004062:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop

08004078 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f023 020f 	bic.w	r2, r3, #15
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop

080040a0 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	2101      	movs	r1, #1
 80040ac:	f7ff ffe4 	bl	8004078 <XMC_USIC_CH_SetMode>
}
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop

080040b8 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c4:	f043 0201 	orr.w	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop

080040d8 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	f7ff ff99 	bl	800404c <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4619      	mov	r1, r3
 8004132:	f7ff ff5f 	bl	8003ff4 <XMC_USIC_CH_SetWordLength>
}
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	4619      	mov	r1, r3
 800414e:	f7ff ff67 	bl	8004020 <XMC_USIC_CH_SetFrameLength>
}
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
 8004164:	4613      	mov	r3, r2
 8004166:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8004168:	78f8      	ldrb	r0, [r7, #3]
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	3306      	adds	r3, #6
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800417a:	f043 0210 	orr.w	r2, r3, #16
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	1d83      	adds	r3, r0, #6
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	78bb      	ldrb	r3, [r7, #2]
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4611      	mov	r1, r2
 8004190:	461a      	mov	r2, r3
 8004192:	f7ff ff11 	bl	8003fb8 <XMC_USIC_CH_SetInputSource>
}
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <SPI_enkoder_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_enkoder_lInit(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 80041a2:	2300      	movs	r3, #0
 80041a4:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH0, &SPI_enkoder_Channel_Config);
 80041a6:	482a      	ldr	r0, [pc, #168]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 80041a8:	492a      	ldr	r1, [pc, #168]	; (8004254 <SPI_enkoder_lInit+0xb8>)
 80041aa:	f7fd fb61 	bl	8001870 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH0);
 80041ae:	4828      	ldr	r0, [pc, #160]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 80041b0:	f7ff ff82 	bl	80040b8 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH0, (uint8_t)8);
 80041b4:	4826      	ldr	r0, [pc, #152]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 80041b6:	2108      	movs	r1, #8
 80041b8:	f7ff ffb2 	bl	8004120 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH0, (uint8_t)16);
 80041bc:	4824      	ldr	r0, [pc, #144]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 80041be:	2110      	movs	r1, #16
 80041c0:	f7ff ffbc 	bl	800413c <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH0,
 80041c4:	4822      	ldr	r0, [pc, #136]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 80041c6:	2100      	movs	r1, #0
 80041c8:	2200      	movs	r2, #0
 80041ca:	f7ff ff9b 	bl	8004104 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH0, 2U);
 80041ce:	4820      	ldr	r0, [pc, #128]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 80041d0:	2102      	movs	r1, #2
 80041d2:	f7ff ff81 	bl	80040d8 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)4, &SPI_enkoder_MISO_Config.port_config);
 80041d6:	4820      	ldr	r0, [pc, #128]	; (8004258 <SPI_enkoder_lInit+0xbc>)
 80041d8:	2104      	movs	r1, #4
 80041da:	4a20      	ldr	r2, [pc, #128]	; (800425c <SPI_enkoder_lInit+0xc0>)
 80041dc:	f7fc f8e4 	bl	80003a8 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_B);
 80041e0:	481b      	ldr	r0, [pc, #108]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 80041e2:	2100      	movs	r1, #0
 80041e4:	2201      	movs	r2, #1
 80041e6:	f7ff ffb7 	bl	8004158 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH0);
 80041ea:	4819      	ldr	r0, [pc, #100]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 80041ec:	f7ff ff58 	bl	80040a0 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &SPI_enkoder_MOSI_Config.port_config);
 80041f0:	4819      	ldr	r0, [pc, #100]	; (8004258 <SPI_enkoder_lInit+0xbc>)
 80041f2:	2105      	movs	r1, #5
 80041f4:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <SPI_enkoder_lInit+0xc4>)
 80041f6:	f7fc f8d7 	bl	80003a8 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)10, &SPI_enkoder_SCLKOUT_Config.port_config);
 80041fa:	4817      	ldr	r0, [pc, #92]	; (8004258 <SPI_enkoder_lInit+0xbc>)
 80041fc:	210a      	movs	r1, #10
 80041fe:	4a19      	ldr	r2, [pc, #100]	; (8004264 <SPI_enkoder_lInit+0xc8>)
 8004200:	f7fc f8d2 	bl	80003a8 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)8, &SPI_enkoder_SS_0_Config.port_config);
 8004204:	4814      	ldr	r0, [pc, #80]	; (8004258 <SPI_enkoder_lInit+0xbc>)
 8004206:	2108      	movs	r1, #8
 8004208:	4a17      	ldr	r2, [pc, #92]	; (8004268 <SPI_enkoder_lInit+0xcc>)
 800420a:	f7fc f8cd 	bl	80003a8 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH0, XMC_SPI_CH_SLAVE_SELECT_1);
 800420e:	4810      	ldr	r0, [pc, #64]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 8004210:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004214:	f7fd fb60 	bl	80018d8 <XMC_SPI_CH_EnableSlaveSelect>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)11, &SPI_enkoder_SS_1_Config.port_config);
 8004218:	480f      	ldr	r0, [pc, #60]	; (8004258 <SPI_enkoder_lInit+0xbc>)
 800421a:	210b      	movs	r1, #11
 800421c:	4a13      	ldr	r2, [pc, #76]	; (800426c <SPI_enkoder_lInit+0xd0>)
 800421e:	f7fc f8c3 	bl	80003a8 <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8004222:	480b      	ldr	r0, [pc, #44]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 8004224:	2110      	movs	r1, #16
 8004226:	2205      	movs	r2, #5
 8004228:	f7fd fd7c 	bl	8001d24 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_5);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI0_CH0,
 800422c:	4808      	ldr	r0, [pc, #32]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 800422e:	2108      	movs	r1, #8
 8004230:	2203      	movs	r2, #3
 8004232:	2301      	movs	r3, #1
 8004234:	f7fd fd02 	bl	8001c3c <XMC_USIC_CH_TXFIFO_Configure>
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI0_CH0,
 8004238:	4805      	ldr	r0, [pc, #20]	; (8004250 <SPI_enkoder_lInit+0xb4>)
 800423a:	2100      	movs	r1, #0
 800423c:	2203      	movs	r2, #3
 800423e:	2307      	movs	r3, #7
 8004240:	f7fd fd24 	bl	8001c8c <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_8WORDS,
                               7U);
             
  return status;
 8004244:	79fb      	ldrb	r3, [r7, #7]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40030000 	.word	0x40030000
 8004254:	2000005c 	.word	0x2000005c
 8004258:	48028100 	.word	0x48028100
 800425c:	20000368 	.word	0x20000368
 8004260:	20000034 	.word	0x20000034
 8004264:	08007ec4 	.word	0x08007ec4
 8004268:	08007ee0 	.word	0x08007ee0
 800426c:	20000048 	.word	0x20000048

08004270 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	2101      	movs	r1, #1
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]
}
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	045b      	lsls	r3, r3, #17
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	615a      	str	r2, [r3, #20]
}
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop

080042bc <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	611a      	str	r2, [r3, #16]
}
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop

080042d8 <XMC_CCU8_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t timer_val)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 80042e4:	887a      	ldrh	r2, [r7, #2]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	2101      	movs	r1, #1
 8004336:	fa01 f303 	lsl.w	r3, r1, r3
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 8004354:	4905      	ldr	r1, [pc, #20]	; (800436c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8004358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4313      	orrs	r3, r2
 800435e:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	50004000 	.word	0x50004000

08004370 <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 8004378:	4905      	ldr	r1, [pc, #20]	; (8004390 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800437c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	43db      	mvns	r3, r3
 8004382:	4013      	ands	r3, r2
 8004384:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	50004000 	.word	0x50004000

08004394 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	2201      	movs	r2, #1
 80043a4:	409a      	lsls	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	605a      	str	r2, [r3, #4]
}
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043c6:	409a      	lsls	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	605a      	str	r2, [r3, #4]
}
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop

080043d8 <PWM_SVM_lEnableEvent>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void PWM_SVM_lEnableEvent(PWM_SVM_t* const HandlePtr)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /*Enable the slice 0 period match interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_periodmatch)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d106      	bne.n	80043fa <PWM_SVM_lEnableEvent+0x22>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	2100      	movs	r1, #0
 80043f6:	f7ff ff7d 	bl	80042f4 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
  /*Enable the slice 0 trap interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_trapevent)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004402:	2b01      	cmp	r3, #1
 8004404:	d106      	bne.n	8004414 <PWM_SVM_lEnableEvent+0x3c>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	210a      	movs	r1, #10
 8004410:	f7ff ff70 	bl	80042f4 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_EVENT2);
  }
}
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop

0800441c <PWM_SVM_InverterDisable>:
/**
 * This function disables the inverter
 */
void PWM_SVM_InverterDisable(PWM_SVM_t* const HandlePtr)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_SVM_InverterDisable:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	7cdb      	ldrb	r3, [r3, #19]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d109      	bne.n	8004442 <PWM_SVM_InverterDisable+0x26>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	791b      	ldrb	r3, [r3, #4]
 800443a:	4610      	mov	r0, r2
 800443c:	4619      	mov	r1, r3
 800443e:	f7ff ffb9 	bl	80043b4 <XMC_GPIO_SetOutputLow>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	7cdb      	ldrb	r3, [r3, #19]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d109      	bne.n	8004460 <PWM_SVM_InverterDisable+0x44>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	791b      	ldrb	r3, [r3, #4]
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	f7ff ff9a 	bl	8004394 <XMC_GPIO_SetOutputHigh>
  }
}
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop

08004468 <PWM_SVM_InverterEnable>:
/**
 * This function Enables the inverter
 */
void PWM_SVM_InverterEnable(PWM_SVM_t* const HandlePtr)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	7cdb      	ldrb	r3, [r3, #19]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d109      	bne.n	800448e <PWM_SVM_InverterEnable+0x26>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	791b      	ldrb	r3, [r3, #4]
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	f7ff ff83 	bl	8004394 <XMC_GPIO_SetOutputHigh>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	7cdb      	ldrb	r3, [r3, #19]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d109      	bne.n	80044ac <PWM_SVM_InverterEnable+0x44>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	791b      	ldrb	r3, [r3, #4]
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	f7ff ff84 	bl	80043b4 <XMC_GPIO_SetOutputLow>
  }
}
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop

080044b4 <PWM_SVM_lCurrentTrigSliceInit>:
#if(1U == PWM_SVM_IS_CURRENTTRIGGER_ENABLE)
/**
 * This function configures the current trigger slice
 */
void PWM_SVM_lCurrentTrigSliceInit(PWM_SVM_t* const HandlePtr)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  XMC_CCU8_SLICE_CompareInit(HandlePtr->phase_ptr[3]->slice_ptr, HandlePtr->current_configinit_ptr);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	f7fc fdbb 	bl	8001044 <XMC_CCU8_SLICE_CompareInit>
  XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[3]->slice_ptr, (uint16_t) HandlePtr->period);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044da:	b29b      	uxth	r3, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	4619      	mov	r1, r3
 80044e0:	f7fc febc 	bl	800125c <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* Configure external start to event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[3]->slice_ptr,(XMC_CCU8_SLICE_EVENT_t)XMC_CCU8_SLICE_EVENT_0,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ee:	4610      	mov	r0, r2
 80044f0:	2101      	movs	r1, #1
 80044f2:	461a      	mov	r2, r3
 80044f4:	f7fc fe48 	bl	8001188 <XMC_CCU8_SLICE_ConfigureEvent>
      HandlePtr->startconfig_ptr);
  XMC_CCU8_EnableClock(HandlePtr->global_ptr,HandlePtr->phase_ptr[3]->slice_number);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	791b      	ldrb	r3, [r3, #4]
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	f7ff feb3 	bl	8004270 <XMC_CCU8_EnableClock>

  /* Phase current measurement */
  if (HandlePtr->confighandle_ptr->current_measurement == PWM_SVM_PHASECM )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	7c1b      	ldrb	r3, [r3, #16]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d118      	bne.n	8004546 <PWM_SVM_lCurrentTrigSliceInit+0x92>
  {
    /* Program timer compare value for channel 1 or channel 2*/
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr, HandlePtr->confighandle_ptr->phase_cmpch_map[3],
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	6819      	ldr	r1, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	7ada      	ldrb	r2, [r3, #11]
        ((uint16_t)(HandlePtr->period) >> 1U));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004526:	b29b      	uxth	r3, r3

  /* Phase current measurement */
  if (HandlePtr->confighandle_ptr->current_measurement == PWM_SVM_PHASECM )
  {
    /* Program timer compare value for channel 1 or channel 2*/
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr, HandlePtr->confighandle_ptr->phase_cmpch_map[3],
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	b29b      	uxth	r3, r3
 800452c:	4608      	mov	r0, r1
 800452e:	4611      	mov	r1, r2
 8004530:	461a      	mov	r2, r3
 8004532:	f7fc fea1 	bl	8001278 <XMC_CCU8_SLICE_SetTimerCompareMatch>
        ((uint16_t)(HandlePtr->period) >> 1U));
    /* Enable timer one match event  */
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	2101      	movs	r1, #1
 8004540:	f7ff fed8 	bl	80042f4 <XMC_CCU8_SLICE_EnableEvent>
 8004544:	e050      	b.n	80045e8 <PWM_SVM_lCurrentTrigSliceInit+0x134>
  }
  else if (HandlePtr->confighandle_ptr->current_measurement == PWM_SVM_DCLINKCM )/* DC Link current measurement */
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	7c1b      	ldrb	r3, [r3, #16]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d14b      	bne.n	80045e8 <PWM_SVM_lCurrentTrigSliceInit+0x134>
  {
    /* Program timer compare value for channel 1 or channel 2*/
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	681a      	ldr	r2, [r3, #0]
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t)XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
        ((uint16_t)(HandlePtr->period) >> 2U));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800455c:	b29b      	uxth	r3, r3
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
  }
  else if (HandlePtr->confighandle_ptr->current_measurement == PWM_SVM_DCLINKCM )/* DC Link current measurement */
  {
    /* Program timer compare value for channel 1 or channel 2*/
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr,
 800455e:	089b      	lsrs	r3, r3, #2
 8004560:	b29b      	uxth	r3, r3
 8004562:	4610      	mov	r0, r2
 8004564:	2100      	movs	r1, #0
 8004566:	461a      	mov	r2, r3
 8004568:	f7fc fe86 	bl	8001278 <XMC_CCU8_SLICE_SetTimerCompareMatch>
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t)XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
        ((uint16_t)(HandlePtr->period) >> 2U));
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	681a      	ldr	r2, [r3, #0]
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t)XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        ((uint16_t)(HandlePtr->period) >> 1U));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004578:	b29b      	uxth	r3, r3
  {
    /* Program timer compare value for channel 1 or channel 2*/
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr,
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t)XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
        ((uint16_t)(HandlePtr->period) >> 2U));
    XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[3]->slice_ptr,
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	b29b      	uxth	r3, r3
 800457e:	4610      	mov	r0, r2
 8004580:	2101      	movs	r1, #1
 8004582:	461a      	mov	r2, r3
 8004584:	f7fc fe78 	bl	8001278 <XMC_CCU8_SLICE_SetTimerCompareMatch>
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t)XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        ((uint16_t)(HandlePtr->period) >> 1U));
    /* Enable timer compare match event based on svm scheme */
    if ((PWM_SVM_SVMCONFIG_t)PWM_SVM_7SEG_SYMM == HandlePtr->svm_config)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800458e:	2b00      	cmp	r3, #0
 8004590:	d11c      	bne.n	80045cc <PWM_SVM_lCurrentTrigSliceInit+0x118>
    {
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	2102      	movs	r1, #2
 800459c:	f7ff feaa 	bl	80042f4 <XMC_CCU8_SLICE_EnableEvent>
          (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	2103      	movs	r1, #3
 80045aa:	f7ff fea3 	bl	80042f4 <XMC_CCU8_SLICE_EnableEvent>
          (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	2104      	movs	r1, #4
 80045b8:	f7ff fe9c 	bl	80042f4 <XMC_CCU8_SLICE_EnableEvent>
          (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	2105      	movs	r1, #5
 80045c6:	f7ff fe95 	bl	80042f4 <XMC_CCU8_SLICE_EnableEvent>
 80045ca:	e00d      	b.n	80045e8 <PWM_SVM_lCurrentTrigSliceInit+0x134>
          (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
    }
    else
    {
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	2102      	movs	r1, #2
 80045d6:	f7ff fe8d 	bl	80042f4 <XMC_CCU8_SLICE_EnableEvent>
          (XMC_CCU8_SLICE_IRQ_ID_t)XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
      XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[3]->slice_ptr,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	2104      	movs	r1, #4
 80045e4:	f7ff fe86 	bl	80042f4 <XMC_CCU8_SLICE_EnableEvent>
  else
  {
    /*do nothing*/
  }

  HandlePtr->phase_ptr[3]->slice_ptr->SRS |= HandlePtr->confighandle_ptr->event_sr_selector[3];
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6952      	ldr	r2, [r2, #20]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045fe:	430a      	orrs	r2, r1
 8004600:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop

0800460c <PWM_SVM_Init>:
/**
 * This function initializes the peripherals and SVM structure 
 * required for the SVM algorithm.
 */
PWM_SVM_STATUS_t PWM_SVM_Init(PWM_SVM_t* const HandlePtr)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
  uint32_t phase_count = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
  PWM_SVM_STATUS_t status = (PWM_SVM_STATUS_t) PWM_SVM_STATUS_SUCCESS;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 813a 	bne.w	80048a6 <PWM_SVM_Init+0x29a>
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fd3e 	bl	80050b8 <GLOBAL_CCU8_Init>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	e016      	b.n	8004674 <PWM_SVM_Init+0x68>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	3208      	adds	r2, #8
 800464c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	3208      	adds	r2, #8
 8004658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465c:	7919      	ldrb	r1, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	320e      	adds	r2, #14
 8004664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004668:	461a      	mov	r2, r3
 800466a:	f7fb fe9d 	bl	80003a8 <XMC_GPIO_Init>
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	3301      	adds	r3, #1
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b05      	cmp	r3, #5
 8004678:	d9e5      	bls.n	8004646 <PWM_SVM_Init+0x3a>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
          HandlePtr->pwmoutconfig_ptr[phase_count]);
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004680:	2b01      	cmp	r3, #1
 8004682:	d11a      	bne.n	80046ba <PWM_SVM_Init+0xae>
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468e:	791a      	ldrb	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004694:	4608      	mov	r0, r1
 8004696:	4611      	mov	r1, r2
 8004698:	461a      	mov	r2, r3
 800469a:	f7fb fe85 	bl	80003a8 <XMC_GPIO_Init>
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a8:	791a      	ldrb	r2, [r3, #4]
          HandlePtr->confighandle_ptr->trap_hwsel);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 80046ae:	7c9b      	ldrb	r3, [r3, #18]
 80046b0:	4608      	mov	r0, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	461a      	mov	r2, r3
 80046b6:	f7fd f8a9 	bl	800180c <XMC_GPIO_SetHardwareControl>
          HandlePtr->confighandle_ptr->trap_hwsel);
    }

    /*Configure io init for inverter enable pin output*/
    if (svmptr->inverter_pin > (PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_NOTREQUIRED)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	7cdb      	ldrb	r3, [r3, #19]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00c      	beq.n	80046dc <PWM_SVM_Init+0xd0>
    {
      XMC_GPIO_Init(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	791a      	ldrb	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d2:	4608      	mov	r0, r1
 80046d4:	4611      	mov	r1, r2
 80046d6:	461a      	mov	r2, r3
 80046d8:	f7fb fe66 	bl	80003a8 <XMC_GPIO_Init>
          HandlePtr->inverterpinconfig_ptr);
    }

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fe9d 	bl	800441c <PWM_SVM_InverterDisable>

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e0a4      	b.n	8004832 <PWM_SVM_Init+0x226>
    {
      XMC_CCU8_SLICE_CompareInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->phase_configinit_ptr);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	3202      	adds	r2, #2
 80046ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	f7fc fca2 	bl	8001044 <XMC_CCU8_SLICE_CompareInit>

      /* configure dead time */
      XMC_CCU8_SLICE_DeadTimeInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->deadtimeconfig_ptr);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	3202      	adds	r2, #2
 8004706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004710:	4610      	mov	r0, r2
 8004712:	4619      	mov	r1, r3
 8004714:	f7fc fdc8 	bl	80012a8 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure external start to event 0 */
      XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	3202      	adds	r2, #2
 800471e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004728:	4610      	mov	r0, r2
 800472a:	2101      	movs	r1, #1
 800472c:	461a      	mov	r2, r3
 800472e:	f7fc fd2b 	bl	8001188 <XMC_CCU8_SLICE_ConfigureEvent>
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0, HandlePtr->startconfig_ptr);
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004738:	2b01      	cmp	r3, #1
 800473a:	d121      	bne.n	8004780 <PWM_SVM_Init+0x174>
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	3202      	adds	r2, #2
 8004742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474c:	4610      	mov	r0, r2
 800474e:	2103      	movs	r1, #3
 8004750:	461a      	mov	r2, r3
 8004752:	f7fc fd19 	bl	8001188 <XMC_CCU8_SLICE_ConfigureEvent>
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	3202      	adds	r2, #2
 800475c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004760:	6819      	ldr	r1, [r3, #0]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	7c5a      	ldrb	r2, [r3, #17]
            (bool)svmptr->trap_sync_pwm);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	4608      	mov	r0, r1
 8004778:	4611      	mov	r1, r2
 800477a:	461a      	mov	r2, r3
 800477c:	f7fc fcca 	bl	8001114 <XMC_CCU8_SLICE_TrapConfig>
            (bool)svmptr->trap_sync_pwm);
      }

      /* Program period  value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) HandlePtr->period);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	3202      	adds	r2, #2
 8004786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004792:	b29b      	uxth	r3, r3
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	f7fc fd60 	bl	800125c <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	3202      	adds	r2, #2
 80047a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	2100      	movs	r1, #0
 80047ac:	2200      	movs	r2, #0
 80047ae:	f7fc fd63 	bl	8001278 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	3202      	adds	r2, #2
 80047b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	2101      	movs	r1, #1
 80047c2:	2200      	movs	r2, #0
 80047c4:	f7fc fd58 	bl	8001278 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	3202      	adds	r2, #2
 80047ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d2:	6819      	ldr	r1, [r3, #0]
          HandlePtr->confighandle_ptr->phase_st_map[count]);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4413      	add	r3, r2
 80047dc:	3308      	adds	r3, #8
 80047de:	791b      	ldrb	r3, [r3, #4]
 80047e0:	4608      	mov	r0, r1
 80047e2:	4619      	mov	r1, r3
 80047e4:	f7fc fd76 	bl	80012d4 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>
          HandlePtr->confighandle_ptr->phase_st_map[count]);

      /* Bind period match event to an NVIC node  */
      HandlePtr->phase_ptr[count]->slice_ptr->SRS |= svmptr->event_sr_selector[count];
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	3202      	adds	r2, #2
 80047ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6979      	ldr	r1, [r7, #20]
 80047f8:	3102      	adds	r1, #2
 80047fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	6978      	ldr	r0, [r7, #20]
 8004808:	300a      	adds	r0, #10
 800480a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800480e:	430a      	orrs	r2, r1
 8004810:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	3202      	adds	r2, #2
 800481e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004822:	791b      	ldrb	r3, [r3, #4]
 8004824:	4608      	mov	r0, r1
 8004826:	4619      	mov	r1, r3
 8004828:	f7ff fd22 	bl	8004270 <XMC_CCU8_EnableClock>

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	3301      	adds	r3, #1
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b02      	cmp	r3, #2
 8004836:	f67f af57 	bls.w	80046e8 <PWM_SVM_Init+0xdc>

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
    }

    PWM_SVM_lEnableEvent(HandlePtr);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fdcc 	bl	80043d8 <PWM_SVM_lEnableEvent>

    /* Current trigger slice configurations */
#if(1U == PWM_SVM_IS_CURRENTTRIGGER_ENABLE)
    if ((PWM_SVM_CMTYPE_t)PWM_SVM_NONE != svmptr->current_measurement)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	7c1b      	ldrb	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <PWM_SVM_Init+0x242>
    {
      PWM_SVM_lCurrentTrigSliceInit(HandlePtr);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff fe33 	bl	80044b4 <PWM_SVM_lCurrentTrigSliceInit>
#if defined (MATH)
      /*Ungate Math coprocessor*/
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MATH);
#endif
    /*Enable the shadow transfer for all three slice*/
    XMC_CCU8_EnableShadowTransfer(HandlePtr->global_ptr, svmptr->shadow_transfer_mask);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	f7ff fd2f 	bl	80042bc <XMC_CCU8_EnableShadowTransfer>

    /* update dead time variable*/
    HandlePtr->deadtime_rising_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_rising_edge_counter;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004862:	791b      	ldrb	r3, [r3, #4]
 8004864:	461a      	mov	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    HandlePtr->deadtime_falling_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_falling_edge_counter;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004870:	795b      	ldrb	r3, [r3, #5]
 8004872:	461a      	mov	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    HandlePtr->deadtime_div = (XMC_CCU8_SLICE_DTC_DIV_t) HandlePtr->deadtimeconfig_ptr->div;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8004884:	b2db      	uxtb	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    if ((PWM_SVM_STATUS_t) PWM_SVM_STATUS_FAILURE != status)
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d006      	beq.n	80048a2 <PWM_SVM_Init+0x296>
    {
      status = PWM_SVM_STATUS_SUCCESS;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]
      HandlePtr->state = (PWM_SVM_STATE_t) PWM_SVM_INITIALIZED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80048a0:	e001      	b.n	80048a6 <PWM_SVM_Init+0x29a>
    }
    else
    {
      status = PWM_SVM_STATUS_FAILURE;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <PWM_SVM_Start>:

/**
 * This function starts the CCU8 slices used to generate SVM.
 */
void PWM_SVM_Start(PWM_SVM_t* const HandlePtr)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Start:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if (((PWM_SVM_STATE_t) PWM_SVM_INITIALIZED == HandlePtr->state)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d005      	beq.n	80048d8 <PWM_SVM_Start+0x28>
      || ((PWM_SVM_STATE_t) PWM_SVM_STOPPED == HandlePtr->state))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	f040 8133 	bne.w	8004b3e <PWM_SVM_Start+0x28e>
  {
    HandlePtr->ta = 0U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
    HandlePtr->tb = 0U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    HandlePtr->ta2 = 0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    HandlePtr->tb2 = 0U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    HandlePtr->v_ta = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    HandlePtr->v_tb = 0U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    HandlePtr->v_ta2 = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    HandlePtr->v_tb2 = 0U;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    HandlePtr->sector = 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    HandlePtr->subsector = 0U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fd9d 	bl	8004468 <PWM_SVM_InverterEnable>

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e026      	b.n	8004982 <PWM_SVM_Start+0xd2>
    {
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800493a:	2b01      	cmp	r3, #1
 800493c:	d113      	bne.n	8004966 <PWM_SVM_Start+0xb6>
      {
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	3202      	adds	r2, #2
 8004944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	210a      	movs	r1, #10
 800494e:	f7ff fce7 	bl	8004320 <XMC_CCU8_SLICE_ClearEvent>
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	3202      	adds	r2, #2
 8004958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	210b      	movs	r1, #11
 8004962:	f7ff fcdd 	bl	8004320 <XMC_CCU8_SLICE_ClearEvent>
      }
      /* configure the Start trigger function*/
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	3202      	adds	r2, #2
 800496c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	2101      	movs	r1, #1
 8004976:	2201      	movs	r2, #1
 8004978:	f7fc fb9e 	bl	80010b8 <XMC_CCU8_SLICE_StartConfig>
    HandlePtr->subsector = 0U;

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3301      	adds	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d9d5      	bls.n	8004934 <PWM_SVM_Start+0x84>
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    if ((uint8_t) true == svmptr->enable_trap)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800498e:	2b01      	cmp	r3, #1
 8004990:	d129      	bne.n	80049e6 <PWM_SVM_Start+0x136>
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	7d1b      	ldrb	r3, [r3, #20]
 800499c:	4619      	mov	r1, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	7d1b      	ldrb	r3, [r3, #20]
 80049a2:	005b      	lsls	r3, r3, #1
    }

    if ((uint8_t) true == svmptr->enable_trap)
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 80049a4:	430b      	orrs	r3, r1
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7ff fc75 	bl	8004298 <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	7d5b      	ldrb	r3, [r3, #21]
 80049b8:	4619      	mov	r1, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	7d5b      	ldrb	r3, [r3, #21]
 80049be:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 80049c0:	430b      	orrs	r3, r1
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	f7ff fc67 	bl	8004298 <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	7d9b      	ldrb	r3, [r3, #22]
 80049d4:	4619      	mov	r1, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	7d9b      	ldrb	r3, [r3, #22]
 80049da:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 80049dc:	430b      	orrs	r3, r1
 80049de:	4610      	mov	r0, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	f7ff fc59 	bl	8004298 <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
    }

    /*enable module clock by clearing idle bit if any of current measurement is selected */
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	7c1b      	ldrb	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d075      	beq.n	8004ada <PWM_SVM_Start+0x22a>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	2101      	movs	r1, #1
 80049f8:	2201      	movs	r2, #1
 80049fa:	f7fc fb5d 	bl	80010b8 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	7c1b      	ldrb	r3, [r3, #16]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d133      	bne.n	8004a6e <PWM_SVM_Start+0x1be>
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8004a1c:	4413      	add	r3, r2
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	4608      	mov	r0, r1
 8004a22:	4619      	mov	r1, r3
 8004a24:	f7ff fc58 	bl	80042d8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8004a3e:	4413      	add	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	4608      	mov	r0, r1
 8004a44:	4619      	mov	r1, r3
 8004a46:	f7ff fc47 	bl	80042d8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004a56:	085b      	lsrs	r3, r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8004a60:	4413      	add	r3, r2
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	4608      	mov	r0, r1
 8004a66:	4619      	mov	r1, r3
 8004a68:	f7ff fc36 	bl	80042d8 <XMC_CCU8_SLICE_SetTimerValue>
 8004a6c:	e035      	b.n	8004ada <PWM_SVM_Start+0x22a>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a7a:	b29b      	uxth	r3, r3
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8004a86:	4413      	add	r3, r2
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f7ff fc23 	bl	80042d8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9e:	b29b      	uxth	r3, r3
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8004aaa:	4413      	add	r3, r2
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	4608      	mov	r0, r1
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f7ff fc11 	bl	80042d8 <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac2:	b29b      	uxth	r3, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8004ace:	4413      	add	r3, r2
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	f7ff fbff 	bl	80042d8 <XMC_CCU8_SLICE_SetTimerValue>
                    + (uint16_t) svmptr->current_offset));
      }
    }

    /* synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerHigh((uint32_t)(svmptr->sync_start_mask));
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fc34 	bl	800434c <XMC_SCU_SetCcuTriggerHigh>

    /* disable the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[0]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	2100      	movs	r1, #0
 8004aee:	2201      	movs	r2, #1
 8004af0:	f7fc fae2 	bl	80010b8 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[1]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	2100      	movs	r1, #0
 8004afe:	2201      	movs	r2, #1
 8004b00:	f7fc fada 	bl	80010b8 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[2]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f7fc fad2 	bl	80010b8 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	7c1b      	ldrb	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <PWM_SVM_Start+0x27c>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	2100      	movs	r1, #0
 8004b26:	2201      	movs	r2, #1
 8004b28:	f7fc fac6 	bl	80010b8 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    /* disable synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerLow((uint32_t)(svmptr->sync_start_mask));
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fc1d 	bl	8004370 <XMC_SCU_SetCcuTriggerLow>

    /* change the state to RUNNING*/
    HandlePtr->state = PWM_SVM_RUNNING;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }
}
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <MOTOR_LIB_abs>:
   return return_val;
 }

/*This is used to find out the absolute value*/
static inline uint32_t MOTOR_LIB_abs(int32_t x)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  int32_t return_val;
  if(x > 0)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	dd02      	ble.n	8004b58 <MOTOR_LIB_abs+0x14>
  {
    return_val = x;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e002      	b.n	8004b5e <MOTOR_LIB_abs+0x1a>
  }
  else
  {
    return_val = (-x);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	425b      	negs	r3, r3
 8004b5c:	60fb      	str	r3, [r7, #12]
  }
  return ((uint32_t)return_val);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <MOTOR_LIB_Car2Pol>:
  return (resultant_magnitude);
}
#else

uint32_t MOTOR_LIB_Car2Pol(int32_t x,int32_t y, int16_t *angle)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b08f      	sub	sp, #60	; 0x3c
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint8_t cordic_count;
  int32_t dx,flag = 0, temp_angle = 0,cord_y = y,cord_x = x,temp_cordic_scale,return_val;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t temp_cordic_s;
  if (cord_x < 0)
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da04      	bge.n	8004b98 <MOTOR_LIB_Car2Pol+0x2c>
  {
     cord_x = (-cord_x);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	425b      	negs	r3, r3
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
    flag = 1;
 8004b94:	2301      	movs	r3, #1
 8004b96:	633b      	str	r3, [r7, #48]	; 0x30
  }

  for (cordic_count = 0U; cordic_count < MOTOR_LIB_CORDIC_ITERATIONS; cordic_count++)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004b9e:	e03b      	b.n	8004c18 <MOTOR_LIB_Car2Pol+0xac>
  {
    temp_cordic_s = ((uint32_t)1U<< cordic_count);
 8004ba0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	623b      	str	r3, [r7, #32]
    temp_cordic_scale =(int32_t)temp_cordic_s;
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	61fb      	str	r3, [r7, #28]
    dx = cord_x / temp_cordic_scale;
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bb8:	61bb      	str	r3, [r7, #24]
    if ( cord_y > 0 )
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	dd13      	ble.n	8004be8 <MOTOR_LIB_Car2Pol+0x7c>
    {
      cord_x += (cord_y / temp_cordic_scale);
 8004bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bca:	4413      	add	r3, r2
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
      cord_y -= dx;
 8004bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
      temp_angle -= MOTOR_LIB_E[cordic_count];
 8004bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bda:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <MOTOR_LIB_Car2Pol+0x118>)
 8004bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be6:	e012      	b.n	8004c0e <MOTOR_LIB_Car2Pol+0xa2>
    }
    else
    {
      cord_x -= (cord_y / temp_cordic_scale);
 8004be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
      cord_y += dx;
 8004bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
      temp_angle += MOTOR_LIB_E[cordic_count];
 8004bfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c02:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <MOTOR_LIB_Car2Pol+0x118>)
 8004c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c0a:	4413      	add	r3, r2
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  {
     cord_x = (-cord_x);
    flag = 1;
  }

  for (cordic_count = 0U; cordic_count < MOTOR_LIB_CORDIC_ITERATIONS; cordic_count++)
 8004c0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c12:	3301      	adds	r3, #1
 8004c14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004c18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c1c:	2b0e      	cmp	r3, #14
 8004c1e:	d9bf      	bls.n	8004ba0 <MOTOR_LIB_Car2Pol+0x34>
      cord_x -= (cord_y / temp_cordic_scale);
      cord_y += dx;
      temp_angle += MOTOR_LIB_E[cordic_count];
    }
  }
  if ( flag > 0)
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	dd0d      	ble.n	8004c42 <MOTOR_LIB_Car2Pol+0xd6>
  {
    *angle = (int16_t)((temp_angle + (int32_t)0x80000000)/(int32_t)MOTOR_LIB_2POW16);
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c2c:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <MOTOR_LIB_Car2Pol+0x11c>)
 8004c2e:	fb82 1203 	smull	r1, r2, r2, r3
 8004c32:	441a      	add	r2, r3
 8004c34:	13d2      	asrs	r2, r2, #15
 8004c36:	17db      	asrs	r3, r3, #31
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	e00b      	b.n	8004c5a <MOTOR_LIB_Car2Pol+0xee>
  }
  else
  {
    *angle = (int16_t)((-temp_angle)/(int32_t)MOTOR_LIB_2POW16);
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	425b      	negs	r3, r3
 8004c46:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <MOTOR_LIB_Car2Pol+0x11c>)
 8004c48:	fb82 1203 	smull	r1, r2, r2, r3
 8004c4c:	441a      	add	r2, r3
 8004c4e:	13d2      	asrs	r2, r2, #15
 8004c50:	17db      	asrs	r3, r3, #31
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	801a      	strh	r2, [r3, #0]
  }
  return_val = (int32_t)((cord_x * MOTOR_LIB_INV_KCORDIC)/ MOTOR_LIB_AMPSCALE);
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <MOTOR_LIB_Car2Pol+0x120>)
 8004c68:	fb82 1203 	smull	r1, r2, r2, r3
 8004c6c:	441a      	add	r2, r3
 8004c6e:	11d2      	asrs	r2, r2, #7
 8004c70:	17db      	asrs	r3, r3, #31
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	617b      	str	r3, [r7, #20]
  return (uint32_t)(return_val);
 8004c76:	697b      	ldr	r3, [r7, #20]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	373c      	adds	r7, #60	; 0x3c
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	080088c0 	.word	0x080088c0
 8004c88:	80008001 	.word	0x80008001
 8004c8c:	80808081 	.word	0x80808081

08004c90 <MOTOR_LIB_ParkTransform>:

/**
 * This function is the implementation of park transform.
 */
int32_t MOTOR_LIB_ParkTransform(int32_t i_alpha,int32_t i_beta,int16_t angle,int32_t *iq)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08c      	sub	sp, #48	; 0x30
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	80fb      	strh	r3, [r7, #6]
  uint8_t cordic_count, flag=0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  int32_t temp_cordic_scale,dx,cord_x =i_beta,cord_y=i_alpha;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t temp_angle = angle * (int32_t)MOTOR_LIB_2POW16;
 8004cae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	1a9b      	subs	r3, r3, r2
 8004cb8:	623b      	str	r3, [r7, #32]
  uint32_t temp_cordic_s;

  if ( MOTOR_LIB_abs(temp_angle) > 0x40000000U)
 8004cba:	6a38      	ldr	r0, [r7, #32]
 8004cbc:	f7ff ff42 	bl	8004b44 <MOTOR_LIB_abs>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc6:	d909      	bls.n	8004cdc <MOTOR_LIB_ParkTransform+0x4c>
  {
    temp_angle = (int32_t)((int32_t)0x80000000 - temp_angle);
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 8004cce:	623b      	str	r3, [r7, #32]
    cord_x = -cord_x;
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	425b      	negs	r3, r3
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    flag = 1U;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  }


  for (cordic_count = 0U; cordic_count < MOTOR_LIB_CORDIC_ITERATIONS; cordic_count++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004ce2:	e03b      	b.n	8004d5c <MOTOR_LIB_ParkTransform+0xcc>
  {
    temp_cordic_s = ((uint32_t)1<< cordic_count);
 8004ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ce8:	2201      	movs	r2, #1
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	61fb      	str	r3, [r7, #28]
    temp_cordic_scale =(int32_t)temp_cordic_s ;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	61bb      	str	r3, [r7, #24]
    dx = cord_x / temp_cordic_scale;
 8004cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]

    if (temp_angle > 0)
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dd13      	ble.n	8004d2c <MOTOR_LIB_ParkTransform+0x9c>
    {
      cord_x -= cord_y / temp_cordic_scale;
 8004d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
      cord_y += dx;
 8004d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	4413      	add	r3, r2
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
      temp_angle -= MOTOR_LIB_E[cordic_count];
 8004d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d1e:	4a25      	ldr	r2, [pc, #148]	; (8004db4 <MOTOR_LIB_ParkTransform+0x124>)
 8004d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d24:	6a3a      	ldr	r2, [r7, #32]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	e012      	b.n	8004d52 <MOTOR_LIB_ParkTransform+0xc2>
    }
    else
    {
      cord_x += cord_y / temp_cordic_scale;
 8004d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d36:	4413      	add	r3, r2
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
      cord_y -= dx;
 8004d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
      temp_angle += MOTOR_LIB_E[cordic_count];
 8004d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d46:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <MOTOR_LIB_ParkTransform+0x124>)
 8004d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4c:	6a3a      	ldr	r2, [r7, #32]
 8004d4e:	4413      	add	r3, r2
 8004d50:	623b      	str	r3, [r7, #32]
    cord_x = -cord_x;
    flag = 1U;
  }


  for (cordic_count = 0U; cordic_count < MOTOR_LIB_CORDIC_ITERATIONS; cordic_count++)
 8004d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d56:	3301      	adds	r3, #1
 8004d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d60:	2b0e      	cmp	r3, #14
 8004d62:	d9bf      	bls.n	8004ce4 <MOTOR_LIB_ParkTransform+0x54>
      cord_x += cord_y / temp_cordic_scale;
      cord_y -= dx;
      temp_angle += MOTOR_LIB_E[cordic_count];
    }
  }
  *iq = (int32_t)((cord_x*MOTOR_LIB_INV_KCORDIC)/ MOTOR_LIB_MPS);
 8004d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	4a11      	ldr	r2, [pc, #68]	; (8004db8 <MOTOR_LIB_ParkTransform+0x128>)
 8004d72:	fb82 1203 	smull	r1, r2, r2, r3
 8004d76:	441a      	add	r2, r3
 8004d78:	11d2      	asrs	r2, r2, #7
 8004d7a:	17db      	asrs	r3, r3, #31
 8004d7c:	1ad2      	subs	r2, r2, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	601a      	str	r2, [r3, #0]
  if (flag > 0U)
 8004d82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <MOTOR_LIB_ParkTransform+0x100>
  {
    cord_y = (-cord_y);
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	425b      	negs	r3, r3
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return ((int32_t)((cord_y*MOTOR_LIB_INV_KCORDIC)/ MOTOR_LIB_MPS));
 8004d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	4a06      	ldr	r2, [pc, #24]	; (8004db8 <MOTOR_LIB_ParkTransform+0x128>)
 8004d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8004da2:	441a      	add	r2, r3
 8004da4:	11d2      	asrs	r2, r2, #7
 8004da6:	17db      	asrs	r3, r3, #31
 8004da8:	1ad3      	subs	r3, r2, r3
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3730      	adds	r7, #48	; 0x30
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	080088c0 	.word	0x080088c0
 8004db8:	80808081 	.word	0x80808081

08004dbc <MOTOR_LIB_IParkTransform>:
 * This function is the implementation of Inverse park transform.
 * Valpha  = k/4*(Vd*cos(Angle)- Vq*sin(Angle))
 * Vbeta   = k/4*(Vd*sin(Angle)+ Vq*cos(Angle))
 */
int32_t MOTOR_LIB_IParkTransform(int32_t vd,int32_t vq,int16_t angle,int32_t *v_beta)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08c      	sub	sp, #48	; 0x30
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	80fb      	strh	r3, [r7, #6]
  uint8_t cordic_count, flag=0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  int32_t temp_cordic_scale,dx,cord_x =vd,cord_y=vq;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t temp_angle = angle * (int32_t)MOTOR_LIB_2POW16;
 8004dda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004dde:	4613      	mov	r3, r2
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	623b      	str	r3, [r7, #32]
  uint32_t temp_cordic_s;

  if ( MOTOR_LIB_abs(temp_angle) > 0x40000000U)
 8004de6:	6a38      	ldr	r0, [r7, #32]
 8004de8:	f7ff feac 	bl	8004b44 <MOTOR_LIB_abs>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d909      	bls.n	8004e08 <MOTOR_LIB_IParkTransform+0x4c>
  {
    temp_angle = (int32_t)((int32_t)0x80000000 - temp_angle);
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 8004dfa:	623b      	str	r3, [r7, #32]
    cord_x = -cord_x;
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	425b      	negs	r3, r3
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
    flag = 1U;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  }

  for (cordic_count = 0U; cordic_count < MOTOR_LIB_CORDIC_ITERATIONS; cordic_count++)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e0e:	e03b      	b.n	8004e88 <MOTOR_LIB_IParkTransform+0xcc>
  {
    temp_cordic_s = ((uint32_t)1<< cordic_count);
 8004e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e14:	2201      	movs	r2, #1
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	61fb      	str	r3, [r7, #28]
    temp_cordic_scale =(int32_t)temp_cordic_s ;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	61bb      	str	r3, [r7, #24]
    dx = cord_x / temp_cordic_scale;
 8004e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]

    if (temp_angle > 0)
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	dd13      	ble.n	8004e58 <MOTOR_LIB_IParkTransform+0x9c>
    {
      cord_x -= cord_y / temp_cordic_scale;
 8004e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
      cord_y += dx;
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	4413      	add	r3, r2
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
      temp_angle -= MOTOR_LIB_E[cordic_count];
 8004e46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e4a:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <MOTOR_LIB_IParkTransform+0x124>)
 8004e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e50:	6a3a      	ldr	r2, [r7, #32]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	623b      	str	r3, [r7, #32]
 8004e56:	e012      	b.n	8004e7e <MOTOR_LIB_IParkTransform+0xc2>
    }
    else
    {
      cord_x += cord_y / temp_cordic_scale;
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e62:	4413      	add	r3, r2
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
      cord_y -= dx;
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
      temp_angle += MOTOR_LIB_E[cordic_count];
 8004e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e72:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <MOTOR_LIB_IParkTransform+0x124>)
 8004e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e78:	6a3a      	ldr	r2, [r7, #32]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	623b      	str	r3, [r7, #32]
    temp_angle = (int32_t)((int32_t)0x80000000 - temp_angle);
    cord_x = -cord_x;
    flag = 1U;
  }

  for (cordic_count = 0U; cordic_count < MOTOR_LIB_CORDIC_ITERATIONS; cordic_count++)
 8004e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e82:	3301      	adds	r3, #1
 8004e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e8c:	2b0e      	cmp	r3, #14
 8004e8e:	d9bf      	bls.n	8004e10 <MOTOR_LIB_IParkTransform+0x54>
      cord_x += cord_y / temp_cordic_scale;
      cord_y -= dx;
      temp_angle += MOTOR_LIB_E[cordic_count];
    }
  }
  if (flag > 0U)
 8004e90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <MOTOR_LIB_IParkTransform+0xe2>
  {
    cord_y = ( -cord_y );
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	425b      	negs	r3, r3
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  *v_beta = (int32_t)((cord_y*MOTOR_LIB_INV_KCORDIC)/ MOTOR_LIB_MPS);
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <MOTOR_LIB_IParkTransform+0x128>)
 8004eac:	fb82 1203 	smull	r1, r2, r2, r3
 8004eb0:	441a      	add	r2, r3
 8004eb2:	11d2      	asrs	r2, r2, #7
 8004eb4:	17db      	asrs	r3, r3, #31
 8004eb6:	1ad2      	subs	r2, r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	601a      	str	r2, [r3, #0]
  return ((int32_t)((cord_x*MOTOR_LIB_INV_KCORDIC)/ MOTOR_LIB_MPS));
 8004ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <MOTOR_LIB_IParkTransform+0x128>)
 8004eca:	fb82 1203 	smull	r1, r2, r2, r3
 8004ece:	441a      	add	r2, r3
 8004ed0:	11d2      	asrs	r2, r2, #7
 8004ed2:	17db      	asrs	r3, r3, #31
 8004ed4:	1ad3      	subs	r3, r2, r3
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3730      	adds	r7, #48	; 0x30
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	080088c0 	.word	0x080088c0
 8004ee4:	80808081 	.word	0x80808081

08004ee8 <MOTOR_LIB_ClarkTransform>:
/**
 * This function is the implementation of Clarke transform using 2 Phase current.
 */

int32_t MOTOR_LIB_ClarkTransform(int32_t phase_a, int32_t phase_b, int32_t *i_alpha)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  int32_t temp_scale;
  temp_scale = (int32_t)((uint32_t)1U<<15U);
 8004ef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef8:	617b      	str	r3, [r7, #20]
  *i_alpha  = (int32_t)(phase_a);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	601a      	str	r2, [r3, #0]
  return  (int32_t)(((phase_a + (2 * phase_b))*(MOTOR_LIB_INVSQRT3))/ temp_scale);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	005a      	lsls	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	f644 12e6 	movw	r2, #18918	; 0x49e6
 8004f0c:	fb02 f203 	mul.w	r2, r2, r3
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop

08004f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <__NVIC_GetPriorityGrouping+0x18>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f30:	0a1b      	lsrs	r3, r3, #8
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	e000ed00 	.word	0xe000ed00

08004f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	db0b      	blt.n	8004f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004f52:	4908      	ldr	r1, [pc, #32]	; (8004f74 <__NVIC_EnableIRQ+0x34>)
 8004f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	79fa      	ldrb	r2, [r7, #7]
 8004f5c:	f002 021f 	and.w	r2, r2, #31
 8004f60:	2001      	movs	r0, #1
 8004f62:	fa00 f202 	lsl.w	r2, r0, r2
 8004f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	e000e100 	.word	0xe000e100

08004f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	db0a      	blt.n	8004fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8c:	490d      	ldr	r1, [pc, #52]	; (8004fc4 <__NVIC_SetPriority+0x4c>)
 8004f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	0092      	lsls	r2, r2, #2
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004fa0:	e00a      	b.n	8004fb8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa2:	4909      	ldr	r1, [pc, #36]	; (8004fc8 <__NVIC_SetPriority+0x50>)
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	3b04      	subs	r3, #4
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	0092      	lsls	r2, r2, #2
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	761a      	strb	r2, [r3, #24]
  }
}
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	e000e100 	.word	0xe000e100
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b089      	sub	sp, #36	; 0x24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f1c3 0307 	rsb	r3, r3, #7
 8004fe6:	2b06      	cmp	r3, #6
 8004fe8:	bf28      	it	cs
 8004fea:	2306      	movcs	r3, #6
 8004fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3306      	adds	r3, #6
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d902      	bls.n	8004ffc <NVIC_EncodePriority+0x30>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <NVIC_EncodePriority+0x32>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2201      	movs	r2, #1
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	1e5a      	subs	r2, r3, #1
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	401a      	ands	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2101      	movs	r1, #1
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	1e59      	subs	r1, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8005020:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8005022:	4618      	mov	r0, r3
 8005024:	3724      	adds	r7, #36	; 0x24
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop

08005030 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b25b      	sxtb	r3, r3
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff ff7e 	bl	8004f40 <__NVIC_EnableIRQ>
}
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop

0800504c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	781c      	ldrb	r4, [r3, #0]
 8005058:	f7ff ff64 	bl	8004f24 <__NVIC_GetPriorityGrouping>
 800505c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8005062:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8005068:	4608      	mov	r0, r1
 800506a:	4611      	mov	r1, r2
 800506c:	461a      	mov	r2, r3
 800506e:	f7ff ffad 	bl	8004fcc <NVIC_EncodePriority>
 8005072:	4602      	mov	r2, r0
 8005074:	b263      	sxtb	r3, r4
 8005076:	4618      	mov	r0, r3
 8005078:	4611      	mov	r1, r2
 800507a:	f7ff ff7d 	bl	8004f78 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	78db      	ldrb	r3, [r3, #3]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff ffd2 	bl	8005030 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	bd90      	pop	{r4, r7, pc}
 8005096:	bf00      	nop

08005098 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]
}
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop

080050b8 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	7b5b      	ldrb	r3, [r3, #13]
 80050c4:	f083 0301 	eor.w	r3, r3, #1
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00f      	beq.n	80050ee <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	7b1b      	ldrb	r3, [r3, #12]
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	f7fb ff95 	bl	8001008 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ffd8 	bl	8005098 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60da      	str	r2, [r3, #12]
}
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop

08005118 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7b5b      	ldrb	r3, [r3, #13]
 8005124:	f083 0301 	eor.w	r3, r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00f      	beq.n	800514e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	7b1b      	ldrb	r3, [r3, #12]
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	f7fb fe55 	bl	8000de8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff ffd8 	bl	80050f8 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	3310      	adds	r3, #16
 800516c:	4619      	mov	r1, r3
 800516e:	2301      	movs	r3, #1
 8005170:	408b      	lsls	r3, r1
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	7e1b      	ldrb	r3, [r3, #24]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d149      	bne.n	8005228 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	f7fc fe66 	bl	8001e70 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e02f      	b.n	800520a <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b2:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4608      	mov	r0, r1
 80051c0:	4619      	mov	r1, r3
 80051c2:	f7fc feaf 	bl	8001f24 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	2103      	movs	r1, #3
 80051d4:	f7fc ff36 	bl	8002044 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e0:	7a1b      	ldrb	r3, [r3, #8]
 80051e2:	f083 0301 	eor.w	r3, r3, #1
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	4618      	mov	r0, r3
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	f7ff ffb0 	bl	8005158 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005200:	2200      	movs	r2, #0
 8005202:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3301      	adds	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d9cc      	bls.n	80051aa <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	7e5b      	ldrb	r3, [r3, #25]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	4618      	mov	r0, r3
 800521e:	f7fc fe51 	bl	8001ec4 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	7e1b      	ldrb	r3, [r3, #24]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	7c1a      	ldrb	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4608      	mov	r0, r1
 800524a:	4611      	mov	r1, r2
 800524c:	461a      	mov	r2, r3
 800524e:	f7fb f8ab 	bl	80003a8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6819      	ldr	r1, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	7c1a      	ldrb	r2, [r3, #16]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7c5b      	ldrb	r3, [r3, #17]
 800525e:	4608      	mov	r0, r1
 8005260:	4611      	mov	r1, r2
 8005262:	461a      	mov	r2, r3
 8005264:	f7fc fad2 	bl	800180c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop

08005274 <XMC_DAC_EnableSimultaneousDataMode>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_SimultaneousWrite(), XMC_DAC_DisableSimultaneousDataMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_EnableSimultaneousDataMode(XMC_DAC_t *const dac)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_DAC_EnableSimultaneousDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  
  dac->DACCFG[0].high |= DAC_DAC0CFG1_DATMOD_Msk;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	609a      	str	r2, [r3, #8]
}
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop

08005294 <XMC_DAC_CH_Write>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_CH_StartRampMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_Write(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t data)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
 80052a0:	4613      	mov	r3, r2
 80052a2:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_DAC_CH_Write: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_Write: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACDATA[channel] = data;
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	883a      	ldrh	r2, [r7, #0]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	605a      	str	r2, [r3, #4]
}
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	460b      	mov	r3, r1
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 80052ca:	7af8      	ldrb	r0, [r7, #11]
 80052cc:	7afb      	ldrb	r3, [r7, #11]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	431a      	orrs	r2, r3
 80052de:	68f9      	ldr	r1, [r7, #12]
 80052e0:	00c3      	lsls	r3, r0, #3
 80052e2:	440b      	add	r3, r1
 80052e4:	605a      	str	r2, [r3, #4]
                             mode;
}
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <XMC_DAC_CH_EnableEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableEvent()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableEvent(XMC_DAC_t *const dac, const uint8_t channel)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_EnableEvent: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableEvent: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SREN_Msk;
 80052fc:	78f8      	ldrb	r0, [r7, #3]
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	00c3      	lsls	r3, r0, #3
 8005310:	440b      	add	r3, r1
 8005312:	605a      	str	r2, [r3, #4]
}
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop

08005320 <XMC_DAC_CH_SetOutputScale>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetOutputScale()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetOutputScale(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_OUTPUT_SCALE_t scale)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
 800532c:	4613      	mov	r3, r2
 800532e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetOutputScale: scale parameter not valid\n", XMC_DAC_IS_OUTPUT_SCALE_VALID(scale));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_MULDIV_Msk | DAC_DAC0CFG1_SCALE_Msk)) |
 8005330:	78f8      	ldrb	r0, [r7, #3]
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4413      	add	r3, r2
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f023 020f 	bic.w	r2, r3, #15
 8005340:	78bb      	ldrb	r3, [r7, #2]
 8005342:	431a      	orrs	r2, r3
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	00c3      	lsls	r3, r0, #3
 8005348:	440b      	add	r3, r1
 800534a:	609a      	str	r2, [r3, #8]
                              scale;
}
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop

08005358 <DAC_ModeConfig>:
  XMC_DAC_CH_SetRampStop(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, stop_ramp);
}

/* This API will configure DAC mode depends upon the user configuration */
XMC_DAC_CH_STATUS_t DAC_ModeConfig(const DAC_t * const HandlePtr)
{
 8005358:	b5b0      	push	{r4, r5, r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af02      	add	r7, sp, #8
 800535e:	6078      	str	r0, [r7, #4]
  XMC_DAC_CH_STATUS_t api_status = XMC_DAC_CH_STATUS_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]
  /* Initialize DAC configuration created by the user */
  if ( XMC_DAC_CH_MODE_PATTERN == HandlePtr->dac_mode )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800536c:	d115      	bne.n	800539a <DAC_ModeConfig+0x42>
  {
    api_status = XMC_DAC_CH_StartPatternMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	7c1c      	ldrb	r4, [r3, #16]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	9200      	str	r2, [sp, #0]
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	462a      	mov	r2, r5
 800538e:	4623      	mov	r3, r4
 8005390:	f7fc f974 	bl	800167c <XMC_DAC_CH_StartPatternMode>
 8005394:	4603      	mov	r3, r0
 8005396:	73fb      	strb	r3, [r7, #15]
 8005398:	e085      	b.n	80054a6 <DAC_ModeConfig+0x14e>
    HandlePtr->dac_pat_table_ptr,HandlePtr->dac_sign_output,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else if ( XMC_DAC_CH_MODE_SINGLE == HandlePtr->dac_mode )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a2:	d115      	bne.n	80053d0 <DAC_ModeConfig+0x78>
  {
    api_status = XMC_DAC_CH_StartSingleValueMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80053ae:	4610      	mov	r0, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	f7fc f8dd 	bl	8001570 <XMC_DAC_CH_StartSingleValueMode>
 80053b6:	4603      	mov	r3, r0
 80053b8:	73fb      	strb	r3, [r7, #15]
    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80053c4:	4610      	mov	r0, r2
 80053c6:	4619      	mov	r1, r3
 80053c8:	2200      	movs	r2, #0
 80053ca:	f7ff ff63 	bl	8005294 <XMC_DAC_CH_Write>
 80053ce:	e06a      	b.n	80054a6 <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_DATA ==  HandlePtr->dac_mode )
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053d8:	d125      	bne.n	8005426 <DAC_ModeConfig+0xce>
  {
    api_status = XMC_DAC_CH_StartDataMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f7fc f8d2 	bl	8001594 <XMC_DAC_CH_StartDataMode>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
    if(1U == HandlePtr->dac_service_request)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d108      	bne.n	8005410 <DAC_ModeConfig+0xb8>
    {
      /* Enable Service Request */
      XMC_DAC_CH_EnableEvent(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005408:	4610      	mov	r0, r2
 800540a:	4619      	mov	r1, r3
 800540c:	f7ff ff70 	bl	80052f0 <XMC_DAC_CH_EnableEvent>
    }

    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800541a:	4610      	mov	r0, r2
 800541c:	4619      	mov	r1, r3
 800541e:	2200      	movs	r2, #0
 8005420:	f7ff ff38 	bl	8005294 <XMC_DAC_CH_Write>
 8005424:	e03f      	b.n	80054a6 <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_RAMP == HandlePtr->dac_mode )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800542e:	d125      	bne.n	800547c <DAC_ModeConfig+0x124>
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8b1d      	ldrh	r5, [r3, #24]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	8b5c      	ldrh	r4, [r3, #26]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	9200      	str	r2, [sp, #0]
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	462a      	mov	r2, r5
 8005450:	4623      	mov	r3, r4
 8005452:	f7fc f8cf 	bl	80015f4 <XMC_DAC_CH_StartRampMode>
 8005456:	4603      	mov	r3, r0
 8005458:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	791b      	ldrb	r3, [r3, #4]
 800546a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800546e:	b2db      	uxtb	r3, r3
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8005470:	4608      	mov	r0, r1
 8005472:	4611      	mov	r1, r2
 8005474:	461a      	mov	r2, r3
 8005476:	f7ff ff53 	bl	8005320 <XMC_DAC_CH_SetOutputScale>
 800547a:	e014      	b.n	80054a6 <DAC_ModeConfig+0x14e>
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
  }
  else if ( XMC_DAC_CH_MODE_NOISE == HandlePtr->dac_mode )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005484:	d10d      	bne.n	80054a2 <DAC_ModeConfig+0x14a>
  {
    api_status = XMC_DAC_CH_StartNoiseMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f7fc f938 	bl	800170c <XMC_DAC_CH_StartNoiseMode>
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]
 80054a0:	e001      	b.n	80054a6 <DAC_ModeConfig+0x14e>
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else
  {
    /* DAC Mode Idle */
    api_status = XMC_DAC_CH_STATUS_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	73fb      	strb	r3, [r7, #15]
  }
  return api_status;
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bdb0      	pop	{r4, r5, r7, pc}

080054b0 <DAC_Init>:
    * This function initializes DAC
    * peripheral as per the user configurations
*/

DAC_STATUS_t DAC_Init(const DAC_t * const HandlePtr)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  DAC_STATUS_t status = DAC_STATUS_SUCCESS;
 80054b8:	2300      	movs	r3, #0
 80054ba:	73fb      	strb	r3, [r7, #15]
  /*Assert variables.*/
  XMC_ASSERT(" DAC_Init: Passing argument DAC HandlePtr of type DAC_t is Null",
             (HandlePtr != (DAC_t *)NULL));

  /* Enable DAC module */
  XMC_DAC_CH_Init(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,HandlePtr->dac_config_ptr);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6819      	ldr	r1, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	4608      	mov	r0, r1
 80054cc:	4611      	mov	r1, r2
 80054ce:	461a      	mov	r2, r3
 80054d0:	f7fb ffd2 	bl	8001478 <XMC_DAC_CH_Init>
  /* ANALOG_IO initialization */
  status = (DAC_STATUS_t) ANALOG_IO_Init(HandlePtr->analog_io_config_ptr);
#endif

  /* Configure DAC with user configured mode */
  api_status = DAC_ModeConfig(HandlePtr);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ff3f 	bl	8005358 <DAC_ModeConfig>
 80054da:	4603      	mov	r3, r0
 80054dc:	73bb      	strb	r3, [r7, #14]

  /* Check if start after initialization is enabled */
  if(HandlePtr->dac_start_after_init == 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <DAC_Init+0x4c>
  {
    XMC_DAC_CH_SetMode(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, XMC_DAC_CH_MODE_IDLE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80054f2:	4610      	mov	r0, r2
 80054f4:	4619      	mov	r1, r3
 80054f6:	2200      	movs	r2, #0
 80054f8:	f7ff fee0 	bl	80052bc <XMC_DAC_CH_SetMode>
  }

  if(1U == HandlePtr->dac_coupled)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005502:	2b01      	cmp	r3, #1
 8005504:	d104      	bne.n	8005510 <DAC_Init+0x60>
  {
    /* Enable Simultaneous Data Mode */
    XMC_DAC_EnableSimultaneousDataMode(HandlePtr->dac_module_ptr);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff feb2 	bl	8005274 <XMC_DAC_EnableSimultaneousDataMode>
  }

  if(api_status != XMC_DAC_CH_STATUS_OK)
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <DAC_Init+0x6a>
  {
    status = DAC_STATUS_FAILURE;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800551a:	7bfb      	ldrb	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <__NVIC_SetPriorityGrouping+0x44>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005540:	4013      	ands	r3, r2
 8005542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800554c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005554:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8005556:	4a04      	ldr	r2, [pc, #16]	; (8005568 <__NVIC_SetPriorityGrouping+0x44>)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	60d3      	str	r3, [r2, #12]
}
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	e000ed00 	.word	0xe000ed00

0800556c <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8005572:	2001      	movs	r0, #1
 8005574:	f7ff ffd6 	bl	8005524 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005578:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800557a:	4b21      	ldr	r3, [pc, #132]	; (8005600 <SystemCoreSetup+0x94>)
 800557c:	4a21      	ldr	r2, [pc, #132]	; (8005604 <SystemCoreSetup+0x98>)
 800557e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005580:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005584:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8005586:	4a1e      	ldr	r2, [pc, #120]	; (8005600 <SystemCoreSetup+0x94>)
 8005588:	4b1d      	ldr	r3, [pc, #116]	; (8005600 <SystemCoreSetup+0x94>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005592:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8005596:	4b1c      	ldr	r3, [pc, #112]	; (8005608 <SystemCoreSetup+0x9c>)
 8005598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559c:	3314      	adds	r3, #20
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f023 030f 	bic.w	r3, r3, #15
 80055a8:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f043 0303 	orr.w	r3, r3, #3
 80055b0:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <SystemCoreSetup+0x9c>)
 80055b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b8:	3314      	adds	r3, #20
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80055be:	4a10      	ldr	r2, [pc, #64]	; (8005600 <SystemCoreSetup+0x94>)
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <SystemCoreSetup+0x94>)
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f023 0310 	bic.w	r3, r3, #16
 80055c8:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80055ca:	4a0d      	ldr	r2, [pc, #52]	; (8005600 <SystemCoreSetup+0x94>)
 80055cc:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <SystemCoreSetup+0x94>)
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f023 0308 	bic.w	r3, r3, #8
 80055d4:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80055d6:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <SystemCoreSetup+0x94>)
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <SystemCoreSetup+0x94>)
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80055e2:	4a07      	ldr	r2, [pc, #28]	; (8005600 <SystemCoreSetup+0x94>)
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <SystemCoreSetup+0x94>)
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80055ee:	4a04      	ldr	r2, [pc, #16]	; (8005600 <SystemCoreSetup+0x94>)
 80055f0:	4b03      	ldr	r3, [pc, #12]	; (8005600 <SystemCoreSetup+0x94>)
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055f8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	e000ed00 	.word	0xe000ed00
 8005604:	08000000 	.word	0x08000000
 8005608:	58001000 	.word	0x58001000

0800560c <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]

  return (status);
 800561e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8005630:	4b02      	ldr	r3, [pc, #8]	; (800563c <OSCHP_GetFrequency+0x10>)
}
 8005632:	4618      	mov	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	00b71b00 	.word	0x00b71b00

08005640 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8005640:	b5b0      	push	{r4, r5, r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8005646:	4b12      	ldr	r3, [pc, #72]	; (8005690 <SystemCoreClockSetup+0x50>)
 8005648:	1d3c      	adds	r4, r7, #4
 800564a:	461d      	mov	r5, r3
 800564c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800564e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8005654:	1d3b      	adds	r3, r7, #4
 8005656:	4618      	mov	r0, r3
 8005658:	f7fa ff80 	bl	800055c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800565c:	2000      	movs	r0, #0
 800565e:	f7fb f89f 	bl	80007a0 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8005662:	2000      	movs	r0, #0
 8005664:	f7fb f854 	bl	8000710 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8005668:	2004      	movs	r0, #4
 800566a:	f7fb f925 	bl	80008b8 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800566e:	2001      	movs	r0, #1
 8005670:	2120      	movs	r1, #32
 8005672:	f7fb f96d 	bl	8000950 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8005676:	2000      	movs	r0, #0
 8005678:	f7fb f85e 	bl	8000738 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800567c:	2001      	movs	r0, #1
 800567e:	f7fb f943 	bl	8000908 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8005682:	2001      	movs	r0, #1
 8005684:	f7fb f92c 	bl	80008e0 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bdb0      	pop	{r4, r5, r7, pc}
 800568e:	bf00      	nop
 8005690:	080089c8 	.word	0x080089c8

08005694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005698:	4b04      	ldr	r3, [pc, #16]	; (80056ac <__NVIC_GetPriorityGrouping+0x18>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056a0:	0a1b      	lsrs	r3, r3, #8
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	e000ed00 	.word	0xe000ed00

080056b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	db0b      	blt.n	80056da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80056c2:	4908      	ldr	r1, [pc, #32]	; (80056e4 <__NVIC_EnableIRQ+0x34>)
 80056c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	79fa      	ldrb	r2, [r7, #7]
 80056cc:	f002 021f 	and.w	r2, r2, #31
 80056d0:	2001      	movs	r0, #1
 80056d2:	fa00 f202 	lsl.w	r2, r0, r2
 80056d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000e100 	.word	0xe000e100

080056e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	6039      	str	r1, [r7, #0]
 80056f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	db0a      	blt.n	8005712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056fc:	490d      	ldr	r1, [pc, #52]	; (8005734 <__NVIC_SetPriority+0x4c>)
 80056fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	440b      	add	r3, r1
 800570c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005710:	e00a      	b.n	8005728 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005712:	4909      	ldr	r1, [pc, #36]	; (8005738 <__NVIC_SetPriority+0x50>)
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	3b04      	subs	r3, #4
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	0092      	lsls	r2, r2, #2
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	440b      	add	r3, r1
 8005726:	761a      	strb	r2, [r3, #24]
  }
}
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	e000e100 	.word	0xe000e100
 8005738:	e000ed00 	.word	0xe000ed00

0800573c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800573c:	b480      	push	{r7}
 800573e:	b089      	sub	sp, #36	; 0x24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f1c3 0307 	rsb	r3, r3, #7
 8005756:	2b06      	cmp	r3, #6
 8005758:	bf28      	it	cs
 800575a:	2306      	movcs	r3, #6
 800575c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	3306      	adds	r3, #6
 8005762:	2b06      	cmp	r3, #6
 8005764:	d902      	bls.n	800576c <NVIC_EncodePriority+0x30>
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	3b01      	subs	r3, #1
 800576a:	e000      	b.n	800576e <NVIC_EncodePriority+0x32>
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	2201      	movs	r2, #1
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	1e5a      	subs	r2, r3, #1
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	401a      	ands	r2, r3
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2101      	movs	r1, #1
 8005786:	fa01 f303 	lsl.w	r3, r1, r3
 800578a:	1e59      	subs	r1, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8005790:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8005792:	4618      	mov	r0, r3
 8005794:	3724      	adds	r7, #36	; 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop

080057a0 <XMC_VADC_GROUP_QueueSetGatingMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GROUP_QueueSelectGating();
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80057b2:	f023 0203 	bic.w	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /* Set the new gating mode */
  group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop

080057d8 <XMC_VADC_GROUP_QueueFlushEntries>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Initiate flushing of the queue */
  group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80057e6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 80057f0:	bf00      	nop
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f8      	beq.n	80057f2 <XMC_VADC_GROUP_QueueFlushEntries+0x1a>
  {
    /* Wait until the queue is indeed flushed */
  }
}
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop

0800580c <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <XMC_VADC_GROUP_QueueClearReqSrcEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueTriggerReqSrcEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->SEFCLR = (uint32_t)VADC_G_SEFCLR_SEV0_Msk;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
}
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop

08005844 <ADC_QUEUE_ResetListContents>:
  return version;
}
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* API to reset (De-Initialise) contents of all queue entries */
void ADC_QUEUE_ResetListContents(uint8_t instance_num)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("ADC_QUEUE_ResetListContents:Wrong Instance number",(instance_num < ADC_QUEUE_NUM_APPINSTANCES))

  /*
   * Now reset the contents of all the lists. Application later uses ADC_QUEUE_Insert() to initialise specific entries.
   */
  memset(adc_queue_list_ptrs[instance_num][ADC_QUEUE_CH_INDEX], ADC_QUEUE_INVALID_CHANNEL ,
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	4a0e      	ldr	r2, [pc, #56]	; (800588c <ADC_QUEUE_ResetListContents+0x48>)
 8005852:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005856:	4618      	mov	r0, r3
 8005858:	21ff      	movs	r1, #255	; 0xff
 800585a:	2260      	movs	r2, #96	; 0x60
 800585c:	f002 fae1 	bl	8007e22 <memset>
		 (sizeof(ADC_QUEUE_ENTRY_t)* ADC_QUEUE_NUM_CHANNELS));
  memset(adc_queue_list_ptrs[instance_num][ADC_QUEUE_POS_INDEX], ADC_QUEUE_INVALID_CHANNEL ,
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	4a0a      	ldr	r2, [pc, #40]	; (800588c <ADC_QUEUE_ResetListContents+0x48>)
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4413      	add	r3, r2
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	4618      	mov	r0, r3
 800586c:	21ff      	movs	r1, #255	; 0xff
 800586e:	2260      	movs	r2, #96	; 0x60
 8005870:	f002 fad7 	bl	8007e22 <memset>
		 (sizeof(ADC_QUEUE_ENTRY_t)* ADC_QUEUE_NUM_CHANNELS));
  memset(adc_queue_callback_list[instance_num], 0 ,(sizeof(ADC_QUEUE_EVENT_CALLBACK) * ADC_QUEUE_NUM_CHANNELS));
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	015b      	lsls	r3, r3, #5
 8005878:	4a05      	ldr	r2, [pc, #20]	; (8005890 <ADC_QUEUE_ResetListContents+0x4c>)
 800587a:	4413      	add	r3, r2
 800587c:	4618      	mov	r0, r3
 800587e:	2100      	movs	r1, #0
 8005880:	2220      	movs	r2, #32
 8005882:	f002 face 	bl	8007e22 <memset>
}
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	200004cc 	.word	0x200004cc
 8005890:	20000390 	.word	0x20000390

08005894 <ADC_QUEUE_Init>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
ADC_QUEUE_STATUS_t ADC_QUEUE_Init(ADC_QUEUE_t *const handle_ptr)
{
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  ADC_QUEUE_STATUS_t status;

  XMC_ASSERT("ADC_QUEUE_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_QUEUE_UNINITIALIZED == handle_ptr->init_status)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	7e5b      	ldrb	r3, [r3, #25]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d157      	bne.n	8005954 <ADC_QUEUE_Init+0xc0>
  {
    /*Initialization of APP 'GLOBAL_ADC'*/
    status = (ADC_QUEUE_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fc6b 	bl	8005184 <GLOBAL_ADC_Init>
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]

    /*Class Configuration*/
    XMC_VADC_GROUP_InputClassInit(handle_ptr->group_handle,handle_ptr->iclass_config_handle,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68da      	ldr	r2, [r3, #12]
                                  XMC_VADC_GROUP_CONV_STD,(uint32_t)handle_ptr->iclass_num);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	7edb      	ldrb	r3, [r3, #27]
  {
    /*Initialization of APP 'GLOBAL_ADC'*/
    status = (ADC_QUEUE_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);

    /*Class Configuration*/
    XMC_VADC_GROUP_InputClassInit(handle_ptr->group_handle,handle_ptr->iclass_config_handle,
 80058ba:	461c      	mov	r4, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4610      	mov	r0, r2
 80058c0:	6819      	ldr	r1, [r3, #0]
 80058c2:	2200      	movs	r2, #0
 80058c4:	4623      	mov	r3, r4
 80058c6:	f7fc fb61 	bl	8001f8c <XMC_VADC_GROUP_InputClassInit>
                                  XMC_VADC_GROUP_CONV_STD,(uint32_t)handle_ptr->iclass_num);

    /* Initialize the Queue hardware */
    XMC_VADC_GROUP_QueueInit(handle_ptr->group_handle,handle_ptr->queue_config_handle);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	f7fc fc3d 	bl	8002154 <XMC_VADC_GROUP_QueueInit>
  
    /* Configure the gating mode for queue*/
    XMC_VADC_GROUP_QueueSetGatingMode(handle_ptr->group_handle, handle_ptr->gating_mode);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	7c1b      	ldrb	r3, [r3, #16]
 80058e2:	4610      	mov	r0, r2
 80058e4:	4619      	mov	r1, r3
 80058e6:	f7ff ff5b 	bl	80057a0 <XMC_VADC_GROUP_QueueSetGatingMode>

    /* Clear the internal data structure of queue APP */
    ADC_QUEUE_lInitializeListToDefaults(handle_ptr->instance_number);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	7e9b      	ldrb	r3, [r3, #26]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f93e 	bl	8005b70 <ADC_QUEUE_lInitializeListToDefaults>
  
    /*Interrupt Configuration*/
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	7b1b      	ldrb	r3, [r3, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d027      	beq.n	800594e <ADC_QUEUE_Init+0xba>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	b2dc      	uxtb	r4, r3
 8005906:	f7ff fec5 	bl	8005694 <__NVIC_GetPriorityGrouping>
 800590a:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->rs_intr_handle->priority,handle_ptr->rs_intr_handle->sub_priority));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	695b      	ldr	r3, [r3, #20]
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 8005910:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->rs_intr_handle->priority,handle_ptr->rs_intr_handle->sub_priority));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4608      	mov	r0, r1
 800591a:	4611      	mov	r1, r2
 800591c:	461a      	mov	r2, r3
 800591e:	f7ff ff0d 	bl	800573c <NVIC_EncodePriority>
 8005922:	4602      	mov	r2, r0
 8005924:	b263      	sxtb	r3, r4
 8005926:	4618      	mov	r0, r3
 8005928:	4611      	mov	r1, r2
 800592a:	f7ff fedd 	bl	80056e8 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(handle_ptr->rs_intr_handle->node_id,
                              ((handle_ptr->rs_intr_handle->node_id << 8) | handle_ptr->rs_intr_handle->irqctrl));
#endif

      /* Connect RS Events to NVIC nodes */
      XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(handle_ptr->group_handle,
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	7e1b      	ldrb	r3, [r3, #24]
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	f7fc fc59 	bl	80021f0 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>
                                                      (XMC_VADC_SR_t)handle_ptr->srv_req_node);

      /* Enable Interrupt */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->rs_intr_handle->node_id);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	b25b      	sxtb	r3, r3
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff feb1 	bl	80056b0 <__NVIC_EnableIRQ>
    }
    handle_ptr->init_status = status;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7bfa      	ldrb	r2, [r7, #15]
 8005952:	765a      	strb	r2, [r3, #25]
  }
  return (handle_ptr->init_status);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	7e5b      	ldrb	r3, [r3, #25]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	bd90      	pop	{r4, r7, pc}

08005960 <ADC_QUEUE_InsertQueueEntry>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_InsertQueueEntry(ADC_QUEUE_t* handle_ptr, const ADC_QUEUE_ENTRY_t *entry)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]

  XMC_ASSERT("ADC_QUEUE_Insert:Invalid handle_ptr", (handle_ptr != NULL))
  XMC_ASSERT("ADC_QUEUE_Insert:Invalid queue entry", (entry != NULL))

  /* 1. Insert this entry into a list which is arranged on the basis of channel numbers */
  node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_CH_INDEX];
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	7e9b      	ldrb	r3, [r3, #26]
 800596e:	461a      	mov	r2, r3
 8005970:	4b33      	ldr	r3, [pc, #204]	; (8005a40 <ADC_QUEUE_InsertQueueEntry+0xe0>)
 8005972:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8005976:	613b      	str	r3, [r7, #16]
  node = node + (entry->channel_number);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	795b      	ldrb	r3, [r3, #5]
 800597c:	461a      	mov	r2, r3
 800597e:	4613      	mov	r3, r2
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	461a      	mov	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4413      	add	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
  memcpy((void *)node, (void *)entry, sizeof(ADC_QUEUE_ENTRY_t)); 
 800598e:	6938      	ldr	r0, [r7, #16]
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	220c      	movs	r2, #12
 8005994:	f002 fa3a 	bl	8007e0c <memcpy>

  /* Insert the same entry into a list which is arranged on the basis of the position of the channel in the queue */
  node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7e9b      	ldrb	r3, [r3, #26]
 800599c:	4a28      	ldr	r2, [pc, #160]	; (8005a40 <ADC_QUEUE_InsertQueueEntry+0xe0>)
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	4413      	add	r3, r2
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	613b      	str	r3, [r7, #16]
  node = node + (entry->queue_position);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	791b      	ldrb	r3, [r3, #4]
 80059aa:	461a      	mov	r2, r3
 80059ac:	4613      	mov	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	461a      	mov	r2, r3
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4413      	add	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
  memcpy((void *)node, (void *)entry, sizeof(ADC_QUEUE_ENTRY_t));
 80059bc:	6938      	ldr	r0, [r7, #16]
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	220c      	movs	r2, #12
 80059c2:	f002 fa23 	bl	8007e0c <memcpy>

  entry_callback = entry->adc_event_callback;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]
  callback_node = adc_queue_callback_list[handle_ptr->instance_number];
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7e9b      	ldrb	r3, [r3, #26]
 80059d0:	015b      	lsls	r3, r3, #5
 80059d2:	4a1c      	ldr	r2, [pc, #112]	; (8005a44 <ADC_QUEUE_InsertQueueEntry+0xe4>)
 80059d4:	4413      	add	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]
  insert_yes = (bool)true;
 80059d8:	2301      	movs	r3, #1
 80059da:	75bb      	strb	r3, [r7, #22]
  if(NULL != entry_callback)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d02b      	beq.n	8005a3a <ADC_QUEUE_InsertQueueEntry+0xda>
  {
    for(i = handle_ptr->number_valid_callback; i >= (int32_t)0;i--)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	7f5b      	ldrb	r3, [r3, #29]
 80059e6:	75fb      	strb	r3, [r7, #23]
 80059e8:	e010      	b.n	8005a0c <ADC_QUEUE_InsertQueueEntry+0xac>
    {
      if(*(callback_node + i) == entry_callback)
 80059ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	4413      	add	r3, r2
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d102      	bne.n	8005a02 <ADC_QUEUE_InsertQueueEntry+0xa2>
      {
        insert_yes = false;
 80059fc:	2300      	movs	r3, #0
 80059fe:	75bb      	strb	r3, [r7, #22]
        break;
 8005a00:	e008      	b.n	8005a14 <ADC_QUEUE_InsertQueueEntry+0xb4>
  entry_callback = entry->adc_event_callback;
  callback_node = adc_queue_callback_list[handle_ptr->instance_number];
  insert_yes = (bool)true;
  if(NULL != entry_callback)
  {
    for(i = handle_ptr->number_valid_callback; i >= (int32_t)0;i--)
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	75fb      	strb	r3, [r7, #23]
 8005a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	daea      	bge.n	80059ea <ADC_QUEUE_InsertQueueEntry+0x8a>
        insert_yes = false;
        break;
      }
    }

    if(insert_yes != false)
 8005a14:	7dbb      	ldrb	r3, [r7, #22]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00f      	beq.n	8005a3a <ADC_QUEUE_InsertQueueEntry+0xda>
    {
      adc_queue_callback_list[handle_ptr->instance_number][handle_ptr->number_valid_callback++] = entry_callback;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	7e9b      	ldrb	r3, [r3, #26]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	7f5b      	ldrb	r3, [r3, #29]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	b2d1      	uxtb	r1, r2
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	7751      	strb	r1, [r2, #29]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4905      	ldr	r1, [pc, #20]	; (8005a44 <ADC_QUEUE_InsertQueueEntry+0xe4>)
 8005a30:	00c3      	lsls	r3, r0, #3
 8005a32:	4413      	add	r3, r2
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }


}
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	200004cc 	.word	0x200004cc
 8005a44:	20000390 	.word	0x20000390

08005a48 <ADC_QUEUE_AllEntriesInserted>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_AllEntriesInserted(ADC_QUEUE_t* handle_ptr)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t pos_index;
  
  XMC_ASSERT("ADC_QUEUE_AllEntriesInserted:Invalid handle_ptr", (handle_ptr != NULL))

  /* All entries have been submitted. The queue hardware may now be programmed in the right order. */
  start_node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	7e9b      	ldrb	r3, [r3, #26]
 8005a54:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <ADC_QUEUE_AllEntriesInserted+0xa8>)
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	4413      	add	r3, r2
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Flush any entries that are currently in the queue buffer*/
  XMC_VADC_GROUP_QueueFlushEntries(handle_ptr->group_handle);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff feb8 	bl	80057d8 <XMC_VADC_GROUP_QueueFlushEntries>

  for (pos_index = 0U; pos_index < ADC_QUEUE_NUM_CHANNELS; pos_index++)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	e039      	b.n	8005ae2 <ADC_QUEUE_AllEntriesInserted+0x9a>
  {
    node = start_node +  pos_index;
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4613      	mov	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	461a      	mov	r2, r3
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
    
    if (ADC_QUEUE_INVALID_CHANNEL != node->channel_number)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	795b      	ldrb	r3, [r3, #5]
 8005a84:	2bff      	cmp	r3, #255	; 0xff
 8005a86:	d029      	beq.n	8005adc <ADC_QUEUE_AllEntriesInserted+0x94>
    {
      /* Create a queue entry object for the LLD */
      entry.channel_num   = (uint8_t) node->channel_number;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	795b      	ldrb	r3, [r3, #5]
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	7a3b      	ldrb	r3, [r7, #8]
 8005a94:	f362 0304 	bfi	r3, r2, #0, #5
 8005a98:	723b      	strb	r3, [r7, #8]
      entry.refill_needed = (uint32_t) node->refill_needed;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	79db      	ldrb	r3, [r3, #7]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	7a3b      	ldrb	r3, [r7, #8]
 8005aa6:	f362 1345 	bfi	r3, r2, #5, #1
 8005aaa:	723b      	strb	r3, [r7, #8]
      entry.generate_interrupt = (uint32_t) node->rs_event_notification;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	7a5b      	ldrb	r3, [r3, #9]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	7a3b      	ldrb	r3, [r7, #8]
 8005ab8:	f362 1386 	bfi	r3, r2, #6, #1
 8005abc:	723b      	strb	r3, [r7, #8]
      entry.external_trigger   = (uint32_t)node->trigger_needed;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	799b      	ldrb	r3, [r3, #6]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	7a3b      	ldrb	r3, [r7, #8]
 8005aca:	f362 13c7 	bfi	r3, r2, #7, #1
 8005ace:	723b      	strb	r3, [r7, #8]
      
      /* Request the LLD to insert the channel */
      XMC_VADC_GROUP_QueueInsertChannel(handle_ptr->group_handle, entry);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	f7ff fe98 	bl	800580c <XMC_VADC_GROUP_QueueInsertChannel>
  start_node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];

  /* Flush any entries that are currently in the queue buffer*/
  XMC_VADC_GROUP_QueueFlushEntries(handle_ptr->group_handle);

  for (pos_index = 0U; pos_index < ADC_QUEUE_NUM_CHANNELS; pos_index++)
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b07      	cmp	r3, #7
 8005ae6:	d9c2      	bls.n	8005a6e <ADC_QUEUE_AllEntriesInserted+0x26>
      
      /* Request the LLD to insert the channel */
      XMC_VADC_GROUP_QueueInsertChannel(handle_ptr->group_handle, entry);
    }
  }
}
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	200004cc 	.word	0x200004cc

08005af4 <ADC_QUEUE_ReqSrcEventHandler>:
    }
  }
}
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_ReqSrcEventHandler(ADC_QUEUE_t* handle_ptr)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  int32_t pos_index;
  ADC_QUEUE_EVENT_CALLBACK *callback_node;
  
  XMC_ASSERT("ADC_QUEUE_ReqSrcEventHandler:Invalid handle_ptr", (handle_ptr != NULL))

  XMC_VADC_GROUP_QueueClearReqSrcEvent(handle_ptr->group_handle);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff fe91 	bl	8005828 <XMC_VADC_GROUP_QueueClearReqSrcEvent>
  
  callback_node = adc_queue_callback_list[handle_ptr->instance_number];
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7e9b      	ldrb	r3, [r3, #26]
 8005b0a:	015b      	lsls	r3, r3, #5
 8005b0c:	4a0b      	ldr	r2, [pc, #44]	; (8005b3c <ADC_QUEUE_ReqSrcEventHandler+0x48>)
 8005b0e:	4413      	add	r3, r2
 8005b10:	60bb      	str	r3, [r7, #8]
  /* Iterate over all the valid entries and locate entries that requested a request source notification*/
  for ( pos_index = (int32_t)handle_ptr->number_valid_callback - (int32_t)1; pos_index >= (int32_t)0; pos_index--)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	7f5b      	ldrb	r3, [r3, #29]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e008      	b.n	8005b2e <ADC_QUEUE_ReqSrcEventHandler+0x3a>
  {
    (*(callback_node + pos_index))();
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	4413      	add	r3, r2
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4798      	blx	r3

  XMC_VADC_GROUP_QueueClearReqSrcEvent(handle_ptr->group_handle);
  
  callback_node = adc_queue_callback_list[handle_ptr->instance_number];
  /* Iterate over all the valid entries and locate entries that requested a request source notification*/
  for ( pos_index = (int32_t)handle_ptr->number_valid_callback - (int32_t)1; pos_index >= (int32_t)0; pos_index--)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	daf3      	bge.n	8005b1c <ADC_QUEUE_ReqSrcEventHandler+0x28>
  {
    (*(callback_node + pos_index))();
  }
}
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000390 	.word	0x20000390

08005b40 <VADC0_G0_1_IRQHandler>:

/**
 * This function invokes the Request source handler for ADC_QUEUE_0
 */
void ADC_QUEUE_0_ReqSrcEventHandler(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  ADC_QUEUE_ReqSrcEventHandler(&ADC_QUEUE_0);
 8005b44:	4801      	ldr	r0, [pc, #4]	; (8005b4c <VADC0_G0_1_IRQHandler+0xc>)
 8005b46:	f7ff ffd5 	bl	8005af4 <ADC_QUEUE_ReqSrcEventHandler>
}
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20000230 	.word	0x20000230

08005b50 <VADC0_G1_3_IRQHandler>:

/**
 * This function invokes the Request source handler for ADC_QUEUE_1
 */
void ADC_QUEUE_1_ReqSrcEventHandler(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  ADC_QUEUE_ReqSrcEventHandler(&ADC_QUEUE_1);
 8005b54:	4801      	ldr	r0, [pc, #4]	; (8005b5c <VADC0_G1_3_IRQHandler+0xc>)
 8005b56:	f7ff ffcd 	bl	8005af4 <ADC_QUEUE_ReqSrcEventHandler>
}
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000250 	.word	0x20000250

08005b60 <VADC0_G2_0_IRQHandler>:

/**
 * This function invokes the Request source handler for ADC_QUEUE_2
 */
void ADC_QUEUE_2_ReqSrcEventHandler(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  ADC_QUEUE_ReqSrcEventHandler(&ADC_QUEUE_2);
 8005b64:	4801      	ldr	r0, [pc, #4]	; (8005b6c <VADC0_G2_0_IRQHandler+0xc>)
 8005b66:	f7ff ffc5 	bl	8005af4 <ADC_QUEUE_ReqSrcEventHandler>
}
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000270 	.word	0x20000270

08005b70 <ADC_QUEUE_lInitializeListToDefaults>:



/* API generated to initialise list pointers and clear its contents*/
void ADC_QUEUE_lInitializeListToDefaults(uint8_t instance_num)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	71fb      	strb	r3, [r7, #7]

  /* Initialise list pointers of APP Instance- ADC_QUEUE_0 */
  adc_queue_list_ptrs[0][0] = adc_queue_list_ch_index_0;
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 8005b7c:	4a0c      	ldr	r2, [pc, #48]	; (8005bb0 <ADC_QUEUE_lInitializeListToDefaults+0x40>)
 8005b7e:	601a      	str	r2, [r3, #0]
  adc_queue_list_ptrs[0][1] = adc_queue_list_pos_index_0;
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 8005b82:	4a0c      	ldr	r2, [pc, #48]	; (8005bb4 <ADC_QUEUE_lInitializeListToDefaults+0x44>)
 8005b84:	605a      	str	r2, [r3, #4]
 
  /* Initialise list pointers of APP Instance- ADC_QUEUE_1 */
  adc_queue_list_ptrs[1][0] = adc_queue_list_ch_index_1;
 8005b86:	4b09      	ldr	r3, [pc, #36]	; (8005bac <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 8005b88:	4a0b      	ldr	r2, [pc, #44]	; (8005bb8 <ADC_QUEUE_lInitializeListToDefaults+0x48>)
 8005b8a:	609a      	str	r2, [r3, #8]
  adc_queue_list_ptrs[1][1] = adc_queue_list_pos_index_1;
 8005b8c:	4b07      	ldr	r3, [pc, #28]	; (8005bac <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 8005b8e:	4a0b      	ldr	r2, [pc, #44]	; (8005bbc <ADC_QUEUE_lInitializeListToDefaults+0x4c>)
 8005b90:	60da      	str	r2, [r3, #12]
 
  /* Initialise list pointers of APP Instance- ADC_QUEUE_2 */
  adc_queue_list_ptrs[2][0] = adc_queue_list_ch_index_2;
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 8005b94:	4a0a      	ldr	r2, [pc, #40]	; (8005bc0 <ADC_QUEUE_lInitializeListToDefaults+0x50>)
 8005b96:	611a      	str	r2, [r3, #16]
  adc_queue_list_ptrs[2][1] = adc_queue_list_pos_index_2;
 8005b98:	4b04      	ldr	r3, [pc, #16]	; (8005bac <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 8005b9a:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <ADC_QUEUE_lInitializeListToDefaults+0x54>)
 8005b9c:	615a      	str	r2, [r3, #20]
 
  /* Reset channels */
  ADC_QUEUE_ResetListContents(instance_num);
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fe4f 	bl	8005844 <ADC_QUEUE_ResetListContents>
}
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	200004cc 	.word	0x200004cc
 8005bb0:	200005ac 	.word	0x200005ac
 8005bb4:	2000060c 	.word	0x2000060c
 8005bb8:	2000054c 	.word	0x2000054c
 8005bbc:	200004ec 	.word	0x200004ec
 8005bc0:	2000066c 	.word	0x2000066c
 8005bc4:	200006cc 	.word	0x200006cc

08005bc8 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop

08005bec <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bfa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop

08005c10 <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c22:	0e1b      	lsrs	r3, r3, #24
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop

08005c3c <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6819      	ldr	r1, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	32a0      	adds	r2, #160	; 0xa0
 8005c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <ADC_MEASUREMENT_ADV_lInsertEntry>:
 * LOCAL ROUTINES
 **********************************************************************************************************************/
#if defined(ADC_MEASUREMENT_ADV_ADC_QUEUE_USED) || defined (ADC_MEASUREMENT_ADV_ADC_SCAN_USED)
/* Local function to insert an entry into the H/W*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lInsertEntry(const ADC_MEASUREMENT_ADV_t *const handle_ptr, uint8_t ch_num)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
#if defined(ADC_MEASUREMENT_ADV_QUEUE_USED) && defined(ADC_MEASUREMENT_ADV_ADC_QUEUE_USED)
  #if defined(ADC_MEASUREMENT_ADV_SCAN_USED) && defined(ADC_MEASUREMENT_ADV_ADC_SCAN_USED)
    else
  #endif
    {
      ADC_QUEUE_InsertQueueEntry(handle_ptr->queue_handle, handle_ptr->queue_entries[ch_num]);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68d9      	ldr	r1, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4619      	mov	r1, r3
 8005c80:	f7ff fe6e 	bl	8005960 <ADC_QUEUE_InsertQueueEntry>
    }
#endif
}
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop

08005c8c <ADC_MEASUREMENT_ADV_lRequestSrcInit>:
#endif
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Local function to do the request source initialization.*/
__STATIC_INLINE ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_lRequestSrcInit(const ADC_MEASUREMENT_ADV_t
                                                                                 *const handle_ptr)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
      else
  #endif
      {
        /* Call the function to initialise Clock and ADC global functional units*/
        status = (ADC_MEASUREMENT_ADV_STATUS_t) ADC_QUEUE_Init(handle_ptr->queue_handle);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff fdfb 	bl	8005894 <ADC_QUEUE_Init>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	73fb      	strb	r3, [r7, #15]
      }
#endif
    }
#endif
    return (status);
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <ADC_MEASUREMENT_ADV_lArbitrationStatus>:
}
#endif

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE bool ADC_MEASUREMENT_ADV_lArbitrationStatus(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  bool clock_reset_check;
  bool arbitration_status;

#if !defined(CLOCK_GATING_SUPPORTED) || !defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = (bool)false;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73bb      	strb	r3, [r7, #14]
#endif
  arbitration_status = (bool)false;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	73fb      	strb	r3, [r7, #15]
  /* To check if the arbiter is already enabled. Before checking this ensure that clock and reset states are correct */
#if defined(CLOCK_GATING_SUPPORTED) && defined(ADC_MEASUREMENT_ADV_CHECK_CLOCK_GATING)
  clock_reset_check = !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif
#ifdef PERIPHERAL_RESET_SUPPORTED
  clock_reset_check |= !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_VADC);
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	f7fa fcdf 	bl	8000680 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f083 0301 	eor.w	r3, r3, #1
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	73bb      	strb	r3, [r7, #14]
#endif
  if(clock_reset_check != (bool)false)
 8005cda:	7bbb      	ldrb	r3, [r7, #14]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x4a>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        arbitration_status = XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(group_ptrs[handle_ptr->group_index]);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7d5b      	ldrb	r3, [r3, #21]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <ADC_MEASUREMENT_ADV_lArbitrationStatus+0x54>)
 8005ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff ff8f 	bl	8005c10 <XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73fb      	strb	r3, [r7, #15]
      }
#endif
  }
  return (arbitration_status);
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	08008a30 	.word	0x08008a30

08005d04 <ADC_MEASUREMENT_ADV_lDisableArbitration>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
__STATIC_INLINE void ADC_MEASUREMENT_ADV_lDisableArbitration(const ADC_MEASUREMENT_ADV_t *const handle_ptr,
                                                             bool arbitration_status)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  if(arbitration_status == (bool)false)
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	f083 0301 	eor.w	r3, r3, #1
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <ADC_MEASUREMENT_ADV_lDisableArbitration+0x2a>
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	7d5b      	ldrb	r3, [r3, #21]
 8005d20:	461a      	mov	r2, r3
 8005d22:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <ADC_MEASUREMENT_ADV_lDisableArbitration+0x30>)
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff ff5f 	bl	8005bec <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
      }
#endif
  }
}
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	08008a30 	.word	0x08008a30

08005d38 <ADC_MEASUREMENT_ADV_lInsertChannels>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Insert channels into the hardware*/
void ADC_MEASUREMENT_ADV_lInsertChannels(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_ADC_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED
      else
  #endif
      {
        ADC_QUEUE_AllEntriesInserted(handle_ptr->queue_handle);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff fe7f 	bl	8005a48 <ADC_QUEUE_AllEntriesInserted>
      }
#endif
    }
#endif
}
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <ADC_MEASUREMENT_ADV_lSyncADCClocks>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifndef ADC_MEASUREMENT_ADV_SYNC_USED
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
 8005d56:	2303      	movs	r3, #3
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	e00a      	b.n	8005d72 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x22>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
 8005d5c:	4a19      	ldr	r2, [pc, #100]	; (8005dc4 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d64:	4618      	mov	r0, r3
 8005d66:	2100      	movs	r1, #0
 8005d68:	f7fc f96c 	bl	8002044 <XMC_VADC_GROUP_SetPowerMode>
/* Address the errata for the incorrect conversion.*/
void ADC_MEASUREMENT_ADV_lSyncADCClocks(void)
{
  int32_t group_index;

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	daf1      	bge.n	8005d5c <ADC_MEASUREMENT_ADV_lSyncADCClocks+0xc>
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
 8005d78:	2303      	movs	r3, #3
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	e012      	b.n	8005da4 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x54>
  {
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);
 8005d7e:	4a11      	ldr	r2, [pc, #68]	; (8005dc4 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x74>)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4610      	mov	r0, r2
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f7fc f975 	bl	800207c <XMC_VADC_GROUP_SetSyncSlave>

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
 8005d92:	4a0d      	ldr	r2, [pc, #52]	; (8005dc8 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	f7fc f9a7 	bl	80020ec <XMC_VADC_GROUP_CheckSlaveReadiness>
  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index >= (int32_t)0  ; group_index--)
  {
    XMC_VADC_GROUP_SetPowerMode(group_ptrs[group_index],XMC_VADC_GROUP_POWERMODE_OFF);
  }

  for (group_index = (int32_t)XMC_VADC_MAXIMUM_NUM_GROUPS - (int32_t)1; group_index > (int32_t)0  ; group_index--)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dce9      	bgt.n	8005d7e <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x2e>
    XMC_VADC_GROUP_SetSyncSlave(group_ptrs[group_index], (uint32_t)0, (uint32_t)group_index);

    XMC_VADC_GROUP_CheckSlaveReadiness(group_ptrs[0U], (uint32_t)group_index);
  }

  XMC_VADC_GROUP_SetSyncMaster(group_ptrs[0U]);
 8005daa:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fc f987 	bl	80020c0 <XMC_VADC_GROUP_SetSyncMaster>

  XMC_VADC_GROUP_SetPowerMode(group_ptrs[0U],XMC_VADC_GROUP_POWERMODE_NORMAL);
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <ADC_MEASUREMENT_ADV_lSyncADCClocks+0x78>)
 8005db4:	4618      	mov	r0, r3
 8005db6:	2103      	movs	r1, #3
 8005db8:	f7fc f944 	bl	8002044 <XMC_VADC_GROUP_SetPowerMode>
}
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	08008a30 	.word	0x08008a30
 8005dc8:	40004400 	.word	0x40004400

08005dcc <ADC_MEASUREMENT_ADV_StartADC>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the arbiter of the selected request source*/
void ADC_MEASUREMENT_ADV_StartADC(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
#ifdef ADC_MEASUREMENT_ADV_QUEUE_USED
  #ifdef ADC_MEASUREMENT_ADV_SCAN_USED
      else
  #endif
      {
        XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptrs[handle_ptr->group_index]);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	7d5b      	ldrb	r3, [r3, #21]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b04      	ldr	r3, [pc, #16]	; (8005dec <ADC_MEASUREMENT_ADV_StartADC+0x20>)
 8005ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fef1 	bl	8005bc8 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>
      }
#endif
}
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	08008a30 	.word	0x08008a30

08005df0 <ADC_MEASUREMENT_ADC_lNvicEnable>:


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Enables the NVIC(if needed) when scan/queue request source is consumed internally in the APP. */
void ADC_MEASUREMENT_ADC_lNvicEnable(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_LOCAL_QUEUE == handle_ptr->req_src))
    {
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->local_queue_handle->rs_intr_handle.node_id);
    }
#endif
}
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop

08005e04 <ADC_MEASUREMENT_ADC_lResultInit>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Configures the result results . */
__STATIC_INLINE void ADC_MEASUREMENT_ADC_lResultInit(const ADC_MEASUREMENT_ADV_CHANNEL_t *indexed)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	7a1b      	ldrb	r3, [r3, #8]
 8005e10:	461a      	mov	r2, r3
 8005e12:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <ADC_MEASUREMENT_ADC_lResultInit+0x34>)
 8005e14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	789b      	ldrb	r3, [r3, #2]
 8005e1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	4619      	mov	r1, r3
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->result_fifo_tail_number,
                                indexed->res_handle[ADC_MEASUREMENT_ADV_TAIL_RESULT_REG_CONFIG]);
  }
#endif
      /* Initialize for configured result registers For FIFO Head configuration*/
      XMC_VADC_GROUP_ResultInit(group_ptrs[indexed->group_index], (uint32_t)indexed->ch_handle->result_reg_number,
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f7ff ff05 	bl	8005c3c <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle[ADC_MEASUREMENT_ADV_HEAD_RESULT_REG_CONFIG]);
}
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	08008a30 	.word	0x08008a30

08005e3c <ADC_MEASUREMENT_ADV_Init>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_ADV_STATUS_t ADC_MEASUREMENT_ADV_Init(const ADC_MEASUREMENT_ADV_t *const handle_ptr)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint8_t total_number_of_channels;
  ADC_MEASUREMENT_ADV_STATUS_t status;
#ifdef ADC_MEASUREMENT_ADV_SHS_GAIN_NON_DEFAULT
  uint8_t channel_number;
#endif
  bool arbitration_status = (bool)false;
 8005e44:	2300      	movs	r3, #0
 8005e46:	73bb      	strb	r3, [r7, #14]

  if (ADC_MEASUREMENT_ADV_STATUS_UNINITIALIZED == *handle_ptr->init_state)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d156      	bne.n	8005f00 <ADC_MEASUREMENT_ADV_Init+0xc4>
  {

    arbitration_status = ADC_MEASUREMENT_ADV_lArbitrationStatus(handle_ptr);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ff2a 	bl	8005cac <ADC_MEASUREMENT_ADV_lArbitrationStatus>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73bb      	strb	r3, [r7, #14]

   /* Initialize the scan/queue request source.*/
   status = ADC_MEASUREMENT_ADV_lRequestSrcInit(handle_ptr);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff ff15 	bl	8005c8c <ADC_MEASUREMENT_ADV_lRequestSrcInit>
 8005e62:	4603      	mov	r3, r0
 8005e64:	737b      	strb	r3, [r7, #13]

   /* Disable the Arbitration if no other instance has enabled it*/
   ADC_MEASUREMENT_ADV_lDisableArbitration(handle_ptr,arbitration_status);
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	f7ff ff4a 	bl	8005d04 <ADC_MEASUREMENT_ADV_lDisableArbitration>
    {
      /*  Configure the Sync conversion operation */
      ADC_MEASUREMENT_ADV_lSyncInit(handle_ptr);
    }
#else
   ADC_MEASUREMENT_ADV_lSyncADCClocks();
 8005e70:	f7ff ff6e 	bl	8005d50 <ADC_MEASUREMENT_ADV_lSyncADCClocks>
#ifdef ADC_MEASUREMENT_ADV_MUX_USED
  #ifdef ADC_MEASUREMENT_ADV_MUX_NOT_ALL_USED
    if (handle_ptr->event_config != NULL)
  #endif
    {
      (handle_ptr->event_config)();
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4798      	blx	r3
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	7ddb      	ldrb	r3, [r3, #23]
 8005e7e:	733b      	strb	r3, [r7, #12]
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	e01b      	b.n	8005ebe <ADC_MEASUREMENT_ADV_Init+0x82>
    {
      indexed = handle_ptr->channel_array[ch_num];
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60bb      	str	r3, [r7, #8]

      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(group_ptrs[indexed->group_index],(uint32_t)indexed->ch_num, indexed->ch_handle);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	7a1b      	ldrb	r3, [r3, #8]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <ADC_MEASUREMENT_ADV_Init+0xd4>)
 8005e9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	7a5b      	ldrb	r3, [r3, #9]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4610      	mov	r0, r2
 8005eac:	461a      	mov	r2, r3
 8005eae:	f7fc f9bb 	bl	8002228 <XMC_VADC_GROUP_ChannelInit>
                                        channel_number);
  #endif
#endif

      /* Result Init both with and without FIFO */
      ADC_MEASUREMENT_ADC_lResultInit(indexed);
 8005eb2:	68b8      	ldr	r0, [r7, #8]
 8005eb4:	f7ff ffa6 	bl	8005e04 <ADC_MEASUREMENT_ADC_lResultInit>
      (handle_ptr->event_config)();
    }
#endif

    total_number_of_channels = (uint8_t)handle_ptr->total_number_of_channels;
    for (ch_num = (uint8_t)0; ch_num < (uint8_t)total_number_of_channels; ch_num++)
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	7bfa      	ldrb	r2, [r7, #15]
 8005ec0:	7b3b      	ldrb	r3, [r7, #12]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3df      	bcc.n	8005e86 <ADC_MEASUREMENT_ADV_Init+0x4a>
#if defined(ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED) || defined(ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED)
    if( (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_SCAN == handle_ptr->req_src) ||
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE == handle_ptr->req_src))
#endif
    {
      for (ch_num = (uint8_t)0; ch_num < (uint8_t)handle_ptr->total_number_of_entries; ch_num++)
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]
 8005eca:	e007      	b.n	8005edc <ADC_MEASUREMENT_ADV_Init+0xa0>
      {
        ADC_MEASUREMENT_ADV_lInsertEntry(handle_ptr,ch_num);
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f7ff fec5 	bl	8005c60 <ADC_MEASUREMENT_ADV_lInsertEntry>
#if defined(ADC_MEASUREMENT_ADV_LOCAL_SCAN_USED) || defined(ADC_MEASUREMENT_ADV_LOCAL_QUEUE_USED)
    if( (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_SCAN == handle_ptr->req_src) ||
        (ADC_MEASUREMENT_ADV_REQUEST_SOURCE_QUEUE == handle_ptr->req_src))
#endif
    {
      for (ch_num = (uint8_t)0; ch_num < (uint8_t)handle_ptr->total_number_of_entries; ch_num++)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	7d9b      	ldrb	r3, [r3, #22]
 8005ee0:	7bfa      	ldrb	r2, [r7, #15]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d3f2      	bcc.n	8005ecc <ADC_MEASUREMENT_ADV_Init+0x90>
      }
    }
#endif

    /* Enables the NVIC node if NVIC node is consumed inside the APP*/
    ADC_MEASUREMENT_ADC_lNvicEnable(handle_ptr);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ff82 	bl	8005df0 <ADC_MEASUREMENT_ADC_lNvicEnable>

    /* Load the queue/scan entries into the hardware */
    ADC_MEASUREMENT_ADV_lInsertChannels(handle_ptr);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff ff23 	bl	8005d38 <ADC_MEASUREMENT_ADV_lInsertChannels>
#ifdef ADC_MEASUREMENT_ADV_START_ADC
  #ifdef ADC_MEASUREMENT_ADV_NOT_ALL_REQ_START
    if ((bool)false  != handle_ptr->start_at_initialization)
  #endif
    {
      ADC_MEASUREMENT_ADV_StartADC(handle_ptr);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff ff6a 	bl	8005dcc <ADC_MEASUREMENT_ADV_StartADC>
    }
#endif

    *handle_ptr->init_state = status;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	7b7a      	ldrb	r2, [r7, #13]
 8005efe:	701a      	strb	r2, [r3, #0]
  }
  return (*handle_ptr->init_state);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	781b      	ldrb	r3, [r3, #0]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	08008a30 	.word	0x08008a30

08005f14 <ADC_U_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void ADC_U_event_config(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0

	/* Result Event Node Mux Configuration for Channel_A (Group-0 channel-0 Result_Register-15)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G0, 15U, XMC_VADC_SR_GROUP_SR0);
 8005f18:	4802      	ldr	r0, [pc, #8]	; (8005f24 <ADC_U_event_config+0x10>)
 8005f1a:	210f      	movs	r1, #15
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f7fc f9e7 	bl	80022f0 <XMC_VADC_GROUP_SetResultInterruptNode>

}
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40004400 	.word	0x40004400

08005f28 <ADC_V_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void ADC_V_event_config(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0

	/* Result Event Node Mux Configuration for Channel_A (Group-1 channel-2 Result_Register-3)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G1, 3U, XMC_VADC_SR_GROUP_SR0);
 8005f2c:	4802      	ldr	r0, [pc, #8]	; (8005f38 <ADC_V_event_config+0x10>)
 8005f2e:	2103      	movs	r1, #3
 8005f30:	2200      	movs	r2, #0
 8005f32:	f7fc f9dd 	bl	80022f0 <XMC_VADC_GROUP_SetResultInterruptNode>

}
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40004800 	.word	0x40004800

08005f3c <ADC_W_event_config>:

/* This function would be called in the ADC_MEASUREMENT_Init() to initialize the SR lines of the
 * Result event/channel event.
 */
static void ADC_W_event_config(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0

	/* Result Event Node Mux Configuration for Channel_A (Group-2 channel-0 Result_Register-0)*/
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G2, 0U, XMC_VADC_SR_GROUP_SR1);
 8005f40:	4802      	ldr	r0, [pc, #8]	; (8005f4c <ADC_W_event_config+0x10>)
 8005f42:	2100      	movs	r1, #0
 8005f44:	2201      	movs	r2, #1
 8005f46:	f7fc f9d3 	bl	80022f0 <XMC_VADC_GROUP_SetResultInterruptNode>

}
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40004c00 	.word	0x40004c00

08005f50 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8005f56:	2300      	movs	r3, #0
 8005f58:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8005f5a:	4841      	ldr	r0, [pc, #260]	; (8006060 <DAVE_Init+0x110>)
 8005f5c:	f7ff fb56 	bl	800560c <CLOCK_XMC4_Init>
 8005f60:	4603      	mov	r3, r0
 8005f62:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <DAVE_Init+0x24>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_enkoder */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_enkoder); 
 8005f6a:	483e      	ldr	r0, [pc, #248]	; (8006064 <DAVE_Init+0x114>)
 8005f6c:	f7fd fc82 	bl	8003874 <SPI_MASTER_Init>
 8005f70:	4603      	mov	r3, r0
 8005f72:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <DAVE_Init+0x34>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 8005f7a:	483b      	ldr	r0, [pc, #236]	; (8006068 <DAVE_Init+0x118>)
 8005f7c:	f7fd fa9e 	bl	80034bc <SYSTIMER_Init>
 8005f80:	4603      	mov	r3, r0
 8005f82:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED); 
 8005f8a:	4838      	ldr	r0, [pc, #224]	; (800606c <DAVE_Init+0x11c>)
 8005f8c:	f7ff f952 	bl	8005234 <DIGITAL_IO_Init>
 8005f90:	4603      	mov	r3, r0
 8005f92:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d104      	bne.n	8005fa4 <DAVE_Init+0x54>
  {
	 /**  Initialization of PWM_SVM APP instance SVPWM */
	 init_status = (DAVE_STATUS_t)PWM_SVM_Init(&SVPWM); 
 8005f9a:	4835      	ldr	r0, [pc, #212]	; (8006070 <DAVE_Init+0x120>)
 8005f9c:	f7fe fb36 	bl	800460c <PWM_SVM_Init>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <DAVE_Init+0x64>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC_U */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC_U); 
 8005faa:	4832      	ldr	r0, [pc, #200]	; (8006074 <DAVE_Init+0x124>)
 8005fac:	f7ff ff46 	bl	8005e3c <ADC_MEASUREMENT_ADV_Init>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <DAVE_Init+0x74>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC_V */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC_V); 
 8005fba:	482f      	ldr	r0, [pc, #188]	; (8006078 <DAVE_Init+0x128>)
 8005fbc:	f7ff ff3e 	bl	8005e3c <ADC_MEASUREMENT_ADV_Init>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d104      	bne.n	8005fd4 <DAVE_Init+0x84>
  {
	 /**  Initialization of ADC_MEASUREMENT_ADV APP instance ADC_W */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_ADV_Init(&ADC_W); 
 8005fca:	482c      	ldr	r0, [pc, #176]	; (800607c <DAVE_Init+0x12c>)
 8005fcc:	f7ff ff36 	bl	8005e3c <ADC_MEASUREMENT_ADV_Init>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <DAVE_Init+0x94>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 8005fda:	4829      	ldr	r0, [pc, #164]	; (8006080 <DAVE_Init+0x130>)
 8005fdc:	f7ff f836 	bl	800504c <INTERRUPT_Init>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <DAVE_Init+0xa4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DC_CAL */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DC_CAL); 
 8005fea:	4826      	ldr	r0, [pc, #152]	; (8006084 <DAVE_Init+0x134>)
 8005fec:	f7ff f922 	bl	8005234 <DIGITAL_IO_Init>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DAC APP instance ANALOG */
	 init_status = (DAVE_STATUS_t)DAC_Init(&ANALOG); 
 8005ffa:	4823      	ldr	r0, [pc, #140]	; (8006088 <DAVE_Init+0x138>)
 8005ffc:	f7ff fa58 	bl	80054b0 <DAC_Init>
 8006000:	4603      	mov	r3, r0
 8006002:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d104      	bne.n	8006014 <DAVE_Init+0xc4>
  {
	 /**  Initialization of DAC APP instance ANALOG2 */
	 init_status = (DAVE_STATUS_t)DAC_Init(&ANALOG2); 
 800600a:	4820      	ldr	r0, [pc, #128]	; (800608c <DAVE_Init+0x13c>)
 800600c:	f7ff fa50 	bl	80054b0 <DAC_Init>
 8006010:	4603      	mov	r3, r0
 8006012:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <DAVE_Init+0xd4>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 800601a:	481d      	ldr	r0, [pc, #116]	; (8006090 <DAVE_Init+0x140>)
 800601c:	f7fc fa9c 	bl	8002558 <UART_Init>
 8006020:	4603      	mov	r3, r0
 8006022:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d104      	bne.n	8006034 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance SIGNAL */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SIGNAL); 
 800602a:	481a      	ldr	r0, [pc, #104]	; (8006094 <DAVE_Init+0x144>)
 800602c:	f7ff f902 	bl	8005234 <DIGITAL_IO_Init>
 8006030:	4603      	mov	r3, r0
 8006032:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <DAVE_Init+0xf4>
  {
	 /**  Initialization of TIMER APP instance DELAY */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&DELAY); 
 800603a:	4817      	ldr	r0, [pc, #92]	; (8006098 <DAVE_Init+0x148>)
 800603c:	f7fc fe70 	bl	8002d20 <TIMER_Init>
 8006040:	4603      	mov	r3, r0
 8006042:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d104      	bne.n	8006054 <DAVE_Init+0x104>
  {
	 /**  Initialization of INTERRUPT APP instance TIM_IRQ */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&TIM_IRQ); 
 800604a:	4814      	ldr	r0, [pc, #80]	; (800609c <DAVE_Init+0x14c>)
 800604c:	f7fe fffe 	bl	800504c <INTERRUPT_Init>
 8006050:	4603      	mov	r3, r0
 8006052:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8006054:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	2000038c 	.word	0x2000038c
 8006064:	20000088 	.word	0x20000088
 8006068:	20000364 	.word	0x20000364
 800606c:	0800898c 	.word	0x0800898c
 8006070:	200000a0 	.word	0x200000a0
 8006074:	08008a68 	.word	0x08008a68
 8006078:	08008aac 	.word	0x08008aac
 800607c:	08008af0 	.word	0x08008af0
 8006080:	0800891c 	.word	0x0800891c
 8006084:	080089a0 	.word	0x080089a0
 8006088:	200001d8 	.word	0x200001d8
 800608c:	20000204 	.word	0x20000204
 8006090:	20000000 	.word	0x20000000
 8006094:	080089b4 	.word	0x080089b4
 8006098:	2000000c 	.word	0x2000000c
 800609c:	08008920 	.word	0x08008920

080060a0 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	2201      	movs	r2, #1
 80060b0:	409a      	lsls	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	605a      	str	r2, [r3, #4]
}
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80060d2:	409a      	lsls	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	605a      	str	r2, [r3, #4]
}
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop

080060e4 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80060f6:	409a      	lsls	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	605a      	str	r2, [r3, #4]
}
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop

08006108 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 800611c:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 800611e:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop

08006134 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	f7ff ffdf 	bl	8006108 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <SPI_MASTER_IsRxBusy>:
 *    return 1U;
 * }
 * @endcode<BR>
 */
__STATIC_INLINE bool SPI_MASTER_IsRxBusy(const SPI_MASTER_t* const handle)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("SPI_MASTER_IsTxBusy:handle NULL", (handle != NULL))
  return (handle->runtime->rx_busy);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	7fdb      	ldrb	r3, [r3, #31]
 800615e:	b2db      	uxtb	r3, r3
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <SPI_MASTER_EnableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_EnableSlaveSelectSignal(const SPI_MASTER_t* handle, const SPI_MASTER_SS_SIGNAL_t slave)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
                                                                               (slave == SPI_MASTER_SS_SIGNAL_4) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_5) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_6) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_7))
                                                                              );
    XMC_SPI_CH_EnableSlaveSelect(handle->channel, handle->config->slave_select_pin_config[slave]->slave_select_ch);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6819      	ldr	r1, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	78fa      	ldrb	r2, [r7, #3]
 8006182:	3214      	adds	r2, #20
 8006184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	4608      	mov	r0, r1
 800618c:	4619      	mov	r1, r3
 800618e:	f7fb fba3 	bl	80018d8 <XMC_SPI_CH_EnableSlaveSelect>
}
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <SPI_MASTER_DisableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_DisableSlaveSelectSignal(const SPI_MASTER_t* handle)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
    XMC_ASSERT("SPI_MASTER_Transmit:handle NULL" , (handle != NULL));
    XMC_SPI_CH_DisableSlaveSelect(handle->channel);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fb fbad 	bl	8001904 <XMC_SPI_CH_DisableSlaveSelect>
}
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	7c1b      	ldrb	r3, [r3, #16]
 80061c0:	4610      	mov	r0, r2
 80061c2:	4619      	mov	r1, r3
 80061c4:	f7ff ff6c 	bl	80060a0 <XMC_GPIO_SetOutputHigh>
}
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop

080061d0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7c1b      	ldrb	r3, [r3, #16]
 80061e0:	4610      	mov	r0, r2
 80061e2:	4619      	mov	r1, r3
 80061e4:	f7ff ff6c 	bl	80060c0 <XMC_GPIO_SetOutputLow>
}
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop

080061f0 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	7c1b      	ldrb	r3, [r3, #16]
 8006200:	4610      	mov	r0, r2
 8006202:	4619      	mov	r1, r3
 8006204:	f7ff ff6e 	bl	80060e4 <XMC_GPIO_ToggleOutput>
}
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop

08006210 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	32c0      	adds	r2, #192	; 0xc0
 8006220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006224:	b29b      	uxth	r3, r3
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop

08006234 <ADC_MEASUREMENT_ADV_GetResult>:
  }
}
 * @endcode
 */
__STATIC_INLINE uint16_t ADC_MEASUREMENT_ADV_GetResult(const ADC_MEASUREMENT_ADV_CHANNEL_t *const handle_ptr)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	7a1b      	ldrb	r3, [r3, #8]
 8006240:	461a      	mov	r2, r3
 8006242:	4b0a      	ldr	r3, [pc, #40]	; (800626c <ADC_MEASUREMENT_ADV_GetResult+0x38>)
 8006244:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	789b      	ldrb	r3, [r3, #2]
 800624e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006252:	b2db      	uxtb	r3, r3
{
  uint16_t result;
  extern XMC_VADC_GROUP_t *const group_ptrs[XMC_VADC_MAXIMUM_NUM_GROUPS];
  XMC_ASSERT("ADC_MEASUREMENT_ADV_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(group_ptrs[handle_ptr->group_index],
 8006254:	4610      	mov	r0, r2
 8006256:	4619      	mov	r1, r3
 8006258:	f7ff ffda 	bl	8006210 <XMC_VADC_GROUP_GetResult>
 800625c:	4603      	mov	r3, r0
 800625e:	81fb      	strh	r3, [r7, #14]
                                    (uint32_t) handle_ptr->ch_handle->result_reg_number);
  return(result);
 8006260:	89fb      	ldrh	r3, [r7, #14]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	08008a30 	.word	0x08008a30

08006270 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	460b      	mov	r3, r1
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 800627e:	7af8      	ldrb	r0, [r7, #11]
 8006280:	7afb      	ldrb	r3, [r7, #11]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4413      	add	r3, r2
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	431a      	orrs	r2, r3
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	00c3      	lsls	r3, r0, #3
 8006296:	440b      	add	r3, r1
 8006298:	605a      	str	r2, [r3, #4]
                             mode;
}
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <DAC_Enable>:
   return 0;
 }
 * @endcode
 */
__STATIC_INLINE void DAC_Enable(const DAC_t * const HandlePtr)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
    XMC_DAC_CH_SetMode(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, HandlePtr->dac_mode);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6819      	ldr	r1, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	4608      	mov	r0, r1
 80062bc:	4611      	mov	r1, r2
 80062be:	461a      	mov	r2, r3
 80062c0:	f7ff ffd6 	bl	8006270 <XMC_DAC_CH_SetMode>
}
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop

080062cc <PI_REG>:
PI_t PI_Id;
PI_t PI_Iq;
PI_t PI_predkosc;

void PI_REG(PI_t *handle, int32_t err)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
    handle->buff = handle->buff + err;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	441a      	add	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	611a      	str	r2, [r3, #16]
    if(handle->buff > handle->buff_max)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	dd04      	ble.n	80062f8 <PI_REG+0x2c>
        handle->buff = handle->buff_max;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695a      	ldr	r2, [r3, #20]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	611a      	str	r2, [r3, #16]
 80062f6:	e009      	b.n	800630c <PI_REG+0x40>
    else if(handle->buff < handle->buff_min)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	429a      	cmp	r2, r3
 8006302:	da03      	bge.n	800630c <PI_REG+0x40>
        handle->buff = handle->buff_min;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	611a      	str	r2, [r3, #16]
    int32_t temp_ki_buff = (handle->buff * handle->kI) / 10000;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	8852      	ldrh	r2, [r2, #2]
 8006314:	fb02 f303 	mul.w	r3, r2, r3
 8006318:	4a18      	ldr	r2, [pc, #96]	; (800637c <PI_REG+0xb0>)
 800631a:	fb82 1203 	smull	r1, r2, r2, r3
 800631e:	1312      	asrs	r2, r2, #12
 8006320:	17db      	asrs	r3, r3, #31
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	60fb      	str	r3, [r7, #12]
    handle->y = (handle->kP * err / 10000) + temp_ki_buff;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	fb03 f302 	mul.w	r3, r3, r2
 8006332:	4a12      	ldr	r2, [pc, #72]	; (800637c <PI_REG+0xb0>)
 8006334:	fb82 1203 	smull	r1, r2, r2, r3
 8006338:	1312      	asrs	r2, r2, #12
 800633a:	17db      	asrs	r3, r3, #31
 800633c:	1ad2      	subs	r2, r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	441a      	add	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60da      	str	r2, [r3, #12]
    if(handle->y >= handle->y_max)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	db04      	blt.n	800635c <PI_REG+0x90>
        handle->y = handle->y_max;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60da      	str	r2, [r3, #12]
 800635a:	e009      	b.n	8006370 <PI_REG+0xa4>
    else if (handle->y <= handle->y_min)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	dc03      	bgt.n	8006370 <PI_REG+0xa4>
        handle->y = handle->y_min;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	60da      	str	r2, [r3, #12]
}
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	68db8bad 	.word	0x68db8bad

08006380 <RS_Init>:

void RS_Init(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
	txData[0] = 0xCC; //SOF
 8006384:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <RS_Init+0x28>)
 8006386:	22cc      	movs	r2, #204	; 0xcc
 8006388:	701a      	strb	r2, [r3, #0]
	txData[1] = 0xEE;
 800638a:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <RS_Init+0x28>)
 800638c:	22ee      	movs	r2, #238	; 0xee
 800638e:	705a      	strb	r2, [r3, #1]
	txData[2] = adress;
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <RS_Init+0x2c>)
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <RS_Init+0x28>)
 8006396:	709a      	strb	r2, [r3, #2]
	txData[9] = EOF;
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <RS_Init+0x28>)
 800639a:	22dd      	movs	r2, #221	; 0xdd
 800639c:	725a      	strb	r2, [r3, #9]
}
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20000420 	.word	0x20000420
 80063ac:	20000411 	.word	0x20000411

080063b0 <main>:
void enkoder(void);
void interpreter_wiadomosci(void);
void delay(uint32_t);
float t = 0.0f;
int main(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
	tData[0] = 0x3F;
 80063b6:	4b3b      	ldr	r3, [pc, #236]	; (80064a4 <main+0xf4>)
 80063b8:	223f      	movs	r2, #63	; 0x3f
 80063ba:	701a      	strb	r2, [r3, #0]
	tData[1] = 0xFF;
 80063bc:	4b39      	ldr	r3, [pc, #228]	; (80064a4 <main+0xf4>)
 80063be:	22ff      	movs	r2, #255	; 0xff
 80063c0:	705a      	strb	r2, [r3, #1]

	PI_Id.kP = 1;
 80063c2:	4b39      	ldr	r3, [pc, #228]	; (80064a8 <main+0xf8>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	801a      	strh	r2, [r3, #0]
	PI_Id.kI = 1;		//ki = .ki / 1000
 80063c8:	4b37      	ldr	r3, [pc, #220]	; (80064a8 <main+0xf8>)
 80063ca:	2201      	movs	r2, #1
 80063cc:	805a      	strh	r2, [r3, #2]
	PI_Id.y_max = 20584;
 80063ce:	4b36      	ldr	r3, [pc, #216]	; (80064a8 <main+0xf8>)
 80063d0:	f245 0268 	movw	r2, #20584	; 0x5068
 80063d4:	605a      	str	r2, [r3, #4]
	PI_Id.y_min = -20584;
 80063d6:	4b34      	ldr	r3, [pc, #208]	; (80064a8 <main+0xf8>)
 80063d8:	4a34      	ldr	r2, [pc, #208]	; (80064ac <main+0xfc>)
 80063da:	609a      	str	r2, [r3, #8]
	PI_Id.buff_max = 3000;
 80063dc:	4b32      	ldr	r3, [pc, #200]	; (80064a8 <main+0xf8>)
 80063de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80063e2:	615a      	str	r2, [r3, #20]
	PI_Id.buff_min = -30000;
 80063e4:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <main+0xf8>)
 80063e6:	4a32      	ldr	r2, [pc, #200]	; (80064b0 <main+0x100>)
 80063e8:	619a      	str	r2, [r3, #24]

	PI_Iq.kP =	1;
 80063ea:	4b32      	ldr	r3, [pc, #200]	; (80064b4 <main+0x104>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	801a      	strh	r2, [r3, #0]
	PI_Iq.kI = 1;		//ki = .ki / 1000
 80063f0:	4b30      	ldr	r3, [pc, #192]	; (80064b4 <main+0x104>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	805a      	strh	r2, [r3, #2]
	PI_Iq.y_max = 20384;
 80063f6:	4b2f      	ldr	r3, [pc, #188]	; (80064b4 <main+0x104>)
 80063f8:	f644 72a0 	movw	r2, #20384	; 0x4fa0
 80063fc:	605a      	str	r2, [r3, #4]
	PI_Iq.y_min = -20384;
 80063fe:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <main+0x104>)
 8006400:	4a2d      	ldr	r2, [pc, #180]	; (80064b8 <main+0x108>)
 8006402:	609a      	str	r2, [r3, #8]
	PI_Iq.buff_max = 30000;
 8006404:	4b2b      	ldr	r3, [pc, #172]	; (80064b4 <main+0x104>)
 8006406:	f247 5230 	movw	r2, #30000	; 0x7530
 800640a:	615a      	str	r2, [r3, #20]
	PI_Iq.buff_min = -30000;
 800640c:	4b29      	ldr	r3, [pc, #164]	; (80064b4 <main+0x104>)
 800640e:	4a28      	ldr	r2, [pc, #160]	; (80064b0 <main+0x100>)
 8006410:	619a      	str	r2, [r3, #24]

  DAVE_STATUS_t status;
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8006412:	f7ff fd9d 	bl	8005f50 <DAVE_Init>
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]
  status = (UART_STATUS_t)UART_Init(&UART_0);
 800641a:	4828      	ldr	r0, [pc, #160]	; (80064bc <main+0x10c>)
 800641c:	f7fc f89c 	bl	8002558 <UART_Init>
 8006420:	4603      	mov	r3, r0
 8006422:	73fb      	strb	r3, [r7, #15]
  uint32_t SYS1_Id = SYSTIMER_CreateTimer(120U, SYSTIMER_MODE_PERIODIC, (void*)SYS1, NULL);
 8006424:	2078      	movs	r0, #120	; 0x78
 8006426:	2101      	movs	r1, #1
 8006428:	4a25      	ldr	r2, [pc, #148]	; (80064c0 <main+0x110>)
 800642a:	2300      	movs	r3, #0
 800642c:	f7fd f87e 	bl	800352c <SYSTIMER_CreateTimer>
 8006430:	60b8      	str	r0, [r7, #8]
  uint32_t SYS2_V = SYSTIMER_CreateTimer(1000U, SYSTIMER_MODE_PERIODIC, (void*)SYS2, NULL);
 8006432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006436:	2101      	movs	r1, #1
 8006438:	4a22      	ldr	r2, [pc, #136]	; (80064c4 <main+0x114>)
 800643a:	2300      	movs	r3, #0
 800643c:	f7fd f876 	bl	800352c <SYSTIMER_CreateTimer>
 8006440:	6078      	str	r0, [r7, #4]

  XMC_Init();
 8006442:	f000 fbdb 	bl	8006bfc <XMC_Init>

  //DRV setup
  SPI_MASTER_Init(&SPI_enkoder);
 8006446:	4820      	ldr	r0, [pc, #128]	; (80064c8 <main+0x118>)
 8006448:	f7fd fa14 	bl	8003874 <SPI_MASTER_Init>
  DAC_Enable(&ANALOG);
 800644c:	481f      	ldr	r0, [pc, #124]	; (80064cc <main+0x11c>)
 800644e:	f7ff ff29 	bl	80062a4 <DAC_Enable>
  DAC_Enable(&ANALOG2);
 8006452:	481f      	ldr	r0, [pc, #124]	; (80064d0 <main+0x120>)
 8006454:	f7ff ff26 	bl	80062a4 <DAC_Enable>

	PWM_SVM_Start(&SVPWM);
 8006458:	481e      	ldr	r0, [pc, #120]	; (80064d4 <main+0x124>)
 800645a:	f7fe fa29 	bl	80048b0 <PWM_SVM_Start>

	PWM_SVM_SVMUpdate(&SVPWM, 0,0);
 800645e:	481d      	ldr	r0, [pc, #116]	; (80064d4 <main+0x124>)
 8006460:	2100      	movs	r1, #0
 8006462:	2200      	movs	r2, #0
 8006464:	f001 fce8 	bl	8007e38 <__PWM_SVM_SVMUpdate_veneer>

	DRV_START();
 8006468:	f000 fa8c 	bl	8006984 <DRV_START>

	XMC_SPI_CH_ConfigureShiftClockOutput(SPI_enkoder.channel, XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED, XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
 800646c:	4b16      	ldr	r3, [pc, #88]	; (80064c8 <main+0x118>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	2100      	movs	r1, #0
 8006474:	2200      	movs	r2, #0
 8006476:	f7ff fe5d 	bl	8006134 <XMC_SPI_CH_ConfigureShiftClockOutput>
  	SPI_MASTER_DisableSlaveSelectSignal(&SPI_enkoder);
 800647a:	4813      	ldr	r0, [pc, #76]	; (80064c8 <main+0x118>)
 800647c:	f7ff fe8c 	bl	8006198 <SPI_MASTER_DisableSlaveSelectSignal>
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_enkoder, SPI_MASTER_SS_SIGNAL_0);
 8006480:	4811      	ldr	r0, [pc, #68]	; (80064c8 <main+0x118>)
 8006482:	2100      	movs	r1, #0
 8006484:	f7ff fe72 	bl	800616c <SPI_MASTER_EnableSlaveSelectSignal>

	enkoder();															///zeby poprawnie liczyc kat absolutny kat_enkoder nie moze byc = 0 na poczatku!
 8006488:	f000 f902 	bl	8006690 <enkoder>
	kat_enkoder_poprzedni = kat_enkoder;
 800648c:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <main+0x128>)
 800648e:	881a      	ldrh	r2, [r3, #0]
 8006490:	4b12      	ldr	r3, [pc, #72]	; (80064dc <main+0x12c>)
 8006492:	801a      	strh	r2, [r3, #0]
	SYSTIMER_StartTimer(SYS1_Id);
 8006494:	68b8      	ldr	r0, [r7, #8]
 8006496:	f7fd f8e7 	bl	8003668 <SYSTIMER_StartTimer>
	SYSTIMER_StartTimer(SYS2_V);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fd f8e4 	bl	8003668 <SYSTIMER_StartTimer>
  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
 80064a0:	e7fe      	b.n	80064a0 <main+0xf0>
 80064a2:	bf00      	nop
 80064a4:	200007a8 	.word	0x200007a8
 80064a8:	20000760 	.word	0x20000760
 80064ac:	ffffaf98 	.word	0xffffaf98
 80064b0:	ffff8ad0 	.word	0xffff8ad0
 80064b4:	20000738 	.word	0x20000738
 80064b8:	ffffb060 	.word	0xffffb060
 80064bc:	20000000 	.word	0x20000000
 80064c0:	080066ed 	.word	0x080066ed
 80064c4:	080064e1 	.word	0x080064e1
 80064c8:	20000088 	.word	0x20000088
 80064cc:	200001d8 	.word	0x200001d8
 80064d0:	20000204 	.word	0x20000204
 80064d4:	200000a0 	.word	0x200000a0
 80064d8:	2000044e 	.word	0x2000044e
 80064dc:	20000450 	.word	0x20000450

080064e0 <SYS2>:
}
int32_t uchyb;
void SYS2(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
	uint16_t kat_enkoder_obecny = kat_enkoder;
 80064e6:	4b5f      	ldr	r3, [pc, #380]	; (8006664 <SYS2+0x184>)
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	817b      	strh	r3, [r7, #10]
	int32_t predkosc_nowa = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]
	if( kat_enkoder_obecny > kat_enkoder_poprzedni)
 80064f0:	4b5d      	ldr	r3, [pc, #372]	; (8006668 <SYS2+0x188>)
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	897a      	ldrh	r2, [r7, #10]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d905      	bls.n	8006506 <SYS2+0x26>
		predkosc_nowa = kat_enkoder_obecny - kat_enkoder_poprzedni;
 80064fa:	897b      	ldrh	r3, [r7, #10]
 80064fc:	4a5a      	ldr	r2, [pc, #360]	; (8006668 <SYS2+0x188>)
 80064fe:	8812      	ldrh	r2, [r2, #0]
 8006500:	1a9b      	subs	r3, r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e007      	b.n	8006516 <SYS2+0x36>
	else
		predkosc_nowa = UINT16_MAX - kat_enkoder_poprzedni + kat_enkoder_obecny;
 8006506:	4b58      	ldr	r3, [pc, #352]	; (8006668 <SYS2+0x188>)
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800650e:	33ff      	adds	r3, #255	; 0xff
 8006510:	897a      	ldrh	r2, [r7, #10]
 8006512:	4413      	add	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

	predkosc_enkoder = predkosc_nowa;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	b29a      	uxth	r2, r3
 800651a:	4b54      	ldr	r3, [pc, #336]	; (800666c <SYS2+0x18c>)
 800651c:	801a      	strh	r2, [r3, #0]

	if(predkosc_enkoder < 0)
 800651e:	4b53      	ldr	r3, [pc, #332]	; (800666c <SYS2+0x18c>)
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b21b      	sxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	da07      	bge.n	8006538 <SYS2+0x58>
		predkosc_enkoder=-predkosc_enkoder;
 8006528:	4b50      	ldr	r3, [pc, #320]	; (800666c <SYS2+0x18c>)
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	425b      	negs	r3, r3
 8006530:	b29b      	uxth	r3, r3
 8006532:	b29a      	uxth	r2, r3
 8006534:	4b4d      	ldr	r3, [pc, #308]	; (800666c <SYS2+0x18c>)
 8006536:	801a      	strh	r2, [r3, #0]


	if(kat_enkoder_obecny == 0 || kat_enkoder_poprzedni == 0)
 8006538:	897b      	ldrh	r3, [r7, #10]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <SYS2+0x66>
 800653e:	4b4a      	ldr	r3, [pc, #296]	; (8006668 <SYS2+0x188>)
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <SYS2+0x6e>
	{
		kat_enkoder_poprzedni = kat_enkoder_obecny;
 8006546:	4a48      	ldr	r2, [pc, #288]	; (8006668 <SYS2+0x188>)
 8006548:	897b      	ldrh	r3, [r7, #10]
 800654a:	8013      	strh	r3, [r2, #0]
		return;
 800654c:	e084      	b.n	8006658 <SYS2+0x178>
	}

	int32_t dFi =0;
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
	if(kat_enkoder_obecny > kat_enkoder_poprzedni)
 8006552:	4b45      	ldr	r3, [pc, #276]	; (8006668 <SYS2+0x188>)
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	897a      	ldrh	r2, [r7, #10]
 8006558:	429a      	cmp	r2, r3
 800655a:	d929      	bls.n	80065b0 <SYS2+0xd0>
	{
		dFi = kat_enkoder_obecny-kat_enkoder_poprzedni;
 800655c:	897b      	ldrh	r3, [r7, #10]
 800655e:	4a42      	ldr	r2, [pc, #264]	; (8006668 <SYS2+0x188>)
 8006560:	8812      	ldrh	r2, [r2, #0]
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	607b      	str	r3, [r7, #4]
		if(dFi > 10400)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f642 02a0 	movw	r2, #10400	; 0x28a0
 800656c:	4293      	cmp	r3, r2
 800656e:	dd13      	ble.n	8006598 <SYS2+0xb8>
			{
			dFi = UINT16_MAX - kat_enkoder_obecny + kat_enkoder_poprzedni;
 8006570:	897b      	ldrh	r3, [r7, #10]
 8006572:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8006576:	33ff      	adds	r3, #255	; 0xff
 8006578:	4a3b      	ldr	r2, [pc, #236]	; (8006668 <SYS2+0x188>)
 800657a:	8812      	ldrh	r2, [r2, #0]
 800657c:	4413      	add	r3, r2
 800657e:	607b      	str	r3, [r7, #4]
			kat_absolutny += znak * dFi;
 8006580:	4b3b      	ldr	r3, [pc, #236]	; (8006670 <SYS2+0x190>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	b25b      	sxtb	r3, r3
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	fb02 f203 	mul.w	r2, r2, r3
 800658c:	4b39      	ldr	r3, [pc, #228]	; (8006674 <SYS2+0x194>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4413      	add	r3, r2
 8006592:	4a38      	ldr	r2, [pc, #224]	; (8006674 <SYS2+0x194>)
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	e035      	b.n	8006604 <SYS2+0x124>
			}
		else
		{
			kat_absolutny -= znak * dFi;
 8006598:	4b36      	ldr	r3, [pc, #216]	; (8006674 <SYS2+0x194>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b34      	ldr	r3, [pc, #208]	; (8006670 <SYS2+0x190>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	b25b      	sxtb	r3, r3
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	fb01 f303 	mul.w	r3, r1, r3
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	4a32      	ldr	r2, [pc, #200]	; (8006674 <SYS2+0x194>)
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e029      	b.n	8006604 <SYS2+0x124>
		}
	}
	else
	{
		dFi =kat_enkoder_poprzedni - kat_enkoder_obecny;
 80065b0:	4b2d      	ldr	r3, [pc, #180]	; (8006668 <SYS2+0x188>)
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	897b      	ldrh	r3, [r7, #10]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	607b      	str	r3, [r7, #4]
		if(dFi > 10400)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80065c2:	4293      	cmp	r3, r2
 80065c4:	dd13      	ble.n	80065ee <SYS2+0x10e>
		{
			dFi = UINT16_MAX - kat_enkoder_poprzedni + kat_enkoder_obecny;
 80065c6:	4b28      	ldr	r3, [pc, #160]	; (8006668 <SYS2+0x188>)
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80065ce:	33ff      	adds	r3, #255	; 0xff
 80065d0:	897a      	ldrh	r2, [r7, #10]
 80065d2:	4413      	add	r3, r2
 80065d4:	607b      	str	r3, [r7, #4]
		kat_absolutny -=znak * dFi;
 80065d6:	4b27      	ldr	r3, [pc, #156]	; (8006674 <SYS2+0x194>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b25      	ldr	r3, [pc, #148]	; (8006670 <SYS2+0x190>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	fb01 f303 	mul.w	r3, r1, r3
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	4a22      	ldr	r2, [pc, #136]	; (8006674 <SYS2+0x194>)
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	e00a      	b.n	8006604 <SYS2+0x124>
	}
		else
		{
			kat_absolutny += znak * dFi;
 80065ee:	4b20      	ldr	r3, [pc, #128]	; (8006670 <SYS2+0x190>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	b25b      	sxtb	r3, r3
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	fb02 f203 	mul.w	r2, r2, r3
 80065fa:	4b1e      	ldr	r3, [pc, #120]	; (8006674 <SYS2+0x194>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4413      	add	r3, r2
 8006600:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <SYS2+0x194>)
 8006602:	6013      	str	r3, [r2, #0]
		}
	}

	kat_enkoder_poprzedni = kat_enkoder_obecny;
 8006604:	4a18      	ldr	r2, [pc, #96]	; (8006668 <SYS2+0x188>)
 8006606:	897b      	ldrh	r3, [r7, #10]
 8006608:	8013      	strh	r3, [r2, #0]
	/*		REGULATOR PREDKOSCI
	int32_t uchyb = predkosc_zadana - predkosc_enkoder;
	PI_REG(&PI_predkosc, uchyb);
	Iq_zadane = PI_predkosc.y;
	 */
	 uchyb = poz_zad - kat_absolutny;
 800660a:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <SYS2+0x198>)
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	4b18      	ldr	r3, [pc, #96]	; (8006674 <SYS2+0x194>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	4a19      	ldr	r2, [pc, #100]	; (800667c <SYS2+0x19c>)
 8006618:	6013      	str	r3, [r2, #0]

	//ZADAWANIE MOMENTU
	int32_t sila = (ks * uchyb)/1000 - ((kd * predkosc_enkoder)/1000);
 800661a:	4b19      	ldr	r3, [pc, #100]	; (8006680 <SYS2+0x1a0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a17      	ldr	r2, [pc, #92]	; (800667c <SYS2+0x19c>)
 8006620:	6812      	ldr	r2, [r2, #0]
 8006622:	fb02 f303 	mul.w	r3, r2, r3
 8006626:	4a17      	ldr	r2, [pc, #92]	; (8006684 <SYS2+0x1a4>)
 8006628:	fb82 1203 	smull	r1, r2, r2, r3
 800662c:	1192      	asrs	r2, r2, #6
 800662e:	17db      	asrs	r3, r3, #31
 8006630:	1ad2      	subs	r2, r2, r3
 8006632:	4b0e      	ldr	r3, [pc, #56]	; (800666c <SYS2+0x18c>)
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b21b      	sxth	r3, r3
 8006638:	4913      	ldr	r1, [pc, #76]	; (8006688 <SYS2+0x1a8>)
 800663a:	6809      	ldr	r1, [r1, #0]
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	4910      	ldr	r1, [pc, #64]	; (8006684 <SYS2+0x1a4>)
 8006642:	fb81 0103 	smull	r0, r1, r1, r3
 8006646:	1189      	asrs	r1, r1, #6
 8006648:	17db      	asrs	r3, r3, #31
 800664a:	1acb      	subs	r3, r1, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	603b      	str	r3, [r7, #0]
	Iq_zadane = sila;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	b29a      	uxth	r2, r3
 8006654:	4b0d      	ldr	r3, [pc, #52]	; (800668c <SYS2+0x1ac>)
 8006656:	801a      	strh	r2, [r3, #0]



}
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	2000044e 	.word	0x2000044e
 8006668:	20000450 	.word	0x20000450
 800666c:	200007a4 	.word	0x200007a4
 8006670:	20000413 	.word	0x20000413
 8006674:	20000454 	.word	0x20000454
 8006678:	200002b8 	.word	0x200002b8
 800667c:	200007b0 	.word	0x200007b0
 8006680:	200002bc 	.word	0x200002bc
 8006684:	10624dd3 	.word	0x10624dd3
 8006688:	200002c0 	.word	0x200002c0
 800668c:	2000072c 	.word	0x2000072c

08006690 <enkoder>:
void enkoder(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
	SPI_MASTER_Transfer(&SPI_enkoder, tData, rData,  2);
 8006696:	4811      	ldr	r0, [pc, #68]	; (80066dc <enkoder+0x4c>)
 8006698:	4911      	ldr	r1, [pc, #68]	; (80066e0 <enkoder+0x50>)
 800669a:	4a12      	ldr	r2, [pc, #72]	; (80066e4 <enkoder+0x54>)
 800669c:	2302      	movs	r3, #2
 800669e:	f7fd fa21 	bl	8003ae4 <SPI_MASTER_Transfer>
	while(SPI_MASTER_IsRxBusy(&SPI_enkoder));
 80066a2:	bf00      	nop
 80066a4:	480d      	ldr	r0, [pc, #52]	; (80066dc <enkoder+0x4c>)
 80066a6:	f7ff fd53 	bl	8006150 <SPI_MASTER_IsRxBusy>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f9      	bne.n	80066a4 <enkoder+0x14>
	uint16_t result = rData[0]<<8 | rData[1];
 80066b0:	4b0c      	ldr	r3, [pc, #48]	; (80066e4 <enkoder+0x54>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <enkoder+0x54>)
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	4313      	orrs	r3, r2
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	80fb      	strh	r3, [r7, #6]
	result &= 0x3FFF;			//Usuwanie bitu parzystkosci i bitu R/W
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80066ca:	80fb      	strh	r3, [r7, #6]

	kat_enkoder =result * 4;		//0 - 65535 = 0 - 2PI
 80066cc:	88fb      	ldrh	r3, [r7, #6]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <enkoder+0x58>)
 80066d4:	801a      	strh	r2, [r3, #0]

}
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20000088 	.word	0x20000088
 80066e0:	200007a8 	.word	0x200007a8
 80066e4:	2000077c 	.word	0x2000077c
 80066e8:	2000044e 	.word	0x2000044e

080066ec <SYS1>:
void SYS1(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&SIGNAL);
 80066f2:	4886      	ldr	r0, [pc, #536]	; (800690c <SYS1+0x220>)
 80066f4:	f7ff fd5c 	bl	80061b0 <DIGITAL_IO_SetOutputHigh>
	enkoder();
 80066f8:	f7ff ffca 	bl	8006690 <enkoder>
	int32_t kat_elektryczny_temp = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]
	kat_elektryczny_temp = ((uint32_t)(kat_enkoder * liczba_par_biegunow));
 8006700:	4b83      	ldr	r3, [pc, #524]	; (8006910 <SYS1+0x224>)
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	4b83      	ldr	r3, [pc, #524]	; (8006914 <SYS1+0x228>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	fb03 f302 	mul.w	r3, r3, r2
 800670e:	617b      	str	r3, [r7, #20]
	kat_elektryczny_temp = kat_elektryczny_temp % UINT16_MAX ;
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4b81      	ldr	r3, [pc, #516]	; (8006918 <SYS1+0x22c>)
 8006714:	fb82 0103 	smull	r0, r1, r2, r3
 8006718:	1853      	adds	r3, r2, r1
 800671a:	13d9      	asrs	r1, r3, #15
 800671c:	17d3      	asrs	r3, r2, #31
 800671e:	1ac9      	subs	r1, r1, r3
 8006720:	460b      	mov	r3, r1
 8006722:	041b      	lsls	r3, r3, #16
 8006724:	1a5b      	subs	r3, r3, r1
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	617b      	str	r3, [r7, #20]
	kat_elektryczny_temp = kat_elektryczny_temp - INT16_MAX;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8006730:	3b7f      	subs	r3, #127	; 0x7f
 8006732:	617b      	str	r3, [r7, #20]
	kat_elektryczny = kat_elektryczny_temp + offset_elektryczny;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	b29a      	uxth	r2, r3
 8006738:	4b78      	ldr	r3, [pc, #480]	; (800691c <SYS1+0x230>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	4413      	add	r3, r2
 8006740:	b29b      	uxth	r3, r3
 8006742:	b29a      	uxth	r2, r3
 8006744:	4b76      	ldr	r3, [pc, #472]	; (8006920 <SYS1+0x234>)
 8006746:	801a      	strh	r2, [r3, #0]

	LiczeniePradu();
 8006748:	f000 f9ca 	bl	8006ae0 <LiczeniePradu>

	I_beta = MOTOR_LIB_ClarkTransform(iu,iv,&I_alfa);
 800674c:	4b75      	ldr	r3, [pc, #468]	; (8006924 <SYS1+0x238>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	4b75      	ldr	r3, [pc, #468]	; (8006928 <SYS1+0x23c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4610      	mov	r0, r2
 8006756:	4619      	mov	r1, r3
 8006758:	4a74      	ldr	r2, [pc, #464]	; (800692c <SYS1+0x240>)
 800675a:	f7fe fbc5 	bl	8004ee8 <MOTOR_LIB_ClarkTransform>
 800675e:	4602      	mov	r2, r0
 8006760:	4b73      	ldr	r3, [pc, #460]	; (8006930 <SYS1+0x244>)
 8006762:	601a      	str	r2, [r3, #0]

	Id_poprzednie = MOTOR_LIB_ParkTransform(I_alfa, I_beta, kat_elektryczny, &Iq_poprzednie);
 8006764:	4b71      	ldr	r3, [pc, #452]	; (800692c <SYS1+0x240>)
 8006766:	6819      	ldr	r1, [r3, #0]
 8006768:	4b71      	ldr	r3, [pc, #452]	; (8006930 <SYS1+0x244>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	4b6c      	ldr	r3, [pc, #432]	; (8006920 <SYS1+0x234>)
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b21b      	sxth	r3, r3
 8006772:	4608      	mov	r0, r1
 8006774:	4611      	mov	r1, r2
 8006776:	461a      	mov	r2, r3
 8006778:	4b6e      	ldr	r3, [pc, #440]	; (8006934 <SYS1+0x248>)
 800677a:	f7fe fa89 	bl	8004c90 <MOTOR_LIB_ParkTransform>
 800677e:	4602      	mov	r2, r0
 8006780:	4b6d      	ldr	r3, [pc, #436]	; (8006938 <SYS1+0x24c>)
 8006782:	601a      	str	r2, [r3, #0]

	Id_poprzednie = -Id_poprzednie;
 8006784:	4b6c      	ldr	r3, [pc, #432]	; (8006938 <SYS1+0x24c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	425b      	negs	r3, r3
 800678a:	4a6b      	ldr	r2, [pc, #428]	; (8006938 <SYS1+0x24c>)
 800678c:	6013      	str	r3, [r2, #0]
	Iq_poprzednie = -Iq_poprzednie;
 800678e:	4b69      	ldr	r3, [pc, #420]	; (8006934 <SYS1+0x248>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	425b      	negs	r3, r3
 8006794:	4a67      	ldr	r2, [pc, #412]	; (8006934 <SYS1+0x248>)
 8006796:	6013      	str	r3, [r2, #0]
	if(kat_absolutny < - 4000)			//Zabezpieczenie zeby silniki nie walnely w siebie srubami
		Iq_zadane = 20000;
	if(kat_absolutny > 32000)
		Iq_zadane = - 20000;
*/
	uchyb_Id = Id_zadane - Id_poprzednie;
 8006798:	4b68      	ldr	r3, [pc, #416]	; (800693c <SYS1+0x250>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	4b66      	ldr	r3, [pc, #408]	; (8006938 <SYS1+0x24c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	4a67      	ldr	r2, [pc, #412]	; (8006940 <SYS1+0x254>)
 80067a4:	6013      	str	r3, [r2, #0]
	uchyb_Iq = Iq_zadane - Iq_poprzednie;
 80067a6:	4b67      	ldr	r3, [pc, #412]	; (8006944 <SYS1+0x258>)
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b21a      	sxth	r2, r3
 80067ac:	4b61      	ldr	r3, [pc, #388]	; (8006934 <SYS1+0x248>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	4a65      	ldr	r2, [pc, #404]	; (8006948 <SYS1+0x25c>)
 80067b4:	6013      	str	r3, [r2, #0]

	PI_REG(&PI_Id,uchyb_Id);
 80067b6:	4b62      	ldr	r3, [pc, #392]	; (8006940 <SYS1+0x254>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4864      	ldr	r0, [pc, #400]	; (800694c <SYS1+0x260>)
 80067bc:	4619      	mov	r1, r3
 80067be:	f7ff fd85 	bl	80062cc <PI_REG>
	PI_REG(&PI_Iq,uchyb_Iq);
 80067c2:	4b61      	ldr	r3, [pc, #388]	; (8006948 <SYS1+0x25c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4862      	ldr	r0, [pc, #392]	; (8006950 <SYS1+0x264>)
 80067c8:	4619      	mov	r1, r3
 80067ca:	f7ff fd7f 	bl	80062cc <PI_REG>
	Vd_zadane = PI_Id.y;
 80067ce:	4b5f      	ldr	r3, [pc, #380]	; (800694c <SYS1+0x260>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	4a60      	ldr	r2, [pc, #384]	; (8006954 <SYS1+0x268>)
 80067d4:	6013      	str	r3, [r2, #0]
	Vq_zadane = PI_Iq.y;
 80067d6:	4b5e      	ldr	r3, [pc, #376]	; (8006950 <SYS1+0x264>)
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	4a5f      	ldr	r2, [pc, #380]	; (8006958 <SYS1+0x26c>)
 80067dc:	6013      	str	r3, [r2, #0]

  	V_alfa = MOTOR_LIB_IParkTransform(Vd_zadane, Vq_zadane, kat_elektryczny, &V_beta);
 80067de:	4b5d      	ldr	r3, [pc, #372]	; (8006954 <SYS1+0x268>)
 80067e0:	6819      	ldr	r1, [r3, #0]
 80067e2:	4b5d      	ldr	r3, [pc, #372]	; (8006958 <SYS1+0x26c>)
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b4e      	ldr	r3, [pc, #312]	; (8006920 <SYS1+0x234>)
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b21b      	sxth	r3, r3
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	461a      	mov	r2, r3
 80067f2:	4b5a      	ldr	r3, [pc, #360]	; (800695c <SYS1+0x270>)
 80067f4:	f7fe fae2 	bl	8004dbc <MOTOR_LIB_IParkTransform>
 80067f8:	4602      	mov	r2, r0
 80067fa:	4b59      	ldr	r3, [pc, #356]	; (8006960 <SYS1+0x274>)
 80067fc:	601a      	str	r2, [r3, #0]

  	 V_ref = MOTOR_LIB_Car2Pol(V_alfa, V_beta, &angle);
 80067fe:	4b58      	ldr	r3, [pc, #352]	; (8006960 <SYS1+0x274>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4b56      	ldr	r3, [pc, #344]	; (800695c <SYS1+0x270>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4610      	mov	r0, r2
 8006808:	4619      	mov	r1, r3
 800680a:	4a56      	ldr	r2, [pc, #344]	; (8006964 <SYS1+0x278>)
 800680c:	f7fe f9ae 	bl	8004b6c <MOTOR_LIB_Car2Pol>
 8006810:	4602      	mov	r2, r0
 8006812:	4b55      	ldr	r3, [pc, #340]	; (8006968 <SYS1+0x27c>)
 8006814:	601a      	str	r2, [r3, #0]

  	angle32 =((int32_t)angle+INT16_MAX) *256;
 8006816:	4b53      	ldr	r3, [pc, #332]	; (8006964 <SYS1+0x278>)
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b21b      	sxth	r3, r3
 800681c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8006820:	337f      	adds	r3, #127	; 0x7f
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	461a      	mov	r2, r3
 8006826:	4b51      	ldr	r3, [pc, #324]	; (800696c <SYS1+0x280>)
 8006828:	601a      	str	r2, [r3, #0]

  	PWM_SVM_SVMUpdate(&SVPWM, V_ref, angle32);
 800682a:	4b4f      	ldr	r3, [pc, #316]	; (8006968 <SYS1+0x27c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	b29a      	uxth	r2, r3
 8006830:	4b4e      	ldr	r3, [pc, #312]	; (800696c <SYS1+0x280>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	484e      	ldr	r0, [pc, #312]	; (8006970 <SYS1+0x284>)
 8006836:	4611      	mov	r1, r2
 8006838:	461a      	mov	r2, r3
 800683a:	f001 fafd 	bl	8007e38 <__PWM_SVM_SVMUpdate_veneer>


  	int32_t Ix = ((iw - iv) * 56775) / UINT16_MAX;
 800683e:	4b4d      	ldr	r3, [pc, #308]	; (8006974 <SYS1+0x288>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b39      	ldr	r3, [pc, #228]	; (8006928 <SYS1+0x23c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	f64d 52c7 	movw	r2, #56775	; 0xddc7
 800684c:	fb02 f303 	mul.w	r3, r2, r3
 8006850:	4a31      	ldr	r2, [pc, #196]	; (8006918 <SYS1+0x22c>)
 8006852:	fb82 1203 	smull	r1, r2, r2, r3
 8006856:	441a      	add	r2, r3
 8006858:	13d2      	asrs	r2, r2, #15
 800685a:	17db      	asrs	r3, r3, #31
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	613b      	str	r3, [r7, #16]
  	int32_t Iy = iu - ((iv+iw)/2);
 8006860:	4b30      	ldr	r3, [pc, #192]	; (8006924 <SYS1+0x238>)
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	4b30      	ldr	r3, [pc, #192]	; (8006928 <SYS1+0x23c>)
 8006866:	6819      	ldr	r1, [r3, #0]
 8006868:	4b42      	ldr	r3, [pc, #264]	; (8006974 <SYS1+0x288>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	440b      	add	r3, r1
 800686e:	0fd9      	lsrs	r1, r3, #31
 8006870:	440b      	add	r3, r1
 8006872:	105b      	asrs	r3, r3, #1
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	60fb      	str	r3, [r7, #12]
  	Iy *= Iy;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	fb02 f303 	mul.w	r3, r2, r3
 8006880:	60fb      	str	r3, [r7, #12]
  	Iy += Ix*Ix;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  	I_net = sqrtf(Iy);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800689a:	ee17 0a90 	vmov	r0, s15
 800689e:	f000 fad9 	bl	8006e54 <sqrtf>
 80068a2:	ee07 0a90 	vmov	s15, r0
 80068a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80068ae:	88bb      	ldrh	r3, [r7, #4]
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	4b31      	ldr	r3, [pc, #196]	; (8006978 <SYS1+0x28c>)
 80068b4:	801a      	strh	r2, [r3, #0]

	txData[3] = I_net >> 8;
 80068b6:	4b30      	ldr	r3, [pc, #192]	; (8006978 <SYS1+0x28c>)
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b21b      	sxth	r3, r3
 80068bc:	121b      	asrs	r3, r3, #8
 80068be:	b29b      	uxth	r3, r3
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	4b2e      	ldr	r3, [pc, #184]	; (800697c <SYS1+0x290>)
 80068c4:	70da      	strb	r2, [r3, #3]
	txData[4] = I_net;
 80068c6:	4b2c      	ldr	r3, [pc, #176]	; (8006978 <SYS1+0x28c>)
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	4b2b      	ldr	r3, [pc, #172]	; (800697c <SYS1+0x290>)
 80068ce:	711a      	strb	r2, [r3, #4]
	txData[5] = kat_absolutny >> 24;
 80068d0:	4b2b      	ldr	r3, [pc, #172]	; (8006980 <SYS1+0x294>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	161b      	asrs	r3, r3, #24
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	4b28      	ldr	r3, [pc, #160]	; (800697c <SYS1+0x290>)
 80068da:	715a      	strb	r2, [r3, #5]
	txData[6] = kat_absolutny >> 16;
 80068dc:	4b28      	ldr	r3, [pc, #160]	; (8006980 <SYS1+0x294>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	141b      	asrs	r3, r3, #16
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	4b25      	ldr	r3, [pc, #148]	; (800697c <SYS1+0x290>)
 80068e6:	719a      	strb	r2, [r3, #6]
	txData[7] = kat_absolutny >> 8;
 80068e8:	4b25      	ldr	r3, [pc, #148]	; (8006980 <SYS1+0x294>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	121b      	asrs	r3, r3, #8
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	4b22      	ldr	r3, [pc, #136]	; (800697c <SYS1+0x290>)
 80068f2:	71da      	strb	r2, [r3, #7]
	txData[8] = kat_absolutny;
 80068f4:	4b22      	ldr	r3, [pc, #136]	; (8006980 <SYS1+0x294>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4b20      	ldr	r3, [pc, #128]	; (800697c <SYS1+0x290>)
 80068fc:	721a      	strb	r2, [r3, #8]

	 //DAC_SingleValue_SetValue_u16(&ANALOG, Iq_poprzednie);
	 //DAC_SingleValue_SetValue_u16(&ANALOG2, Iq_poprzednie);

	DIGITAL_IO_SetOutputLow(&SIGNAL);
 80068fe:	4803      	ldr	r0, [pc, #12]	; (800690c <SYS1+0x220>)
 8006900:	f7ff fc66 	bl	80061d0 <DIGITAL_IO_SetOutputLow>
}
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	080089b4 	.word	0x080089b4
 8006910:	2000044e 	.word	0x2000044e
 8006914:	200002c4 	.word	0x200002c4
 8006918:	80008001 	.word	0x80008001
 800691c:	20000458 	.word	0x20000458
 8006920:	20000452 	.word	0x20000452
 8006924:	20000460 	.word	0x20000460
 8006928:	20000468 	.word	0x20000468
 800692c:	20000434 	.word	0x20000434
 8006930:	20000438 	.word	0x20000438
 8006934:	20000730 	.word	0x20000730
 8006938:	20000754 	.word	0x20000754
 800693c:	200007a0 	.word	0x200007a0
 8006940:	200007ac 	.word	0x200007ac
 8006944:	2000072c 	.word	0x2000072c
 8006948:	20000430 	.word	0x20000430
 800694c:	20000760 	.word	0x20000760
 8006950:	20000738 	.word	0x20000738
 8006954:	20000758 	.word	0x20000758
 8006958:	200007b4 	.word	0x200007b4
 800695c:	20000440 	.word	0x20000440
 8006960:	2000043c 	.word	0x2000043c
 8006964:	2000045c 	.word	0x2000045c
 8006968:	20000444 	.word	0x20000444
 800696c:	20000448 	.word	0x20000448
 8006970:	200000a0 	.word	0x200000a0
 8006974:	20000470 	.word	0x20000470
 8006978:	2000044c 	.word	0x2000044c
 800697c:	20000420 	.word	0x20000420
 8006980:	20000454 	.word	0x20000454

08006984 <DRV_START>:
void DRV_START(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	; 0x28
 8006988:	af00      	add	r7, sp, #0
	PWM_SVM_InverterEnable(&SVPWM);
 800698a:	484d      	ldr	r0, [pc, #308]	; (8006ac0 <DRV_START+0x13c>)
 800698c:	f7fd fd6c 	bl	8004468 <PWM_SVM_InverterEnable>

	for(uint16_t j=0; j < 65000; j++);
 8006990:	2300      	movs	r3, #0
 8006992:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006994:	e002      	b.n	800699c <DRV_START+0x18>
 8006996:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006998:	3301      	adds	r3, #1
 800699a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800699c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800699e:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d9f7      	bls.n	8006996 <DRV_START+0x12>

	//kalibracja offsetów
	SPI_MASTER_DisableSlaveSelectSignal(&SPI_enkoder);
 80069a6:	4847      	ldr	r0, [pc, #284]	; (8006ac4 <DRV_START+0x140>)
 80069a8:	f7ff fbf6 	bl	8006198 <SPI_MASTER_DisableSlaveSelectSignal>
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_enkoder, SPI_MASTER_SS_SIGNAL_1);
 80069ac:	4845      	ldr	r0, [pc, #276]	; (8006ac4 <DRV_START+0x140>)
 80069ae:	2101      	movs	r1, #1
 80069b0:	f7ff fbdc 	bl	800616c <SPI_MASTER_EnableSlaveSelectSignal>

	uint8_t zero [2]= {0};
 80069b4:	2300      	movs	r3, #0
 80069b6:	82bb      	strh	r3, [r7, #20]
	uint8_t rec[10] = {0};
 80069b8:	f107 0308 	add.w	r3, r7, #8
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	3304      	adds	r3, #4
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	3304      	adds	r3, #4
 80069c8:	2200      	movs	r2, #0
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	3302      	adds	r3, #2
	uint8_t sendData[2];
	sendData[0] = 0b00011000;
 80069ce:	2318      	movs	r3, #24
 80069d0:	713b      	strb	r3, [r7, #4]
	sendData[1] = 0b00000100;	// <ustawienie wzmocnienia na 20
 80069d2:	2304      	movs	r3, #4
 80069d4:	717b      	strb	r3, [r7, #5]
	for(int i = 0; i < 5; i++)
 80069d6:	2300      	movs	r3, #0
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	e008      	b.n	80069ee <DRV_START+0x6a>
	{
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);		//Opamp Gain
 80069dc:	1d3b      	adds	r3, r7, #4
 80069de:	4839      	ldr	r0, [pc, #228]	; (8006ac4 <DRV_START+0x140>)
 80069e0:	4619      	mov	r1, r3
 80069e2:	2202      	movs	r2, #2
 80069e4:	f7fc ff56 	bl	8003894 <SPI_MASTER_Transmit>
	uint8_t zero [2]= {0};
	uint8_t rec[10] = {0};
	uint8_t sendData[2];
	sendData[0] = 0b00011000;
	sendData[1] = 0b00000100;	// <ustawienie wzmocnienia na 20
	for(int i = 0; i < 5; i++)
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	3301      	adds	r3, #1
 80069ec:	623b      	str	r3, [r7, #32]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	ddf3      	ble.n	80069dc <DRV_START+0x58>
	{
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);		//Opamp Gain
	}
	sendData[0] = 0b10011000;
 80069f4:	2398      	movs	r3, #152	; 0x98
 80069f6:	713b      	strb	r3, [r7, #4]
	sendData[1] = 0b00000000;
 80069f8:	2300      	movs	r3, #0
 80069fa:	717b      	strb	r3, [r7, #5]
	for(int i = 0; i < 5; i++)
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	e012      	b.n	8006a28 <DRV_START+0xa4>
	{
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);
 8006a02:	1d3b      	adds	r3, r7, #4
 8006a04:	482f      	ldr	r0, [pc, #188]	; (8006ac4 <DRV_START+0x140>)
 8006a06:	4619      	mov	r1, r3
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f7fc ff43 	bl	8003894 <SPI_MASTER_Transmit>
		SPI_MASTER_Transfer(&SPI_enkoder, zero, rec, 2);
 8006a0e:	f107 0214 	add.w	r2, r7, #20
 8006a12:	f107 0308 	add.w	r3, r7, #8
 8006a16:	482b      	ldr	r0, [pc, #172]	; (8006ac4 <DRV_START+0x140>)
 8006a18:	4611      	mov	r1, r2
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	f7fd f861 	bl	8003ae4 <SPI_MASTER_Transfer>
	{
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);		//Opamp Gain
	}
	sendData[0] = 0b10011000;
	sendData[1] = 0b00000000;
	for(int i = 0; i < 5; i++)
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	3301      	adds	r3, #1
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	dde9      	ble.n	8006a02 <DRV_START+0x7e>
	{
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);
		SPI_MASTER_Transfer(&SPI_enkoder, zero, rec, 2);
	}
	DIGITAL_IO_SetOutputHigh(&DC_CAL);
 8006a2e:	4826      	ldr	r0, [pc, #152]	; (8006ac8 <DRV_START+0x144>)
 8006a30:	f7ff fbbe 	bl	80061b0 <DIGITAL_IO_SetOutputHigh>
	uint16_t iloscProbek = 50;
 8006a34:	2332      	movs	r3, #50	; 0x32
 8006a36:	82fb      	strh	r3, [r7, #22]
	for( uint16_t i = 0; i < iloscProbek; i++)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	837b      	strh	r3, [r7, #26]
 8006a3c:	e020      	b.n	8006a80 <DRV_START+0xfc>
	{
		iuOffset += ADC_MEASUREMENT_ADV_GetResult(&ADC_U_Channel_A_handle);
 8006a3e:	4823      	ldr	r0, [pc, #140]	; (8006acc <DRV_START+0x148>)
 8006a40:	f7ff fbf8 	bl	8006234 <ADC_MEASUREMENT_ADV_GetResult>
 8006a44:	4603      	mov	r3, r0
 8006a46:	461a      	mov	r2, r3
 8006a48:	4b21      	ldr	r3, [pc, #132]	; (8006ad0 <DRV_START+0x14c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <DRV_START+0x14c>)
 8006a50:	6013      	str	r3, [r2, #0]
		ivOffset += ADC_MEASUREMENT_ADV_GetResult(&ADC_V_Channel_A_handle);
 8006a52:	4820      	ldr	r0, [pc, #128]	; (8006ad4 <DRV_START+0x150>)
 8006a54:	f7ff fbee 	bl	8006234 <ADC_MEASUREMENT_ADV_GetResult>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <DRV_START+0x154>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4413      	add	r3, r2
 8006a62:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <DRV_START+0x154>)
 8006a64:	6013      	str	r3, [r2, #0]
		for(uint16_t j = 0; j < 1000; j++);	//delay
 8006a66:	2300      	movs	r3, #0
 8006a68:	833b      	strh	r3, [r7, #24]
 8006a6a:	e002      	b.n	8006a72 <DRV_START+0xee>
 8006a6c:	8b3b      	ldrh	r3, [r7, #24]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	833b      	strh	r3, [r7, #24]
 8006a72:	8b3b      	ldrh	r3, [r7, #24]
 8006a74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a78:	d3f8      	bcc.n	8006a6c <DRV_START+0xe8>
		SPI_MASTER_Transmit(&SPI_enkoder, sendData, 2);
		SPI_MASTER_Transfer(&SPI_enkoder, zero, rec, 2);
	}
	DIGITAL_IO_SetOutputHigh(&DC_CAL);
	uint16_t iloscProbek = 50;
	for( uint16_t i = 0; i < iloscProbek; i++)
 8006a7a:	8b7b      	ldrh	r3, [r7, #26]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	837b      	strh	r3, [r7, #26]
 8006a80:	8b7a      	ldrh	r2, [r7, #26]
 8006a82:	8afb      	ldrh	r3, [r7, #22]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d3da      	bcc.n	8006a3e <DRV_START+0xba>
	{
		iuOffset += ADC_MEASUREMENT_ADV_GetResult(&ADC_U_Channel_A_handle);
		ivOffset += ADC_MEASUREMENT_ADV_GetResult(&ADC_V_Channel_A_handle);
		for(uint16_t j = 0; j < 1000; j++);	//delay
	}
	iuOffset /= iloscProbek;
 8006a88:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <DRV_START+0x14c>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	8afb      	ldrh	r3, [r7, #22]
 8006a8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006a92:	4a0f      	ldr	r2, [pc, #60]	; (8006ad0 <DRV_START+0x14c>)
 8006a94:	6013      	str	r3, [r2, #0]
	ivOffset /= iloscProbek;
 8006a96:	4b10      	ldr	r3, [pc, #64]	; (8006ad8 <DRV_START+0x154>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	8afb      	ldrh	r3, [r7, #22]
 8006a9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006aa0:	4a0d      	ldr	r2, [pc, #52]	; (8006ad8 <DRV_START+0x154>)
 8006aa2:	6013      	str	r3, [r2, #0]
	iwOffset /= iloscProbek;
 8006aa4:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <DRV_START+0x158>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	8afb      	ldrh	r3, [r7, #22]
 8006aaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8006aae:	4a0b      	ldr	r2, [pc, #44]	; (8006adc <DRV_START+0x158>)
 8006ab0:	6013      	str	r3, [r2, #0]

	DIGITAL_IO_SetOutputLow(&DC_CAL);
 8006ab2:	4805      	ldr	r0, [pc, #20]	; (8006ac8 <DRV_START+0x144>)
 8006ab4:	f7ff fb8c 	bl	80061d0 <DIGITAL_IO_SetOutputLow>
}
 8006ab8:	3728      	adds	r7, #40	; 0x28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	200000a0 	.word	0x200000a0
 8006ac4:	20000088 	.word	0x20000088
 8006ac8:	080089a0 	.word	0x080089a0
 8006acc:	08008a50 	.word	0x08008a50
 8006ad0:	20000464 	.word	0x20000464
 8006ad4:	08008a94 	.word	0x08008a94
 8006ad8:	2000046c 	.word	0x2000046c
 8006adc:	20000474 	.word	0x20000474

08006ae0 <LiczeniePradu>:
void LiczeniePradu(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0

	iu = i[0] - iuOffset;
	iu = (iu * v3v) / 4095;
	iu *= 5;
	*/
	i[0] = ADC_MEASUREMENT_ADV_GetResult(&ADC_U_Channel_A_handle);
 8006ae4:	4838      	ldr	r0, [pc, #224]	; (8006bc8 <LiczeniePradu+0xe8>)
 8006ae6:	f7ff fba5 	bl	8006234 <ADC_MEASUREMENT_ADV_GetResult>
 8006aea:	4603      	mov	r3, r0
 8006aec:	461a      	mov	r2, r3
 8006aee:	4b37      	ldr	r3, [pc, #220]	; (8006bcc <LiczeniePradu+0xec>)
 8006af0:	601a      	str	r2, [r3, #0]
	i[1] = ADC_MEASUREMENT_ADV_GetResult(&ADC_V_Channel_A_handle);
 8006af2:	4837      	ldr	r0, [pc, #220]	; (8006bd0 <LiczeniePradu+0xf0>)
 8006af4:	f7ff fb9e 	bl	8006234 <ADC_MEASUREMENT_ADV_GetResult>
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	4b33      	ldr	r3, [pc, #204]	; (8006bcc <LiczeniePradu+0xec>)
 8006afe:	605a      	str	r2, [r3, #4]

	i[1] = i[1] - ivOffset;
 8006b00:	4b32      	ldr	r3, [pc, #200]	; (8006bcc <LiczeniePradu+0xec>)
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	4b33      	ldr	r3, [pc, #204]	; (8006bd4 <LiczeniePradu+0xf4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	4a30      	ldr	r2, [pc, #192]	; (8006bcc <LiczeniePradu+0xec>)
 8006b0c:	6053      	str	r3, [r2, #4]
	i[1] = (i[1] * v3v) / 4095; // w tym miejscu sa miliwolty
 8006b0e:	4b2f      	ldr	r3, [pc, #188]	; (8006bcc <LiczeniePradu+0xec>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	4a31      	ldr	r2, [pc, #196]	; (8006bd8 <LiczeniePradu+0xf8>)
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	fb02 f303 	mul.w	r3, r2, r3
 8006b1a:	4a30      	ldr	r2, [pc, #192]	; (8006bdc <LiczeniePradu+0xfc>)
 8006b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8006b20:	441a      	add	r2, r3
 8006b22:	12d2      	asrs	r2, r2, #11
 8006b24:	17db      	asrs	r3, r3, #31
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	4a28      	ldr	r2, [pc, #160]	; (8006bcc <LiczeniePradu+0xec>)
 8006b2a:	6053      	str	r3, [r2, #4]
	i[1] *= 5;
 8006b2c:	4b27      	ldr	r3, [pc, #156]	; (8006bcc <LiczeniePradu+0xec>)
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	4a25      	ldr	r2, [pc, #148]	; (8006bcc <LiczeniePradu+0xec>)
 8006b38:	6053      	str	r3, [r2, #4]

	i[0] = i[0] - iuOffset;
 8006b3a:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <LiczeniePradu+0xec>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b28      	ldr	r3, [pc, #160]	; (8006be0 <LiczeniePradu+0x100>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	4a21      	ldr	r2, [pc, #132]	; (8006bcc <LiczeniePradu+0xec>)
 8006b46:	6013      	str	r3, [r2, #0]
	i[0] = (i[0] * v3v) / 4095;
 8006b48:	4b20      	ldr	r3, [pc, #128]	; (8006bcc <LiczeniePradu+0xec>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a22      	ldr	r2, [pc, #136]	; (8006bd8 <LiczeniePradu+0xf8>)
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	fb02 f303 	mul.w	r3, r2, r3
 8006b54:	4a21      	ldr	r2, [pc, #132]	; (8006bdc <LiczeniePradu+0xfc>)
 8006b56:	fb82 1203 	smull	r1, r2, r2, r3
 8006b5a:	441a      	add	r2, r3
 8006b5c:	12d2      	asrs	r2, r2, #11
 8006b5e:	17db      	asrs	r3, r3, #31
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <LiczeniePradu+0xec>)
 8006b64:	6013      	str	r3, [r2, #0]
	i[0] *= 5;
 8006b66:	4b19      	ldr	r3, [pc, #100]	; (8006bcc <LiczeniePradu+0xec>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	4a16      	ldr	r2, [pc, #88]	; (8006bcc <LiczeniePradu+0xec>)
 8006b72:	6013      	str	r3, [r2, #0]

	iu = (iu * 14) + (i[0]* 2);
 8006b74:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <LiczeniePradu+0x104>)
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	1a9a      	subs	r2, r3, r2
 8006b7e:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <LiczeniePradu+0xec>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4413      	add	r3, r2
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <LiczeniePradu+0x104>)
 8006b88:	6013      	str	r3, [r2, #0]
	iu = iu >> 4;
 8006b8a:	4b16      	ldr	r3, [pc, #88]	; (8006be4 <LiczeniePradu+0x104>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	111b      	asrs	r3, r3, #4
 8006b90:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <LiczeniePradu+0x104>)
 8006b92:	6013      	str	r3, [r2, #0]
	iv = (iv * 14) + (i[1]* 2);
 8006b94:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <LiczeniePradu+0x108>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	1a9a      	subs	r2, r3, r2
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <LiczeniePradu+0xec>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <LiczeniePradu+0x108>)
 8006ba8:	6013      	str	r3, [r2, #0]
	iv = iv >> 4;
 8006baa:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <LiczeniePradu+0x108>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	111b      	asrs	r3, r3, #4
 8006bb0:	4a0d      	ldr	r2, [pc, #52]	; (8006be8 <LiczeniePradu+0x108>)
 8006bb2:	6013      	str	r3, [r2, #0]

	iw = - iu - iv;
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <LiczeniePradu+0x104>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	425a      	negs	r2, r3
 8006bba:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <LiczeniePradu+0x108>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <LiczeniePradu+0x10c>)
 8006bc2:	6013      	str	r3, [r2, #0]
}
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	08008a50 	.word	0x08008a50
 8006bcc:	20000478 	.word	0x20000478
 8006bd0:	08008a94 	.word	0x08008a94
 8006bd4:	2000046c 	.word	0x2000046c
 8006bd8:	200002c8 	.word	0x200002c8
 8006bdc:	80080081 	.word	0x80080081
 8006be0:	20000464 	.word	0x20000464
 8006be4:	20000460 	.word	0x20000460
 8006be8:	20000468 	.word	0x20000468
 8006bec:	20000470 	.word	0x20000470

08006bf0 <CCU80_2_IRQHandler>:
void ADC_START(void)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0

}
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <XMC_Init>:
void ADC_Pomiary(void)
{
}
void XMC_Init()
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
	switch (silnik) {
 8006c00:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <XMC_Init+0x88>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <XMC_Init+0x12>
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d00a      	beq.n	8006c22 <XMC_Init+0x26>
			offset_elektryczny = -25500;

			znak = 1;
			break;
		default:
			break;
 8006c0c:	e013      	b.n	8006c36 <XMC_Init+0x3a>
}
void XMC_Init()
{
	switch (silnik) {
		case 0:
			adress = 0x10;
 8006c0e:	4b1e      	ldr	r3, [pc, #120]	; (8006c88 <XMC_Init+0x8c>)
 8006c10:	2210      	movs	r2, #16
 8006c12:	701a      	strb	r2, [r3, #0]
			offset_elektryczny = -11200;
 8006c14:	4b1d      	ldr	r3, [pc, #116]	; (8006c8c <XMC_Init+0x90>)
 8006c16:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <XMC_Init+0x94>)
 8006c18:	601a      	str	r2, [r3, #0]

			znak = -1;
 8006c1a:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <XMC_Init+0x98>)
 8006c1c:	22ff      	movs	r2, #255	; 0xff
 8006c1e:	701a      	strb	r2, [r3, #0]
			break;
 8006c20:	e009      	b.n	8006c36 <XMC_Init+0x3a>
		case 1:
			adress = 0x11;
 8006c22:	4b19      	ldr	r3, [pc, #100]	; (8006c88 <XMC_Init+0x8c>)
 8006c24:	2211      	movs	r2, #17
 8006c26:	701a      	strb	r2, [r3, #0]
			offset_elektryczny = -25500;
 8006c28:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <XMC_Init+0x90>)
 8006c2a:	4a1b      	ldr	r2, [pc, #108]	; (8006c98 <XMC_Init+0x9c>)
 8006c2c:	601a      	str	r2, [r3, #0]

			znak = 1;
 8006c2e:	4b19      	ldr	r3, [pc, #100]	; (8006c94 <XMC_Init+0x98>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	701a      	strb	r2, [r3, #0]
			break;
 8006c34:	bf00      	nop
		default:
			break;
	}
	PI_Iq.kP = 4500;
 8006c36:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <XMC_Init+0xa0>)
 8006c38:	f241 1294 	movw	r2, #4500	; 0x1194
 8006c3c:	801a      	strh	r2, [r3, #0]
	PI_Iq.kI =412;
 8006c3e:	4b17      	ldr	r3, [pc, #92]	; (8006c9c <XMC_Init+0xa0>)
 8006c40:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006c44:	805a      	strh	r2, [r3, #2]
	PI_Id.kP =2107;
 8006c46:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <XMC_Init+0xa4>)
 8006c48:	f640 023b 	movw	r2, #2107	; 0x83b
 8006c4c:	801a      	strh	r2, [r3, #0]
	PI_Id.kI =1130;
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <XMC_Init+0xa4>)
 8006c50:	f240 426a 	movw	r2, #1130	; 0x46a
 8006c54:	805a      	strh	r2, [r3, #2]
	RS_Init();
 8006c56:	f7ff fb93 	bl	8006380 <RS_Init>
	while(init == 0)
 8006c5a:	e00b      	b.n	8006c74 <XMC_Init+0x78>
	{
		UART_Receive(&UART_0, &rxByte,1);
 8006c5c:	4811      	ldr	r0, [pc, #68]	; (8006ca4 <XMC_Init+0xa8>)
 8006c5e:	4912      	ldr	r1, [pc, #72]	; (8006ca8 <XMC_Init+0xac>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	f7fb fca7 	bl	80025b4 <UART_Receive>

		DIGITAL_IO_ToggleOutput(&LED);
 8006c66:	4811      	ldr	r0, [pc, #68]	; (8006cac <XMC_Init+0xb0>)
 8006c68:	f7ff fac2 	bl	80061f0 <DIGITAL_IO_ToggleOutput>
		delay(50000);
 8006c6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c70:	f000 f8c6 	bl	8006e00 <delay>
	PI_Iq.kP = 4500;
	PI_Iq.kI =412;
	PI_Id.kP =2107;
	PI_Id.kI =1130;
	RS_Init();
	while(init == 0)
 8006c74:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <XMC_Init+0xb4>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0ef      	beq.n	8006c5c <XMC_Init+0x60>
		UART_Receive(&UART_0, &rxByte,1);

		DIGITAL_IO_ToggleOutput(&LED);
		delay(50000);
	}
	DIGITAL_IO_SetOutputLow(&LED);
 8006c7c:	480b      	ldr	r0, [pc, #44]	; (8006cac <XMC_Init+0xb0>)
 8006c7e:	f7ff faa7 	bl	80061d0 <DIGITAL_IO_SetOutputLow>
}
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000410 	.word	0x20000410
 8006c88:	20000411 	.word	0x20000411
 8006c8c:	20000458 	.word	0x20000458
 8006c90:	ffffd440 	.word	0xffffd440
 8006c94:	20000413 	.word	0x20000413
 8006c98:	ffff9c64 	.word	0xffff9c64
 8006c9c:	20000738 	.word	0x20000738
 8006ca0:	20000760 	.word	0x20000760
 8006ca4:	20000000 	.word	0x20000000
 8006ca8:	2000042c 	.word	0x2000042c
 8006cac:	0800898c 	.word	0x0800898c
 8006cb0:	20000412 	.word	0x20000412

08006cb4 <end_transmit>:
void end_transmit()
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
}
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <end_receive>:
void end_receive()
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
	if(rxByte == SOF)
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <end_receive+0x70>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2bcc      	cmp	r3, #204	; 0xcc
 8006cca:	d107      	bne.n	8006cdc <end_receive+0x1c>
	{
		rxData[0] = rxByte;
 8006ccc:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <end_receive+0x70>)
 8006cce:	781a      	ldrb	r2, [r3, #0]
 8006cd0:	4b18      	ldr	r3, [pc, #96]	; (8006d34 <end_receive+0x74>)
 8006cd2:	701a      	strb	r2, [r3, #0]
		iterator_wiadomosci = 1;
 8006cd4:	4b18      	ldr	r3, [pc, #96]	; (8006d38 <end_receive+0x78>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	e023      	b.n	8006d24 <end_receive+0x64>
	}
	else if (rxByte == EOF)
 8006cdc:	4b14      	ldr	r3, [pc, #80]	; (8006d30 <end_receive+0x70>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2bdd      	cmp	r3, #221	; 0xdd
 8006ce2:	d10e      	bne.n	8006d02 <end_receive+0x42>
	{
		rxData[iterator_wiadomosci +1] = EOF;
 8006ce4:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <end_receive+0x78>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	4a12      	ldr	r2, [pc, #72]	; (8006d34 <end_receive+0x74>)
 8006cec:	21dd      	movs	r1, #221	; 0xdd
 8006cee:	54d1      	strb	r1, [r2, r3]
		iterator_wiadomosci++;
 8006cf0:	4b11      	ldr	r3, [pc, #68]	; (8006d38 <end_receive+0x78>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <end_receive+0x78>)
 8006cfa:	701a      	strb	r2, [r3, #0]
		interpreter_wiadomosci();
 8006cfc:	f000 f820 	bl	8006d40 <interpreter_wiadomosci>
 8006d00:	e010      	b.n	8006d24 <end_receive+0x64>

	}
	else if ( iterator_wiadomosci < 9)
 8006d02:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <end_receive+0x78>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b08      	cmp	r3, #8
 8006d08:	d80c      	bhi.n	8006d24 <end_receive+0x64>
	{
		rxData[iterator_wiadomosci] =rxByte;
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <end_receive+0x78>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <end_receive+0x70>)
 8006d12:	7819      	ldrb	r1, [r3, #0]
 8006d14:	4b07      	ldr	r3, [pc, #28]	; (8006d34 <end_receive+0x74>)
 8006d16:	5499      	strb	r1, [r3, r2]
		iterator_wiadomosci++;
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <end_receive+0x78>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <end_receive+0x78>)
 8006d22:	701a      	strb	r2, [r3, #0]
	}
	UART_Receive(&UART_0, &rxByte,1);
 8006d24:	4805      	ldr	r0, [pc, #20]	; (8006d3c <end_receive+0x7c>)
 8006d26:	4902      	ldr	r1, [pc, #8]	; (8006d30 <end_receive+0x70>)
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f7fb fc43 	bl	80025b4 <UART_Receive>
}
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	2000042c 	.word	0x2000042c
 8006d34:	20000414 	.word	0x20000414
 8006d38:	2000042d 	.word	0x2000042d
 8006d3c:	20000000 	.word	0x20000000

08006d40 <interpreter_wiadomosci>:
void interpreter_wiadomosci()
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
	if(rxData[0] == SOF && rxData[1] == adress)
 8006d44:	4b27      	ldr	r3, [pc, #156]	; (8006de4 <interpreter_wiadomosci+0xa4>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2bcc      	cmp	r3, #204	; 0xcc
 8006d4a:	d149      	bne.n	8006de0 <interpreter_wiadomosci+0xa0>
 8006d4c:	4b25      	ldr	r3, [pc, #148]	; (8006de4 <interpreter_wiadomosci+0xa4>)
 8006d4e:	785a      	ldrb	r2, [r3, #1]
 8006d50:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <interpreter_wiadomosci+0xa8>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d143      	bne.n	8006de0 <interpreter_wiadomosci+0xa0>
	{
		if(init == 0 && rxData[2] == INIT)			//inicjalizacja
 8006d58:	4b24      	ldr	r3, [pc, #144]	; (8006dec <interpreter_wiadomosci+0xac>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d116      	bne.n	8006d8e <interpreter_wiadomosci+0x4e>
 8006d60:	4b20      	ldr	r3, [pc, #128]	; (8006de4 <interpreter_wiadomosci+0xa4>)
 8006d62:	789b      	ldrb	r3, [r3, #2]
 8006d64:	2ba1      	cmp	r3, #161	; 0xa1
 8006d66:	d112      	bne.n	8006d8e <interpreter_wiadomosci+0x4e>
		{
			init = 1;
 8006d68:	4b20      	ldr	r3, [pc, #128]	; (8006dec <interpreter_wiadomosci+0xac>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]
			txData[3] =INIT;
 8006d6e:	4b20      	ldr	r3, [pc, #128]	; (8006df0 <interpreter_wiadomosci+0xb0>)
 8006d70:	22a1      	movs	r2, #161	; 0xa1
 8006d72:	70da      	strb	r2, [r3, #3]
			txData[4] =init;
 8006d74:	4b1d      	ldr	r3, [pc, #116]	; (8006dec <interpreter_wiadomosci+0xac>)
 8006d76:	781a      	ldrb	r2, [r3, #0]
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <interpreter_wiadomosci+0xb0>)
 8006d7a:	711a      	strb	r2, [r3, #4]
			txData[5] = EOF;
 8006d7c:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <interpreter_wiadomosci+0xb0>)
 8006d7e:	22dd      	movs	r2, #221	; 0xdd
 8006d80:	715a      	strb	r2, [r3, #5]
			UART_Transmit(&UART_0, txData, 6);
 8006d82:	481c      	ldr	r0, [pc, #112]	; (8006df4 <interpreter_wiadomosci+0xb4>)
 8006d84:	491a      	ldr	r1, [pc, #104]	; (8006df0 <interpreter_wiadomosci+0xb0>)
 8006d86:	2206      	movs	r2, #6
 8006d88:	f7fb fbf8 	bl	800257c <UART_Transmit>
 8006d8c:	e028      	b.n	8006de0 <interpreter_wiadomosci+0xa0>
		}
		else if(rxData[2] == CHECK)				//status check
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <interpreter_wiadomosci+0xa4>)
 8006d90:	789b      	ldrb	r3, [r3, #2]
 8006d92:	2ba3      	cmp	r3, #163	; 0xa3
 8006d94:	d113      	bne.n	8006dbe <interpreter_wiadomosci+0x7e>
		{
			txData[3] =CHECK;
 8006d96:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <interpreter_wiadomosci+0xb0>)
 8006d98:	22a3      	movs	r2, #163	; 0xa3
 8006d9a:	70da      	strb	r2, [r3, #3]
			txData[4] =init;
 8006d9c:	4b13      	ldr	r3, [pc, #76]	; (8006dec <interpreter_wiadomosci+0xac>)
 8006d9e:	781a      	ldrb	r2, [r3, #0]
 8006da0:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <interpreter_wiadomosci+0xb0>)
 8006da2:	711a      	strb	r2, [r3, #4]
			txData[5] = silnik;
 8006da4:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <interpreter_wiadomosci+0xb8>)
 8006da6:	781a      	ldrb	r2, [r3, #0]
 8006da8:	4b11      	ldr	r3, [pc, #68]	; (8006df0 <interpreter_wiadomosci+0xb0>)
 8006daa:	715a      	strb	r2, [r3, #5]
			txData[6] = EOF;
 8006dac:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <interpreter_wiadomosci+0xb0>)
 8006dae:	22dd      	movs	r2, #221	; 0xdd
 8006db0:	719a      	strb	r2, [r3, #6]
			UART_Transmit(&UART_0, txData, 7);
 8006db2:	4810      	ldr	r0, [pc, #64]	; (8006df4 <interpreter_wiadomosci+0xb4>)
 8006db4:	490e      	ldr	r1, [pc, #56]	; (8006df0 <interpreter_wiadomosci+0xb0>)
 8006db6:	2207      	movs	r2, #7
 8006db8:	f7fb fbe0 	bl	800257c <UART_Transmit>
 8006dbc:	e010      	b.n	8006de0 <interpreter_wiadomosci+0xa0>
		}
		else															//zadawanie momentu
		{
			poz_zad = rxData[2] << 8 | rxData[3];
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <interpreter_wiadomosci+0xa4>)
 8006dc0:	789b      	ldrb	r3, [r3, #2]
 8006dc2:	021b      	lsls	r3, r3, #8
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <interpreter_wiadomosci+0xa4>)
 8006dc8:	78db      	ldrb	r3, [r3, #3]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <interpreter_wiadomosci+0xbc>)
 8006dd4:	801a      	strh	r2, [r3, #0]
			UART_Transmit(&UART_0, txData, 10);
 8006dd6:	4807      	ldr	r0, [pc, #28]	; (8006df4 <interpreter_wiadomosci+0xb4>)
 8006dd8:	4905      	ldr	r1, [pc, #20]	; (8006df0 <interpreter_wiadomosci+0xb0>)
 8006dda:	220a      	movs	r2, #10
 8006ddc:	f7fb fbce 	bl	800257c <UART_Transmit>
		}
	}
}
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000414 	.word	0x20000414
 8006de8:	20000411 	.word	0x20000411
 8006dec:	20000412 	.word	0x20000412
 8006df0:	20000420 	.word	0x20000420
 8006df4:	20000000 	.word	0x20000000
 8006df8:	20000410 	.word	0x20000410
 8006dfc:	200002b8 	.word	0x200002b8

08006e00 <delay>:
void delay(uint32_t us)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	is_delay = 1;
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <delay+0x34>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
	TIMER_SetTimeInterval(&DELAY, us);
 8006e0e:	480a      	ldr	r0, [pc, #40]	; (8006e38 <delay+0x38>)
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	f7fb fffd 	bl	8002e10 <TIMER_SetTimeInterval>
	TIMER_Start(&DELAY);
 8006e16:	4808      	ldr	r0, [pc, #32]	; (8006e38 <delay+0x38>)
 8006e18:	f7fb ffa0 	bl	8002d5c <TIMER_Start>
	while(is_delay);
 8006e1c:	bf00      	nop
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <delay+0x34>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1fb      	bne.n	8006e1e <delay+0x1e>
	TIMER_Stop(&DELAY);
 8006e26:	4804      	ldr	r0, [pc, #16]	; (8006e38 <delay+0x38>)
 8006e28:	f7fb ffb6 	bl	8002d98 <TIMER_Stop>
}
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	200002b4 	.word	0x200002b4
 8006e38:	2000000c 	.word	0x2000000c

08006e3c <CCU43_1_IRQHandler>:
void TIMER_IRQ()
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
	is_delay = 0;
 8006e40:	4b03      	ldr	r3, [pc, #12]	; (8006e50 <CCU43_1_IRQHandler+0x14>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
}
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	200002b4 	.word	0x200002b4

08006e54 <sqrtf>:
 8006e54:	b530      	push	{r4, r5, lr}
 8006e56:	ed2d 8b02 	vpush	{d8}
 8006e5a:	4d28      	ldr	r5, [pc, #160]	; (8006efc <sqrtf+0xa8>)
 8006e5c:	b08b      	sub	sp, #44	; 0x2c
 8006e5e:	ee08 0a10 	vmov	s16, r0
 8006e62:	f000 f84f 	bl	8006f04 <__ieee754_sqrtf>
 8006e66:	f995 3000 	ldrsb.w	r3, [r5]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	d009      	beq.n	8006e84 <sqrtf+0x30>
 8006e70:	ee18 0a10 	vmov	r0, s16
 8006e74:	f000 f89e 	bl	8006fb4 <__fpclassifyf>
 8006e78:	b120      	cbz	r0, 8006e84 <sqrtf+0x30>
 8006e7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e82:	d404      	bmi.n	8006e8e <sqrtf+0x3a>
 8006e84:	4620      	mov	r0, r4
 8006e86:	b00b      	add	sp, #44	; 0x2c
 8006e88:	ecbd 8b02 	vpop	{d8}
 8006e8c:	bd30      	pop	{r4, r5, pc}
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4a1b      	ldr	r2, [pc, #108]	; (8006f00 <sqrtf+0xac>)
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	ee18 0a10 	vmov	r0, s16
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9201      	str	r2, [sp, #4]
 8006e9c:	9308      	str	r3, [sp, #32]
 8006e9e:	f000 fa07 	bl	80072b0 <__aeabi_f2d>
 8006ea2:	782c      	ldrb	r4, [r5, #0]
 8006ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eac:	b98c      	cbnz	r4, 8006ed2 <sqrtf+0x7e>
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006eb6:	4668      	mov	r0, sp
 8006eb8:	f000 f87a 	bl	8006fb0 <matherr>
 8006ebc:	b198      	cbz	r0, 8006ee6 <sqrtf+0x92>
 8006ebe:	9b08      	ldr	r3, [sp, #32]
 8006ec0:	b9b3      	cbnz	r3, 8006ef0 <sqrtf+0x9c>
 8006ec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ec6:	f000 fc59 	bl	800777c <__aeabi_d2f>
 8006eca:	b00b      	add	sp, #44	; 0x2c
 8006ecc:	ecbd 8b02 	vpop	{d8}
 8006ed0:	bd30      	pop	{r4, r5, pc}
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	f000 fb67 	bl	80075ac <__aeabi_ddiv>
 8006ede:	2c02      	cmp	r4, #2
 8006ee0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ee4:	d1e7      	bne.n	8006eb6 <sqrtf+0x62>
 8006ee6:	f000 ff65 	bl	8007db4 <__errno>
 8006eea:	2321      	movs	r3, #33	; 0x21
 8006eec:	6003      	str	r3, [r0, #0]
 8006eee:	e7e6      	b.n	8006ebe <sqrtf+0x6a>
 8006ef0:	f000 ff60 	bl	8007db4 <__errno>
 8006ef4:	9b08      	ldr	r3, [sp, #32]
 8006ef6:	6003      	str	r3, [r0, #0]
 8006ef8:	e7e3      	b.n	8006ec2 <sqrtf+0x6e>
 8006efa:	bf00      	nop
 8006efc:	200002cc 	.word	0x200002cc
 8006f00:	08008b0c 	.word	0x08008b0c

08006f04 <__ieee754_sqrtf>:
 8006f04:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006f08:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006f0c:	b470      	push	{r4, r5, r6}
 8006f0e:	ee07 0a90 	vmov	s15, r0
 8006f12:	4603      	mov	r3, r0
 8006f14:	d232      	bcs.n	8006f7c <__ieee754_sqrtf+0x78>
 8006f16:	b36a      	cbz	r2, 8006f74 <__ieee754_sqrtf+0x70>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	db41      	blt.n	8006fa0 <__ieee754_sqrtf+0x9c>
 8006f1c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006f20:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006f24:	d330      	bcc.n	8006f88 <__ieee754_sqrtf+0x84>
 8006f26:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 8006f2a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f2e:	07d1      	lsls	r1, r2, #31
 8006f30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f34:	bf48      	it	mi
 8006f36:	005b      	lslmi	r3, r3, #1
 8006f38:	2400      	movs	r4, #0
 8006f3a:	1056      	asrs	r6, r2, #1
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	4625      	mov	r5, r4
 8006f40:	2119      	movs	r1, #25
 8006f42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f46:	18a8      	adds	r0, r5, r2
 8006f48:	4298      	cmp	r0, r3
 8006f4a:	dc02      	bgt.n	8006f52 <__ieee754_sqrtf+0x4e>
 8006f4c:	1a1b      	subs	r3, r3, r0
 8006f4e:	1885      	adds	r5, r0, r2
 8006f50:	4414      	add	r4, r2
 8006f52:	3901      	subs	r1, #1
 8006f54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f58:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006f5c:	d1f3      	bne.n	8006f46 <__ieee754_sqrtf+0x42>
 8006f5e:	b113      	cbz	r3, 8006f66 <__ieee754_sqrtf+0x62>
 8006f60:	f004 0301 	and.w	r3, r4, #1
 8006f64:	441c      	add	r4, r3
 8006f66:	1064      	asrs	r4, r4, #1
 8006f68:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8006f6c:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 8006f70:	ee07 3a90 	vmov	s15, r3
 8006f74:	ee17 0a90 	vmov	r0, s15
 8006f78:	bc70      	pop	{r4, r5, r6}
 8006f7a:	4770      	bx	lr
 8006f7c:	eee7 7aa7 	vfma.f32	s15, s15, s15
 8006f80:	bc70      	pop	{r4, r5, r6}
 8006f82:	ee17 0a90 	vmov	r0, s15
 8006f86:	4770      	bx	lr
 8006f88:	f410 0200 	ands.w	r2, r0, #8388608	; 0x800000
 8006f8c:	d10d      	bne.n	8006faa <__ieee754_sqrtf+0xa6>
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	0218      	lsls	r0, r3, #8
 8006f92:	f102 0201 	add.w	r2, r2, #1
 8006f96:	d5fa      	bpl.n	8006f8e <__ieee754_sqrtf+0x8a>
 8006f98:	f1c2 0201 	rsb	r2, r2, #1
 8006f9c:	4411      	add	r1, r2
 8006f9e:	e7c2      	b.n	8006f26 <__ieee754_sqrtf+0x22>
 8006fa0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8006fa4:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 8006fa8:	e7e4      	b.n	8006f74 <__ieee754_sqrtf+0x70>
 8006faa:	2201      	movs	r2, #1
 8006fac:	4411      	add	r1, r2
 8006fae:	e7ba      	b.n	8006f26 <__ieee754_sqrtf+0x22>

08006fb0 <matherr>:
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	4770      	bx	lr

08006fb4 <__fpclassifyf>:
 8006fb4:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 8006fb8:	d101      	bne.n	8006fbe <__fpclassifyf+0xa>
 8006fba:	2002      	movs	r0, #2
 8006fbc:	4770      	bx	lr
 8006fbe:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8006fc2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8006fc6:	d201      	bcs.n	8006fcc <__fpclassifyf+0x18>
 8006fc8:	2004      	movs	r0, #4
 8006fca:	4770      	bx	lr
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <__fpclassifyf+0x30>)
 8006fce:	1e42      	subs	r2, r0, #1
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d801      	bhi.n	8006fd8 <__fpclassifyf+0x24>
 8006fd4:	2003      	movs	r0, #3
 8006fd6:	4770      	bx	lr
 8006fd8:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 8006fdc:	fab0 f080 	clz	r0, r0
 8006fe0:	0940      	lsrs	r0, r0, #5
 8006fe2:	4770      	bx	lr
 8006fe4:	007ffffe 	.word	0x007ffffe

08006fe8 <__aeabi_drsub>:
 8006fe8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006fec:	e002      	b.n	8006ff4 <__adddf3>
 8006fee:	bf00      	nop

08006ff0 <__aeabi_dsub>:
 8006ff0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006ff4 <__adddf3>:
 8006ff4:	b530      	push	{r4, r5, lr}
 8006ff6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006ffa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006ffe:	ea94 0f05 	teq	r4, r5
 8007002:	bf08      	it	eq
 8007004:	ea90 0f02 	teqeq	r0, r2
 8007008:	bf1f      	itttt	ne
 800700a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800700e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007012:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007016:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800701a:	f000 80e2 	beq.w	80071e2 <__adddf3+0x1ee>
 800701e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007022:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007026:	bfb8      	it	lt
 8007028:	426d      	neglt	r5, r5
 800702a:	dd0c      	ble.n	8007046 <__adddf3+0x52>
 800702c:	442c      	add	r4, r5
 800702e:	ea80 0202 	eor.w	r2, r0, r2
 8007032:	ea81 0303 	eor.w	r3, r1, r3
 8007036:	ea82 0000 	eor.w	r0, r2, r0
 800703a:	ea83 0101 	eor.w	r1, r3, r1
 800703e:	ea80 0202 	eor.w	r2, r0, r2
 8007042:	ea81 0303 	eor.w	r3, r1, r3
 8007046:	2d36      	cmp	r5, #54	; 0x36
 8007048:	bf88      	it	hi
 800704a:	bd30      	pophi	{r4, r5, pc}
 800704c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007050:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007054:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007058:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800705c:	d002      	beq.n	8007064 <__adddf3+0x70>
 800705e:	4240      	negs	r0, r0
 8007060:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007064:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007068:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800706c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007070:	d002      	beq.n	8007078 <__adddf3+0x84>
 8007072:	4252      	negs	r2, r2
 8007074:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007078:	ea94 0f05 	teq	r4, r5
 800707c:	f000 80a7 	beq.w	80071ce <__adddf3+0x1da>
 8007080:	f1a4 0401 	sub.w	r4, r4, #1
 8007084:	f1d5 0e20 	rsbs	lr, r5, #32
 8007088:	db0d      	blt.n	80070a6 <__adddf3+0xb2>
 800708a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800708e:	fa22 f205 	lsr.w	r2, r2, r5
 8007092:	1880      	adds	r0, r0, r2
 8007094:	f141 0100 	adc.w	r1, r1, #0
 8007098:	fa03 f20e 	lsl.w	r2, r3, lr
 800709c:	1880      	adds	r0, r0, r2
 800709e:	fa43 f305 	asr.w	r3, r3, r5
 80070a2:	4159      	adcs	r1, r3
 80070a4:	e00e      	b.n	80070c4 <__adddf3+0xd0>
 80070a6:	f1a5 0520 	sub.w	r5, r5, #32
 80070aa:	f10e 0e20 	add.w	lr, lr, #32
 80070ae:	2a01      	cmp	r2, #1
 80070b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80070b4:	bf28      	it	cs
 80070b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80070ba:	fa43 f305 	asr.w	r3, r3, r5
 80070be:	18c0      	adds	r0, r0, r3
 80070c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80070c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80070c8:	d507      	bpl.n	80070da <__adddf3+0xe6>
 80070ca:	f04f 0e00 	mov.w	lr, #0
 80070ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80070d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80070d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80070da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80070de:	d31b      	bcc.n	8007118 <__adddf3+0x124>
 80070e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80070e4:	d30c      	bcc.n	8007100 <__adddf3+0x10c>
 80070e6:	0849      	lsrs	r1, r1, #1
 80070e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80070ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80070f0:	f104 0401 	add.w	r4, r4, #1
 80070f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80070f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80070fc:	f080 809a 	bcs.w	8007234 <__adddf3+0x240>
 8007100:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007104:	bf08      	it	eq
 8007106:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800710a:	f150 0000 	adcs.w	r0, r0, #0
 800710e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007112:	ea41 0105 	orr.w	r1, r1, r5
 8007116:	bd30      	pop	{r4, r5, pc}
 8007118:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800711c:	4140      	adcs	r0, r0
 800711e:	eb41 0101 	adc.w	r1, r1, r1
 8007122:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007126:	f1a4 0401 	sub.w	r4, r4, #1
 800712a:	d1e9      	bne.n	8007100 <__adddf3+0x10c>
 800712c:	f091 0f00 	teq	r1, #0
 8007130:	bf04      	itt	eq
 8007132:	4601      	moveq	r1, r0
 8007134:	2000      	moveq	r0, #0
 8007136:	fab1 f381 	clz	r3, r1
 800713a:	bf08      	it	eq
 800713c:	3320      	addeq	r3, #32
 800713e:	f1a3 030b 	sub.w	r3, r3, #11
 8007142:	f1b3 0220 	subs.w	r2, r3, #32
 8007146:	da0c      	bge.n	8007162 <__adddf3+0x16e>
 8007148:	320c      	adds	r2, #12
 800714a:	dd08      	ble.n	800715e <__adddf3+0x16a>
 800714c:	f102 0c14 	add.w	ip, r2, #20
 8007150:	f1c2 020c 	rsb	r2, r2, #12
 8007154:	fa01 f00c 	lsl.w	r0, r1, ip
 8007158:	fa21 f102 	lsr.w	r1, r1, r2
 800715c:	e00c      	b.n	8007178 <__adddf3+0x184>
 800715e:	f102 0214 	add.w	r2, r2, #20
 8007162:	bfd8      	it	le
 8007164:	f1c2 0c20 	rsble	ip, r2, #32
 8007168:	fa01 f102 	lsl.w	r1, r1, r2
 800716c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007170:	bfdc      	itt	le
 8007172:	ea41 010c 	orrle.w	r1, r1, ip
 8007176:	4090      	lslle	r0, r2
 8007178:	1ae4      	subs	r4, r4, r3
 800717a:	bfa2      	ittt	ge
 800717c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007180:	4329      	orrge	r1, r5
 8007182:	bd30      	popge	{r4, r5, pc}
 8007184:	ea6f 0404 	mvn.w	r4, r4
 8007188:	3c1f      	subs	r4, #31
 800718a:	da1c      	bge.n	80071c6 <__adddf3+0x1d2>
 800718c:	340c      	adds	r4, #12
 800718e:	dc0e      	bgt.n	80071ae <__adddf3+0x1ba>
 8007190:	f104 0414 	add.w	r4, r4, #20
 8007194:	f1c4 0220 	rsb	r2, r4, #32
 8007198:	fa20 f004 	lsr.w	r0, r0, r4
 800719c:	fa01 f302 	lsl.w	r3, r1, r2
 80071a0:	ea40 0003 	orr.w	r0, r0, r3
 80071a4:	fa21 f304 	lsr.w	r3, r1, r4
 80071a8:	ea45 0103 	orr.w	r1, r5, r3
 80071ac:	bd30      	pop	{r4, r5, pc}
 80071ae:	f1c4 040c 	rsb	r4, r4, #12
 80071b2:	f1c4 0220 	rsb	r2, r4, #32
 80071b6:	fa20 f002 	lsr.w	r0, r0, r2
 80071ba:	fa01 f304 	lsl.w	r3, r1, r4
 80071be:	ea40 0003 	orr.w	r0, r0, r3
 80071c2:	4629      	mov	r1, r5
 80071c4:	bd30      	pop	{r4, r5, pc}
 80071c6:	fa21 f004 	lsr.w	r0, r1, r4
 80071ca:	4629      	mov	r1, r5
 80071cc:	bd30      	pop	{r4, r5, pc}
 80071ce:	f094 0f00 	teq	r4, #0
 80071d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80071d6:	bf06      	itte	eq
 80071d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80071dc:	3401      	addeq	r4, #1
 80071de:	3d01      	subne	r5, #1
 80071e0:	e74e      	b.n	8007080 <__adddf3+0x8c>
 80071e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80071e6:	bf18      	it	ne
 80071e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80071ec:	d029      	beq.n	8007242 <__adddf3+0x24e>
 80071ee:	ea94 0f05 	teq	r4, r5
 80071f2:	bf08      	it	eq
 80071f4:	ea90 0f02 	teqeq	r0, r2
 80071f8:	d005      	beq.n	8007206 <__adddf3+0x212>
 80071fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80071fe:	bf04      	itt	eq
 8007200:	4619      	moveq	r1, r3
 8007202:	4610      	moveq	r0, r2
 8007204:	bd30      	pop	{r4, r5, pc}
 8007206:	ea91 0f03 	teq	r1, r3
 800720a:	bf1e      	ittt	ne
 800720c:	2100      	movne	r1, #0
 800720e:	2000      	movne	r0, #0
 8007210:	bd30      	popne	{r4, r5, pc}
 8007212:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007216:	d105      	bne.n	8007224 <__adddf3+0x230>
 8007218:	0040      	lsls	r0, r0, #1
 800721a:	4149      	adcs	r1, r1
 800721c:	bf28      	it	cs
 800721e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007222:	bd30      	pop	{r4, r5, pc}
 8007224:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007228:	bf3c      	itt	cc
 800722a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800722e:	bd30      	popcc	{r4, r5, pc}
 8007230:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007234:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007238:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800723c:	f04f 0000 	mov.w	r0, #0
 8007240:	bd30      	pop	{r4, r5, pc}
 8007242:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007246:	bf1a      	itte	ne
 8007248:	4619      	movne	r1, r3
 800724a:	4610      	movne	r0, r2
 800724c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007250:	bf1c      	itt	ne
 8007252:	460b      	movne	r3, r1
 8007254:	4602      	movne	r2, r0
 8007256:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800725a:	bf06      	itte	eq
 800725c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007260:	ea91 0f03 	teqeq	r1, r3
 8007264:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007268:	bd30      	pop	{r4, r5, pc}
 800726a:	bf00      	nop

0800726c <__aeabi_ui2d>:
 800726c:	f090 0f00 	teq	r0, #0
 8007270:	bf04      	itt	eq
 8007272:	2100      	moveq	r1, #0
 8007274:	4770      	bxeq	lr
 8007276:	b530      	push	{r4, r5, lr}
 8007278:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800727c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007280:	f04f 0500 	mov.w	r5, #0
 8007284:	f04f 0100 	mov.w	r1, #0
 8007288:	e750      	b.n	800712c <__adddf3+0x138>
 800728a:	bf00      	nop

0800728c <__aeabi_i2d>:
 800728c:	f090 0f00 	teq	r0, #0
 8007290:	bf04      	itt	eq
 8007292:	2100      	moveq	r1, #0
 8007294:	4770      	bxeq	lr
 8007296:	b530      	push	{r4, r5, lr}
 8007298:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800729c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80072a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80072a4:	bf48      	it	mi
 80072a6:	4240      	negmi	r0, r0
 80072a8:	f04f 0100 	mov.w	r1, #0
 80072ac:	e73e      	b.n	800712c <__adddf3+0x138>
 80072ae:	bf00      	nop

080072b0 <__aeabi_f2d>:
 80072b0:	0042      	lsls	r2, r0, #1
 80072b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80072b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80072ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80072be:	bf1f      	itttt	ne
 80072c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80072c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80072c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80072cc:	4770      	bxne	lr
 80072ce:	f092 0f00 	teq	r2, #0
 80072d2:	bf14      	ite	ne
 80072d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80072d8:	4770      	bxeq	lr
 80072da:	b530      	push	{r4, r5, lr}
 80072dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80072e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80072e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80072e8:	e720      	b.n	800712c <__adddf3+0x138>
 80072ea:	bf00      	nop

080072ec <__aeabi_ul2d>:
 80072ec:	ea50 0201 	orrs.w	r2, r0, r1
 80072f0:	bf08      	it	eq
 80072f2:	4770      	bxeq	lr
 80072f4:	b530      	push	{r4, r5, lr}
 80072f6:	f04f 0500 	mov.w	r5, #0
 80072fa:	e00a      	b.n	8007312 <__aeabi_l2d+0x16>

080072fc <__aeabi_l2d>:
 80072fc:	ea50 0201 	orrs.w	r2, r0, r1
 8007300:	bf08      	it	eq
 8007302:	4770      	bxeq	lr
 8007304:	b530      	push	{r4, r5, lr}
 8007306:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800730a:	d502      	bpl.n	8007312 <__aeabi_l2d+0x16>
 800730c:	4240      	negs	r0, r0
 800730e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007312:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007316:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800731a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800731e:	f43f aedc 	beq.w	80070da <__adddf3+0xe6>
 8007322:	f04f 0203 	mov.w	r2, #3
 8007326:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800732a:	bf18      	it	ne
 800732c:	3203      	addne	r2, #3
 800732e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007332:	bf18      	it	ne
 8007334:	3203      	addne	r2, #3
 8007336:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800733a:	f1c2 0320 	rsb	r3, r2, #32
 800733e:	fa00 fc03 	lsl.w	ip, r0, r3
 8007342:	fa20 f002 	lsr.w	r0, r0, r2
 8007346:	fa01 fe03 	lsl.w	lr, r1, r3
 800734a:	ea40 000e 	orr.w	r0, r0, lr
 800734e:	fa21 f102 	lsr.w	r1, r1, r2
 8007352:	4414      	add	r4, r2
 8007354:	e6c1      	b.n	80070da <__adddf3+0xe6>
 8007356:	bf00      	nop

08007358 <__aeabi_dmul>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800735e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007362:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007366:	bf1d      	ittte	ne
 8007368:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800736c:	ea94 0f0c 	teqne	r4, ip
 8007370:	ea95 0f0c 	teqne	r5, ip
 8007374:	f000 f8de 	bleq	8007534 <__aeabi_dmul+0x1dc>
 8007378:	442c      	add	r4, r5
 800737a:	ea81 0603 	eor.w	r6, r1, r3
 800737e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007382:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007386:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800738a:	bf18      	it	ne
 800738c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007390:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007398:	d038      	beq.n	800740c <__aeabi_dmul+0xb4>
 800739a:	fba0 ce02 	umull	ip, lr, r0, r2
 800739e:	f04f 0500 	mov.w	r5, #0
 80073a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80073a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80073aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80073ae:	f04f 0600 	mov.w	r6, #0
 80073b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80073b6:	f09c 0f00 	teq	ip, #0
 80073ba:	bf18      	it	ne
 80073bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80073c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80073c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80073c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80073cc:	d204      	bcs.n	80073d8 <__aeabi_dmul+0x80>
 80073ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80073d2:	416d      	adcs	r5, r5
 80073d4:	eb46 0606 	adc.w	r6, r6, r6
 80073d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80073dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80073e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80073e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80073e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80073ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80073f0:	bf88      	it	hi
 80073f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80073f6:	d81e      	bhi.n	8007436 <__aeabi_dmul+0xde>
 80073f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80073fc:	bf08      	it	eq
 80073fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007402:	f150 0000 	adcs.w	r0, r0, #0
 8007406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007410:	ea46 0101 	orr.w	r1, r6, r1
 8007414:	ea40 0002 	orr.w	r0, r0, r2
 8007418:	ea81 0103 	eor.w	r1, r1, r3
 800741c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007420:	bfc2      	ittt	gt
 8007422:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007426:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800742a:	bd70      	popgt	{r4, r5, r6, pc}
 800742c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007430:	f04f 0e00 	mov.w	lr, #0
 8007434:	3c01      	subs	r4, #1
 8007436:	f300 80ab 	bgt.w	8007590 <__aeabi_dmul+0x238>
 800743a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800743e:	bfde      	ittt	le
 8007440:	2000      	movle	r0, #0
 8007442:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007446:	bd70      	pople	{r4, r5, r6, pc}
 8007448:	f1c4 0400 	rsb	r4, r4, #0
 800744c:	3c20      	subs	r4, #32
 800744e:	da35      	bge.n	80074bc <__aeabi_dmul+0x164>
 8007450:	340c      	adds	r4, #12
 8007452:	dc1b      	bgt.n	800748c <__aeabi_dmul+0x134>
 8007454:	f104 0414 	add.w	r4, r4, #20
 8007458:	f1c4 0520 	rsb	r5, r4, #32
 800745c:	fa00 f305 	lsl.w	r3, r0, r5
 8007460:	fa20 f004 	lsr.w	r0, r0, r4
 8007464:	fa01 f205 	lsl.w	r2, r1, r5
 8007468:	ea40 0002 	orr.w	r0, r0, r2
 800746c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007474:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007478:	fa21 f604 	lsr.w	r6, r1, r4
 800747c:	eb42 0106 	adc.w	r1, r2, r6
 8007480:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007484:	bf08      	it	eq
 8007486:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	f1c4 040c 	rsb	r4, r4, #12
 8007490:	f1c4 0520 	rsb	r5, r4, #32
 8007494:	fa00 f304 	lsl.w	r3, r0, r4
 8007498:	fa20 f005 	lsr.w	r0, r0, r5
 800749c:	fa01 f204 	lsl.w	r2, r1, r4
 80074a0:	ea40 0002 	orr.w	r0, r0, r2
 80074a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80074a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80074ac:	f141 0100 	adc.w	r1, r1, #0
 80074b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80074b4:	bf08      	it	eq
 80074b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	f1c4 0520 	rsb	r5, r4, #32
 80074c0:	fa00 f205 	lsl.w	r2, r0, r5
 80074c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80074c8:	fa20 f304 	lsr.w	r3, r0, r4
 80074cc:	fa01 f205 	lsl.w	r2, r1, r5
 80074d0:	ea43 0302 	orr.w	r3, r3, r2
 80074d4:	fa21 f004 	lsr.w	r0, r1, r4
 80074d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80074dc:	fa21 f204 	lsr.w	r2, r1, r4
 80074e0:	ea20 0002 	bic.w	r0, r0, r2
 80074e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80074e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80074ec:	bf08      	it	eq
 80074ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	f094 0f00 	teq	r4, #0
 80074f8:	d10f      	bne.n	800751a <__aeabi_dmul+0x1c2>
 80074fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80074fe:	0040      	lsls	r0, r0, #1
 8007500:	eb41 0101 	adc.w	r1, r1, r1
 8007504:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007508:	bf08      	it	eq
 800750a:	3c01      	subeq	r4, #1
 800750c:	d0f7      	beq.n	80074fe <__aeabi_dmul+0x1a6>
 800750e:	ea41 0106 	orr.w	r1, r1, r6
 8007512:	f095 0f00 	teq	r5, #0
 8007516:	bf18      	it	ne
 8007518:	4770      	bxne	lr
 800751a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800751e:	0052      	lsls	r2, r2, #1
 8007520:	eb43 0303 	adc.w	r3, r3, r3
 8007524:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007528:	bf08      	it	eq
 800752a:	3d01      	subeq	r5, #1
 800752c:	d0f7      	beq.n	800751e <__aeabi_dmul+0x1c6>
 800752e:	ea43 0306 	orr.w	r3, r3, r6
 8007532:	4770      	bx	lr
 8007534:	ea94 0f0c 	teq	r4, ip
 8007538:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800753c:	bf18      	it	ne
 800753e:	ea95 0f0c 	teqne	r5, ip
 8007542:	d00c      	beq.n	800755e <__aeabi_dmul+0x206>
 8007544:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007548:	bf18      	it	ne
 800754a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800754e:	d1d1      	bne.n	80074f4 <__aeabi_dmul+0x19c>
 8007550:	ea81 0103 	eor.w	r1, r1, r3
 8007554:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007558:	f04f 0000 	mov.w	r0, #0
 800755c:	bd70      	pop	{r4, r5, r6, pc}
 800755e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007562:	bf06      	itte	eq
 8007564:	4610      	moveq	r0, r2
 8007566:	4619      	moveq	r1, r3
 8007568:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800756c:	d019      	beq.n	80075a2 <__aeabi_dmul+0x24a>
 800756e:	ea94 0f0c 	teq	r4, ip
 8007572:	d102      	bne.n	800757a <__aeabi_dmul+0x222>
 8007574:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007578:	d113      	bne.n	80075a2 <__aeabi_dmul+0x24a>
 800757a:	ea95 0f0c 	teq	r5, ip
 800757e:	d105      	bne.n	800758c <__aeabi_dmul+0x234>
 8007580:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007584:	bf1c      	itt	ne
 8007586:	4610      	movne	r0, r2
 8007588:	4619      	movne	r1, r3
 800758a:	d10a      	bne.n	80075a2 <__aeabi_dmul+0x24a>
 800758c:	ea81 0103 	eor.w	r1, r1, r3
 8007590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007594:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007598:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800759c:	f04f 0000 	mov.w	r0, #0
 80075a0:	bd70      	pop	{r4, r5, r6, pc}
 80075a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80075a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80075aa:	bd70      	pop	{r4, r5, r6, pc}

080075ac <__aeabi_ddiv>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80075b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80075b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80075ba:	bf1d      	ittte	ne
 80075bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80075c0:	ea94 0f0c 	teqne	r4, ip
 80075c4:	ea95 0f0c 	teqne	r5, ip
 80075c8:	f000 f8a7 	bleq	800771a <__aeabi_ddiv+0x16e>
 80075cc:	eba4 0405 	sub.w	r4, r4, r5
 80075d0:	ea81 0e03 	eor.w	lr, r1, r3
 80075d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80075d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80075dc:	f000 8088 	beq.w	80076f0 <__aeabi_ddiv+0x144>
 80075e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80075e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80075e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80075ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80075f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80075f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80075f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80075fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007600:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007604:	429d      	cmp	r5, r3
 8007606:	bf08      	it	eq
 8007608:	4296      	cmpeq	r6, r2
 800760a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800760e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8007612:	d202      	bcs.n	800761a <__aeabi_ddiv+0x6e>
 8007614:	085b      	lsrs	r3, r3, #1
 8007616:	ea4f 0232 	mov.w	r2, r2, rrx
 800761a:	1ab6      	subs	r6, r6, r2
 800761c:	eb65 0503 	sbc.w	r5, r5, r3
 8007620:	085b      	lsrs	r3, r3, #1
 8007622:	ea4f 0232 	mov.w	r2, r2, rrx
 8007626:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800762a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800762e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007632:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007636:	bf22      	ittt	cs
 8007638:	1ab6      	subcs	r6, r6, r2
 800763a:	4675      	movcs	r5, lr
 800763c:	ea40 000c 	orrcs.w	r0, r0, ip
 8007640:	085b      	lsrs	r3, r3, #1
 8007642:	ea4f 0232 	mov.w	r2, r2, rrx
 8007646:	ebb6 0e02 	subs.w	lr, r6, r2
 800764a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800764e:	bf22      	ittt	cs
 8007650:	1ab6      	subcs	r6, r6, r2
 8007652:	4675      	movcs	r5, lr
 8007654:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007658:	085b      	lsrs	r3, r3, #1
 800765a:	ea4f 0232 	mov.w	r2, r2, rrx
 800765e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007662:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007666:	bf22      	ittt	cs
 8007668:	1ab6      	subcs	r6, r6, r2
 800766a:	4675      	movcs	r5, lr
 800766c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	ea4f 0232 	mov.w	r2, r2, rrx
 8007676:	ebb6 0e02 	subs.w	lr, r6, r2
 800767a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800767e:	bf22      	ittt	cs
 8007680:	1ab6      	subcs	r6, r6, r2
 8007682:	4675      	movcs	r5, lr
 8007684:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007688:	ea55 0e06 	orrs.w	lr, r5, r6
 800768c:	d018      	beq.n	80076c0 <__aeabi_ddiv+0x114>
 800768e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007692:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8007696:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800769a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800769e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80076a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80076a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80076aa:	d1c0      	bne.n	800762e <__aeabi_ddiv+0x82>
 80076ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80076b0:	d10b      	bne.n	80076ca <__aeabi_ddiv+0x11e>
 80076b2:	ea41 0100 	orr.w	r1, r1, r0
 80076b6:	f04f 0000 	mov.w	r0, #0
 80076ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80076be:	e7b6      	b.n	800762e <__aeabi_ddiv+0x82>
 80076c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80076c4:	bf04      	itt	eq
 80076c6:	4301      	orreq	r1, r0
 80076c8:	2000      	moveq	r0, #0
 80076ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80076ce:	bf88      	it	hi
 80076d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80076d4:	f63f aeaf 	bhi.w	8007436 <__aeabi_dmul+0xde>
 80076d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80076dc:	bf04      	itt	eq
 80076de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80076e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80076e6:	f150 0000 	adcs.w	r0, r0, #0
 80076ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80076f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80076f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80076fc:	bfc2      	ittt	gt
 80076fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007702:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007706:	bd70      	popgt	{r4, r5, r6, pc}
 8007708:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800770c:	f04f 0e00 	mov.w	lr, #0
 8007710:	3c01      	subs	r4, #1
 8007712:	e690      	b.n	8007436 <__aeabi_dmul+0xde>
 8007714:	ea45 0e06 	orr.w	lr, r5, r6
 8007718:	e68d      	b.n	8007436 <__aeabi_dmul+0xde>
 800771a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800771e:	ea94 0f0c 	teq	r4, ip
 8007722:	bf08      	it	eq
 8007724:	ea95 0f0c 	teqeq	r5, ip
 8007728:	f43f af3b 	beq.w	80075a2 <__aeabi_dmul+0x24a>
 800772c:	ea94 0f0c 	teq	r4, ip
 8007730:	d10a      	bne.n	8007748 <__aeabi_ddiv+0x19c>
 8007732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007736:	f47f af34 	bne.w	80075a2 <__aeabi_dmul+0x24a>
 800773a:	ea95 0f0c 	teq	r5, ip
 800773e:	f47f af25 	bne.w	800758c <__aeabi_dmul+0x234>
 8007742:	4610      	mov	r0, r2
 8007744:	4619      	mov	r1, r3
 8007746:	e72c      	b.n	80075a2 <__aeabi_dmul+0x24a>
 8007748:	ea95 0f0c 	teq	r5, ip
 800774c:	d106      	bne.n	800775c <__aeabi_ddiv+0x1b0>
 800774e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007752:	f43f aefd 	beq.w	8007550 <__aeabi_dmul+0x1f8>
 8007756:	4610      	mov	r0, r2
 8007758:	4619      	mov	r1, r3
 800775a:	e722      	b.n	80075a2 <__aeabi_dmul+0x24a>
 800775c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007760:	bf18      	it	ne
 8007762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007766:	f47f aec5 	bne.w	80074f4 <__aeabi_dmul+0x19c>
 800776a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800776e:	f47f af0d 	bne.w	800758c <__aeabi_dmul+0x234>
 8007772:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007776:	f47f aeeb 	bne.w	8007550 <__aeabi_dmul+0x1f8>
 800777a:	e712      	b.n	80075a2 <__aeabi_dmul+0x24a>

0800777c <__aeabi_d2f>:
 800777c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007780:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007784:	bf24      	itt	cs
 8007786:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800778a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800778e:	d90d      	bls.n	80077ac <__aeabi_d2f+0x30>
 8007790:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007794:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007798:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800779c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80077a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80077a4:	bf08      	it	eq
 80077a6:	f020 0001 	biceq.w	r0, r0, #1
 80077aa:	4770      	bx	lr
 80077ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80077b0:	d121      	bne.n	80077f6 <__aeabi_d2f+0x7a>
 80077b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80077b6:	bfbc      	itt	lt
 80077b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80077bc:	4770      	bxlt	lr
 80077be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80077c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80077c6:	f1c2 0218 	rsb	r2, r2, #24
 80077ca:	f1c2 0c20 	rsb	ip, r2, #32
 80077ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80077d2:	fa20 f002 	lsr.w	r0, r0, r2
 80077d6:	bf18      	it	ne
 80077d8:	f040 0001 	orrne.w	r0, r0, #1
 80077dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80077e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80077e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80077e8:	ea40 000c 	orr.w	r0, r0, ip
 80077ec:	fa23 f302 	lsr.w	r3, r3, r2
 80077f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077f4:	e7cc      	b.n	8007790 <__aeabi_d2f+0x14>
 80077f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80077fa:	d107      	bne.n	800780c <__aeabi_d2f+0x90>
 80077fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007800:	bf1e      	ittt	ne
 8007802:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007806:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800780a:	4770      	bxne	lr
 800780c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007810:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007814:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop

0800781c <__aeabi_uldivmod>:
 800781c:	b94b      	cbnz	r3, 8007832 <__aeabi_uldivmod+0x16>
 800781e:	b942      	cbnz	r2, 8007832 <__aeabi_uldivmod+0x16>
 8007820:	2900      	cmp	r1, #0
 8007822:	bf08      	it	eq
 8007824:	2800      	cmpeq	r0, #0
 8007826:	d002      	beq.n	800782e <__aeabi_uldivmod+0x12>
 8007828:	f04f 31ff 	mov.w	r1, #4294967295
 800782c:	4608      	mov	r0, r1
 800782e:	f000 b83b 	b.w	80078a8 <__aeabi_idiv0>
 8007832:	b082      	sub	sp, #8
 8007834:	46ec      	mov	ip, sp
 8007836:	e92d 5000 	stmdb	sp!, {ip, lr}
 800783a:	f000 f81d 	bl	8007878 <__gnu_uldivmod_helper>
 800783e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007842:	b002      	add	sp, #8
 8007844:	bc0c      	pop	{r2, r3}
 8007846:	4770      	bx	lr

08007848 <__gnu_ldivmod_helper>:
 8007848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784c:	9c06      	ldr	r4, [sp, #24]
 800784e:	4615      	mov	r5, r2
 8007850:	4606      	mov	r6, r0
 8007852:	460f      	mov	r7, r1
 8007854:	4698      	mov	r8, r3
 8007856:	f000 f829 	bl	80078ac <__divdi3>
 800785a:	fb05 f301 	mul.w	r3, r5, r1
 800785e:	fb00 3808 	mla	r8, r0, r8, r3
 8007862:	fba5 2300 	umull	r2, r3, r5, r0
 8007866:	1ab2      	subs	r2, r6, r2
 8007868:	4443      	add	r3, r8
 800786a:	eb67 0303 	sbc.w	r3, r7, r3
 800786e:	e9c4 2300 	strd	r2, r3, [r4]
 8007872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007876:	bf00      	nop

08007878 <__gnu_uldivmod_helper>:
 8007878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787c:	9c06      	ldr	r4, [sp, #24]
 800787e:	4690      	mov	r8, r2
 8007880:	4606      	mov	r6, r0
 8007882:	460f      	mov	r7, r1
 8007884:	461d      	mov	r5, r3
 8007886:	f000 f95f 	bl	8007b48 <__udivdi3>
 800788a:	fb00 f505 	mul.w	r5, r0, r5
 800788e:	fba0 2308 	umull	r2, r3, r0, r8
 8007892:	fb08 5501 	mla	r5, r8, r1, r5
 8007896:	1ab2      	subs	r2, r6, r2
 8007898:	442b      	add	r3, r5
 800789a:	eb67 0303 	sbc.w	r3, r7, r3
 800789e:	e9c4 2300 	strd	r2, r3, [r4]
 80078a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a6:	bf00      	nop

080078a8 <__aeabi_idiv0>:
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop

080078ac <__divdi3>:
 80078ac:	2900      	cmp	r1, #0
 80078ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078b2:	f2c0 80a6 	blt.w	8007a02 <__divdi3+0x156>
 80078b6:	2600      	movs	r6, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f2c0 809c 	blt.w	80079f6 <__divdi3+0x14a>
 80078be:	4688      	mov	r8, r1
 80078c0:	4694      	mov	ip, r2
 80078c2:	469e      	mov	lr, r3
 80078c4:	4615      	mov	r5, r2
 80078c6:	4604      	mov	r4, r0
 80078c8:	460f      	mov	r7, r1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d13d      	bne.n	800794a <__divdi3+0x9e>
 80078ce:	428a      	cmp	r2, r1
 80078d0:	d959      	bls.n	8007986 <__divdi3+0xda>
 80078d2:	fab2 f382 	clz	r3, r2
 80078d6:	b13b      	cbz	r3, 80078e8 <__divdi3+0x3c>
 80078d8:	f1c3 0220 	rsb	r2, r3, #32
 80078dc:	409f      	lsls	r7, r3
 80078de:	fa20 f202 	lsr.w	r2, r0, r2
 80078e2:	409d      	lsls	r5, r3
 80078e4:	4317      	orrs	r7, r2
 80078e6:	409c      	lsls	r4, r3
 80078e8:	0c29      	lsrs	r1, r5, #16
 80078ea:	0c22      	lsrs	r2, r4, #16
 80078ec:	fbb7 fef1 	udiv	lr, r7, r1
 80078f0:	b2a8      	uxth	r0, r5
 80078f2:	fb01 771e 	mls	r7, r1, lr, r7
 80078f6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80078fa:	fb00 f30e 	mul.w	r3, r0, lr
 80078fe:	42bb      	cmp	r3, r7
 8007900:	d90a      	bls.n	8007918 <__divdi3+0x6c>
 8007902:	197f      	adds	r7, r7, r5
 8007904:	f10e 32ff 	add.w	r2, lr, #4294967295
 8007908:	f080 8105 	bcs.w	8007b16 <__divdi3+0x26a>
 800790c:	42bb      	cmp	r3, r7
 800790e:	f240 8102 	bls.w	8007b16 <__divdi3+0x26a>
 8007912:	f1ae 0e02 	sub.w	lr, lr, #2
 8007916:	442f      	add	r7, r5
 8007918:	1aff      	subs	r7, r7, r3
 800791a:	b2a4      	uxth	r4, r4
 800791c:	fbb7 f3f1 	udiv	r3, r7, r1
 8007920:	fb01 7713 	mls	r7, r1, r3, r7
 8007924:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007928:	fb00 f003 	mul.w	r0, r0, r3
 800792c:	42b8      	cmp	r0, r7
 800792e:	d908      	bls.n	8007942 <__divdi3+0x96>
 8007930:	197f      	adds	r7, r7, r5
 8007932:	f103 32ff 	add.w	r2, r3, #4294967295
 8007936:	f080 80f0 	bcs.w	8007b1a <__divdi3+0x26e>
 800793a:	42b8      	cmp	r0, r7
 800793c:	f240 80ed 	bls.w	8007b1a <__divdi3+0x26e>
 8007940:	3b02      	subs	r3, #2
 8007942:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8007946:	2200      	movs	r2, #0
 8007948:	e003      	b.n	8007952 <__divdi3+0xa6>
 800794a:	428b      	cmp	r3, r1
 800794c:	d90f      	bls.n	800796e <__divdi3+0xc2>
 800794e:	2200      	movs	r2, #0
 8007950:	4613      	mov	r3, r2
 8007952:	1c34      	adds	r4, r6, #0
 8007954:	bf18      	it	ne
 8007956:	2401      	movne	r4, #1
 8007958:	4260      	negs	r0, r4
 800795a:	f04f 0500 	mov.w	r5, #0
 800795e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8007962:	4058      	eors	r0, r3
 8007964:	4051      	eors	r1, r2
 8007966:	1900      	adds	r0, r0, r4
 8007968:	4169      	adcs	r1, r5
 800796a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800796e:	fab3 f283 	clz	r2, r3
 8007972:	2a00      	cmp	r2, #0
 8007974:	f040 8086 	bne.w	8007a84 <__divdi3+0x1d8>
 8007978:	428b      	cmp	r3, r1
 800797a:	d302      	bcc.n	8007982 <__divdi3+0xd6>
 800797c:	4584      	cmp	ip, r0
 800797e:	f200 80db 	bhi.w	8007b38 <__divdi3+0x28c>
 8007982:	2301      	movs	r3, #1
 8007984:	e7e5      	b.n	8007952 <__divdi3+0xa6>
 8007986:	b912      	cbnz	r2, 800798e <__divdi3+0xe2>
 8007988:	2301      	movs	r3, #1
 800798a:	fbb3 f5f2 	udiv	r5, r3, r2
 800798e:	fab5 f085 	clz	r0, r5
 8007992:	2800      	cmp	r0, #0
 8007994:	d13b      	bne.n	8007a0e <__divdi3+0x162>
 8007996:	1b78      	subs	r0, r7, r5
 8007998:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800799c:	fa1f fc85 	uxth.w	ip, r5
 80079a0:	2201      	movs	r2, #1
 80079a2:	fbb0 f8fe 	udiv	r8, r0, lr
 80079a6:	0c21      	lsrs	r1, r4, #16
 80079a8:	fb0e 0718 	mls	r7, lr, r8, r0
 80079ac:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 80079b0:	fb0c f308 	mul.w	r3, ip, r8
 80079b4:	42bb      	cmp	r3, r7
 80079b6:	d907      	bls.n	80079c8 <__divdi3+0x11c>
 80079b8:	197f      	adds	r7, r7, r5
 80079ba:	f108 31ff 	add.w	r1, r8, #4294967295
 80079be:	d202      	bcs.n	80079c6 <__divdi3+0x11a>
 80079c0:	42bb      	cmp	r3, r7
 80079c2:	f200 80bd 	bhi.w	8007b40 <__divdi3+0x294>
 80079c6:	4688      	mov	r8, r1
 80079c8:	1aff      	subs	r7, r7, r3
 80079ca:	b2a4      	uxth	r4, r4
 80079cc:	fbb7 f3fe 	udiv	r3, r7, lr
 80079d0:	fb0e 7713 	mls	r7, lr, r3, r7
 80079d4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80079d8:	fb0c fc03 	mul.w	ip, ip, r3
 80079dc:	45bc      	cmp	ip, r7
 80079de:	d907      	bls.n	80079f0 <__divdi3+0x144>
 80079e0:	197f      	adds	r7, r7, r5
 80079e2:	f103 31ff 	add.w	r1, r3, #4294967295
 80079e6:	d202      	bcs.n	80079ee <__divdi3+0x142>
 80079e8:	45bc      	cmp	ip, r7
 80079ea:	f200 80a7 	bhi.w	8007b3c <__divdi3+0x290>
 80079ee:	460b      	mov	r3, r1
 80079f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80079f4:	e7ad      	b.n	8007952 <__divdi3+0xa6>
 80079f6:	4252      	negs	r2, r2
 80079f8:	ea6f 0606 	mvn.w	r6, r6
 80079fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007a00:	e75d      	b.n	80078be <__divdi3+0x12>
 8007a02:	4240      	negs	r0, r0
 8007a04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007a08:	f04f 36ff 	mov.w	r6, #4294967295
 8007a0c:	e754      	b.n	80078b8 <__divdi3+0xc>
 8007a0e:	f1c0 0220 	rsb	r2, r0, #32
 8007a12:	fa24 f102 	lsr.w	r1, r4, r2
 8007a16:	fa07 f300 	lsl.w	r3, r7, r0
 8007a1a:	4085      	lsls	r5, r0
 8007a1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007a20:	40d7      	lsrs	r7, r2
 8007a22:	4319      	orrs	r1, r3
 8007a24:	fbb7 f2fe 	udiv	r2, r7, lr
 8007a28:	0c0b      	lsrs	r3, r1, #16
 8007a2a:	fb0e 7712 	mls	r7, lr, r2, r7
 8007a2e:	fa1f fc85 	uxth.w	ip, r5
 8007a32:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a36:	fb0c f702 	mul.w	r7, ip, r2
 8007a3a:	429f      	cmp	r7, r3
 8007a3c:	fa04 f400 	lsl.w	r4, r4, r0
 8007a40:	d907      	bls.n	8007a52 <__divdi3+0x1a6>
 8007a42:	195b      	adds	r3, r3, r5
 8007a44:	f102 30ff 	add.w	r0, r2, #4294967295
 8007a48:	d274      	bcs.n	8007b34 <__divdi3+0x288>
 8007a4a:	429f      	cmp	r7, r3
 8007a4c:	d972      	bls.n	8007b34 <__divdi3+0x288>
 8007a4e:	3a02      	subs	r2, #2
 8007a50:	442b      	add	r3, r5
 8007a52:	1bdf      	subs	r7, r3, r7
 8007a54:	b289      	uxth	r1, r1
 8007a56:	fbb7 f8fe 	udiv	r8, r7, lr
 8007a5a:	fb0e 7318 	mls	r3, lr, r8, r7
 8007a5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a62:	fb0c f708 	mul.w	r7, ip, r8
 8007a66:	429f      	cmp	r7, r3
 8007a68:	d908      	bls.n	8007a7c <__divdi3+0x1d0>
 8007a6a:	195b      	adds	r3, r3, r5
 8007a6c:	f108 31ff 	add.w	r1, r8, #4294967295
 8007a70:	d25c      	bcs.n	8007b2c <__divdi3+0x280>
 8007a72:	429f      	cmp	r7, r3
 8007a74:	d95a      	bls.n	8007b2c <__divdi3+0x280>
 8007a76:	f1a8 0802 	sub.w	r8, r8, #2
 8007a7a:	442b      	add	r3, r5
 8007a7c:	1bd8      	subs	r0, r3, r7
 8007a7e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8007a82:	e78e      	b.n	80079a2 <__divdi3+0xf6>
 8007a84:	f1c2 0320 	rsb	r3, r2, #32
 8007a88:	fa2c f103 	lsr.w	r1, ip, r3
 8007a8c:	fa0e fe02 	lsl.w	lr, lr, r2
 8007a90:	fa20 f703 	lsr.w	r7, r0, r3
 8007a94:	ea41 0e0e 	orr.w	lr, r1, lr
 8007a98:	fa08 f002 	lsl.w	r0, r8, r2
 8007a9c:	fa28 f103 	lsr.w	r1, r8, r3
 8007aa0:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8007aa4:	4338      	orrs	r0, r7
 8007aa6:	fbb1 f8f5 	udiv	r8, r1, r5
 8007aaa:	0c03      	lsrs	r3, r0, #16
 8007aac:	fb05 1118 	mls	r1, r5, r8, r1
 8007ab0:	fa1f f78e 	uxth.w	r7, lr
 8007ab4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8007ab8:	fb07 f308 	mul.w	r3, r7, r8
 8007abc:	428b      	cmp	r3, r1
 8007abe:	fa0c fc02 	lsl.w	ip, ip, r2
 8007ac2:	d909      	bls.n	8007ad8 <__divdi3+0x22c>
 8007ac4:	eb11 010e 	adds.w	r1, r1, lr
 8007ac8:	f108 39ff 	add.w	r9, r8, #4294967295
 8007acc:	d230      	bcs.n	8007b30 <__divdi3+0x284>
 8007ace:	428b      	cmp	r3, r1
 8007ad0:	d92e      	bls.n	8007b30 <__divdi3+0x284>
 8007ad2:	f1a8 0802 	sub.w	r8, r8, #2
 8007ad6:	4471      	add	r1, lr
 8007ad8:	1ac9      	subs	r1, r1, r3
 8007ada:	b280      	uxth	r0, r0
 8007adc:	fbb1 f3f5 	udiv	r3, r1, r5
 8007ae0:	fb05 1113 	mls	r1, r5, r3, r1
 8007ae4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007ae8:	fb07 f703 	mul.w	r7, r7, r3
 8007aec:	428f      	cmp	r7, r1
 8007aee:	d908      	bls.n	8007b02 <__divdi3+0x256>
 8007af0:	eb11 010e 	adds.w	r1, r1, lr
 8007af4:	f103 30ff 	add.w	r0, r3, #4294967295
 8007af8:	d216      	bcs.n	8007b28 <__divdi3+0x27c>
 8007afa:	428f      	cmp	r7, r1
 8007afc:	d914      	bls.n	8007b28 <__divdi3+0x27c>
 8007afe:	3b02      	subs	r3, #2
 8007b00:	4471      	add	r1, lr
 8007b02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007b06:	1bc9      	subs	r1, r1, r7
 8007b08:	fba3 890c 	umull	r8, r9, r3, ip
 8007b0c:	4549      	cmp	r1, r9
 8007b0e:	d309      	bcc.n	8007b24 <__divdi3+0x278>
 8007b10:	d005      	beq.n	8007b1e <__divdi3+0x272>
 8007b12:	2200      	movs	r2, #0
 8007b14:	e71d      	b.n	8007952 <__divdi3+0xa6>
 8007b16:	4696      	mov	lr, r2
 8007b18:	e6fe      	b.n	8007918 <__divdi3+0x6c>
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	e711      	b.n	8007942 <__divdi3+0x96>
 8007b1e:	4094      	lsls	r4, r2
 8007b20:	4544      	cmp	r4, r8
 8007b22:	d2f6      	bcs.n	8007b12 <__divdi3+0x266>
 8007b24:	3b01      	subs	r3, #1
 8007b26:	e7f4      	b.n	8007b12 <__divdi3+0x266>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	e7ea      	b.n	8007b02 <__divdi3+0x256>
 8007b2c:	4688      	mov	r8, r1
 8007b2e:	e7a5      	b.n	8007a7c <__divdi3+0x1d0>
 8007b30:	46c8      	mov	r8, r9
 8007b32:	e7d1      	b.n	8007ad8 <__divdi3+0x22c>
 8007b34:	4602      	mov	r2, r0
 8007b36:	e78c      	b.n	8007a52 <__divdi3+0x1a6>
 8007b38:	4613      	mov	r3, r2
 8007b3a:	e70a      	b.n	8007952 <__divdi3+0xa6>
 8007b3c:	3b02      	subs	r3, #2
 8007b3e:	e757      	b.n	80079f0 <__divdi3+0x144>
 8007b40:	f1a8 0802 	sub.w	r8, r8, #2
 8007b44:	442f      	add	r7, r5
 8007b46:	e73f      	b.n	80079c8 <__divdi3+0x11c>

08007b48 <__udivdi3>:
 8007b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d144      	bne.n	8007bda <__udivdi3+0x92>
 8007b50:	428a      	cmp	r2, r1
 8007b52:	4615      	mov	r5, r2
 8007b54:	4604      	mov	r4, r0
 8007b56:	d94f      	bls.n	8007bf8 <__udivdi3+0xb0>
 8007b58:	fab2 f782 	clz	r7, r2
 8007b5c:	460e      	mov	r6, r1
 8007b5e:	b14f      	cbz	r7, 8007b74 <__udivdi3+0x2c>
 8007b60:	f1c7 0320 	rsb	r3, r7, #32
 8007b64:	40b9      	lsls	r1, r7
 8007b66:	fa20 f603 	lsr.w	r6, r0, r3
 8007b6a:	fa02 f507 	lsl.w	r5, r2, r7
 8007b6e:	430e      	orrs	r6, r1
 8007b70:	fa00 f407 	lsl.w	r4, r0, r7
 8007b74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007b78:	0c23      	lsrs	r3, r4, #16
 8007b7a:	fbb6 f0fe 	udiv	r0, r6, lr
 8007b7e:	b2af      	uxth	r7, r5
 8007b80:	fb0e 6110 	mls	r1, lr, r0, r6
 8007b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007b88:	fb07 f100 	mul.w	r1, r7, r0
 8007b8c:	4299      	cmp	r1, r3
 8007b8e:	d909      	bls.n	8007ba4 <__udivdi3+0x5c>
 8007b90:	195b      	adds	r3, r3, r5
 8007b92:	f100 32ff 	add.w	r2, r0, #4294967295
 8007b96:	f080 80ec 	bcs.w	8007d72 <__udivdi3+0x22a>
 8007b9a:	4299      	cmp	r1, r3
 8007b9c:	f240 80e9 	bls.w	8007d72 <__udivdi3+0x22a>
 8007ba0:	3802      	subs	r0, #2
 8007ba2:	442b      	add	r3, r5
 8007ba4:	1a5a      	subs	r2, r3, r1
 8007ba6:	b2a4      	uxth	r4, r4
 8007ba8:	fbb2 f3fe 	udiv	r3, r2, lr
 8007bac:	fb0e 2213 	mls	r2, lr, r3, r2
 8007bb0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8007bb4:	fb07 f703 	mul.w	r7, r7, r3
 8007bb8:	4297      	cmp	r7, r2
 8007bba:	d908      	bls.n	8007bce <__udivdi3+0x86>
 8007bbc:	1952      	adds	r2, r2, r5
 8007bbe:	f103 31ff 	add.w	r1, r3, #4294967295
 8007bc2:	f080 80d8 	bcs.w	8007d76 <__udivdi3+0x22e>
 8007bc6:	4297      	cmp	r7, r2
 8007bc8:	f240 80d5 	bls.w	8007d76 <__udivdi3+0x22e>
 8007bcc:	3b02      	subs	r3, #2
 8007bce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bda:	428b      	cmp	r3, r1
 8007bdc:	d847      	bhi.n	8007c6e <__udivdi3+0x126>
 8007bde:	fab3 f683 	clz	r6, r3
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	d148      	bne.n	8007c78 <__udivdi3+0x130>
 8007be6:	428b      	cmp	r3, r1
 8007be8:	d302      	bcc.n	8007bf0 <__udivdi3+0xa8>
 8007bea:	4282      	cmp	r2, r0
 8007bec:	f200 80cd 	bhi.w	8007d8a <__udivdi3+0x242>
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf8:	b912      	cbnz	r2, 8007c00 <__udivdi3+0xb8>
 8007bfa:	2501      	movs	r5, #1
 8007bfc:	fbb5 f5f2 	udiv	r5, r5, r2
 8007c00:	fab5 f885 	clz	r8, r5
 8007c04:	f1b8 0f00 	cmp.w	r8, #0
 8007c08:	d177      	bne.n	8007cfa <__udivdi3+0x1b2>
 8007c0a:	1b4a      	subs	r2, r1, r5
 8007c0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007c10:	b2af      	uxth	r7, r5
 8007c12:	2601      	movs	r6, #1
 8007c14:	fbb2 f0fe 	udiv	r0, r2, lr
 8007c18:	0c23      	lsrs	r3, r4, #16
 8007c1a:	fb0e 2110 	mls	r1, lr, r0, r2
 8007c1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8007c22:	fb07 f300 	mul.w	r3, r7, r0
 8007c26:	428b      	cmp	r3, r1
 8007c28:	d907      	bls.n	8007c3a <__udivdi3+0xf2>
 8007c2a:	1949      	adds	r1, r1, r5
 8007c2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8007c30:	d202      	bcs.n	8007c38 <__udivdi3+0xf0>
 8007c32:	428b      	cmp	r3, r1
 8007c34:	f200 80ba 	bhi.w	8007dac <__udivdi3+0x264>
 8007c38:	4610      	mov	r0, r2
 8007c3a:	1ac9      	subs	r1, r1, r3
 8007c3c:	b2a4      	uxth	r4, r4
 8007c3e:	fbb1 f3fe 	udiv	r3, r1, lr
 8007c42:	fb0e 1113 	mls	r1, lr, r3, r1
 8007c46:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8007c4a:	fb07 f703 	mul.w	r7, r7, r3
 8007c4e:	42a7      	cmp	r7, r4
 8007c50:	d908      	bls.n	8007c64 <__udivdi3+0x11c>
 8007c52:	1964      	adds	r4, r4, r5
 8007c54:	f103 32ff 	add.w	r2, r3, #4294967295
 8007c58:	f080 808f 	bcs.w	8007d7a <__udivdi3+0x232>
 8007c5c:	42a7      	cmp	r7, r4
 8007c5e:	f240 808c 	bls.w	8007d7a <__udivdi3+0x232>
 8007c62:	3b02      	subs	r3, #2
 8007c64:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007c68:	4631      	mov	r1, r6
 8007c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c6e:	2600      	movs	r6, #0
 8007c70:	4630      	mov	r0, r6
 8007c72:	4631      	mov	r1, r6
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	f1c6 0420 	rsb	r4, r6, #32
 8007c7c:	fa22 f504 	lsr.w	r5, r2, r4
 8007c80:	40b3      	lsls	r3, r6
 8007c82:	432b      	orrs	r3, r5
 8007c84:	fa20 fc04 	lsr.w	ip, r0, r4
 8007c88:	fa01 f706 	lsl.w	r7, r1, r6
 8007c8c:	fa21 f504 	lsr.w	r5, r1, r4
 8007c90:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c94:	ea4c 0707 	orr.w	r7, ip, r7
 8007c98:	fbb5 f8fe 	udiv	r8, r5, lr
 8007c9c:	0c39      	lsrs	r1, r7, #16
 8007c9e:	fb0e 5518 	mls	r5, lr, r8, r5
 8007ca2:	fa1f fc83 	uxth.w	ip, r3
 8007ca6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8007caa:	fb0c f108 	mul.w	r1, ip, r8
 8007cae:	42a9      	cmp	r1, r5
 8007cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8007cb4:	d904      	bls.n	8007cc0 <__udivdi3+0x178>
 8007cb6:	18ed      	adds	r5, r5, r3
 8007cb8:	f108 34ff 	add.w	r4, r8, #4294967295
 8007cbc:	d367      	bcc.n	8007d8e <__udivdi3+0x246>
 8007cbe:	46a0      	mov	r8, r4
 8007cc0:	1a6d      	subs	r5, r5, r1
 8007cc2:	b2bf      	uxth	r7, r7
 8007cc4:	fbb5 f4fe 	udiv	r4, r5, lr
 8007cc8:	fb0e 5514 	mls	r5, lr, r4, r5
 8007ccc:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8007cd0:	fb0c fc04 	mul.w	ip, ip, r4
 8007cd4:	458c      	cmp	ip, r1
 8007cd6:	d904      	bls.n	8007ce2 <__udivdi3+0x19a>
 8007cd8:	18c9      	adds	r1, r1, r3
 8007cda:	f104 35ff 	add.w	r5, r4, #4294967295
 8007cde:	d35c      	bcc.n	8007d9a <__udivdi3+0x252>
 8007ce0:	462c      	mov	r4, r5
 8007ce2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007ce6:	ebcc 0101 	rsb	r1, ip, r1
 8007cea:	fba4 2302 	umull	r2, r3, r4, r2
 8007cee:	4299      	cmp	r1, r3
 8007cf0:	d348      	bcc.n	8007d84 <__udivdi3+0x23c>
 8007cf2:	d044      	beq.n	8007d7e <__udivdi3+0x236>
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	2600      	movs	r6, #0
 8007cf8:	e76c      	b.n	8007bd4 <__udivdi3+0x8c>
 8007cfa:	f1c8 0420 	rsb	r4, r8, #32
 8007cfe:	fa01 f308 	lsl.w	r3, r1, r8
 8007d02:	fa05 f508 	lsl.w	r5, r5, r8
 8007d06:	fa20 f704 	lsr.w	r7, r0, r4
 8007d0a:	40e1      	lsrs	r1, r4
 8007d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007d10:	431f      	orrs	r7, r3
 8007d12:	fbb1 f6fe 	udiv	r6, r1, lr
 8007d16:	0c3a      	lsrs	r2, r7, #16
 8007d18:	fb0e 1116 	mls	r1, lr, r6, r1
 8007d1c:	fa1f fc85 	uxth.w	ip, r5
 8007d20:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8007d24:	fb0c f206 	mul.w	r2, ip, r6
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	fa00 f408 	lsl.w	r4, r0, r8
 8007d2e:	d907      	bls.n	8007d40 <__udivdi3+0x1f8>
 8007d30:	195b      	adds	r3, r3, r5
 8007d32:	f106 31ff 	add.w	r1, r6, #4294967295
 8007d36:	d237      	bcs.n	8007da8 <__udivdi3+0x260>
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d935      	bls.n	8007da8 <__udivdi3+0x260>
 8007d3c:	3e02      	subs	r6, #2
 8007d3e:	442b      	add	r3, r5
 8007d40:	1a9b      	subs	r3, r3, r2
 8007d42:	b2bf      	uxth	r7, r7
 8007d44:	fbb3 f0fe 	udiv	r0, r3, lr
 8007d48:	fb0e 3310 	mls	r3, lr, r0, r3
 8007d4c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8007d50:	fb0c f100 	mul.w	r1, ip, r0
 8007d54:	4299      	cmp	r1, r3
 8007d56:	d907      	bls.n	8007d68 <__udivdi3+0x220>
 8007d58:	195b      	adds	r3, r3, r5
 8007d5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8007d5e:	d221      	bcs.n	8007da4 <__udivdi3+0x25c>
 8007d60:	4299      	cmp	r1, r3
 8007d62:	d91f      	bls.n	8007da4 <__udivdi3+0x25c>
 8007d64:	3802      	subs	r0, #2
 8007d66:	442b      	add	r3, r5
 8007d68:	1a5a      	subs	r2, r3, r1
 8007d6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8007d6e:	4667      	mov	r7, ip
 8007d70:	e750      	b.n	8007c14 <__udivdi3+0xcc>
 8007d72:	4610      	mov	r0, r2
 8007d74:	e716      	b.n	8007ba4 <__udivdi3+0x5c>
 8007d76:	460b      	mov	r3, r1
 8007d78:	e729      	b.n	8007bce <__udivdi3+0x86>
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	e772      	b.n	8007c64 <__udivdi3+0x11c>
 8007d7e:	40b0      	lsls	r0, r6
 8007d80:	4290      	cmp	r0, r2
 8007d82:	d2b7      	bcs.n	8007cf4 <__udivdi3+0x1ac>
 8007d84:	1e60      	subs	r0, r4, #1
 8007d86:	2600      	movs	r6, #0
 8007d88:	e724      	b.n	8007bd4 <__udivdi3+0x8c>
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	e722      	b.n	8007bd4 <__udivdi3+0x8c>
 8007d8e:	42a9      	cmp	r1, r5
 8007d90:	d995      	bls.n	8007cbe <__udivdi3+0x176>
 8007d92:	f1a8 0802 	sub.w	r8, r8, #2
 8007d96:	441d      	add	r5, r3
 8007d98:	e792      	b.n	8007cc0 <__udivdi3+0x178>
 8007d9a:	458c      	cmp	ip, r1
 8007d9c:	d9a0      	bls.n	8007ce0 <__udivdi3+0x198>
 8007d9e:	3c02      	subs	r4, #2
 8007da0:	4419      	add	r1, r3
 8007da2:	e79e      	b.n	8007ce2 <__udivdi3+0x19a>
 8007da4:	4610      	mov	r0, r2
 8007da6:	e7df      	b.n	8007d68 <__udivdi3+0x220>
 8007da8:	460e      	mov	r6, r1
 8007daa:	e7c9      	b.n	8007d40 <__udivdi3+0x1f8>
 8007dac:	3802      	subs	r0, #2
 8007dae:	4429      	add	r1, r5
 8007db0:	e743      	b.n	8007c3a <__udivdi3+0xf2>
 8007db2:	bf00      	nop

08007db4 <__errno>:
 8007db4:	4b01      	ldr	r3, [pc, #4]	; (8007dbc <__errno+0x8>)
 8007db6:	6818      	ldr	r0, [r3, #0]
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	20000330 	.word	0x20000330

08007dc0 <__libc_init_array>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <__libc_init_array+0x3c>)
 8007dc4:	4c0e      	ldr	r4, [pc, #56]	; (8007e00 <__libc_init_array+0x40>)
 8007dc6:	1ae4      	subs	r4, r4, r3
 8007dc8:	10a4      	asrs	r4, r4, #2
 8007dca:	2500      	movs	r5, #0
 8007dcc:	461e      	mov	r6, r3
 8007dce:	42a5      	cmp	r5, r4
 8007dd0:	d004      	beq.n	8007ddc <__libc_init_array+0x1c>
 8007dd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dd6:	4798      	blx	r3
 8007dd8:	3501      	adds	r5, #1
 8007dda:	e7f8      	b.n	8007dce <__libc_init_array+0xe>
 8007ddc:	f7fa fad0 	bl	8002380 <_init>
 8007de0:	4c08      	ldr	r4, [pc, #32]	; (8007e04 <__libc_init_array+0x44>)
 8007de2:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <__libc_init_array+0x48>)
 8007de4:	1ae4      	subs	r4, r4, r3
 8007de6:	10a4      	asrs	r4, r4, #2
 8007de8:	2500      	movs	r5, #0
 8007dea:	461e      	mov	r6, r3
 8007dec:	42a5      	cmp	r5, r4
 8007dee:	d004      	beq.n	8007dfa <__libc_init_array+0x3a>
 8007df0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007df4:	4798      	blx	r3
 8007df6:	3501      	adds	r5, #1
 8007df8:	e7f8      	b.n	8007dec <__libc_init_array+0x2c>
 8007dfa:	bd70      	pop	{r4, r5, r6, pc}
 8007dfc:	20000334 	.word	0x20000334
 8007e00:	20000334 	.word	0x20000334
 8007e04:	20000334 	.word	0x20000334
 8007e08:	20000334 	.word	0x20000334

08007e0c <memcpy>:
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	1e43      	subs	r3, r0, #1
 8007e10:	440a      	add	r2, r1
 8007e12:	4291      	cmp	r1, r2
 8007e14:	d004      	beq.n	8007e20 <memcpy+0x14>
 8007e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e1e:	e7f8      	b.n	8007e12 <memcpy+0x6>
 8007e20:	bd10      	pop	{r4, pc}

08007e22 <memset>:
 8007e22:	4402      	add	r2, r0
 8007e24:	4603      	mov	r3, r0
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d002      	beq.n	8007e30 <memset+0xe>
 8007e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e2e:	e7fa      	b.n	8007e26 <memset+0x4>
 8007e30:	4770      	bx	lr
 8007e32:	0000      	movs	r0, r0
 8007e34:	0000      	movs	r0, r0
	...

08007e38 <__PWM_SVM_SVMUpdate_veneer>:
 8007e38:	b401      	push	{r0}
 8007e3a:	4802      	ldr	r0, [pc, #8]	; (8007e44 <__PWM_SVM_SVMUpdate_veneer+0xc>)
 8007e3c:	4684      	mov	ip, r0
 8007e3e:	bc01      	pop	{r0}
 8007e40:	4760      	bx	ip
 8007e42:	bf00      	nop
 8007e44:	10000c01 	.word	0x10000c01

08007e48 <g_xmc_vadc_group_array>:
 8007e48:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08007e58 <UART_0_channel_config>:
 8007e58:	000f4240 04010808 00000000              @B..........

08007e64 <UART_0_tx_pin_config>:
 8007e64:	000000d0 00000001 00000004              ............

08007e70 <UART_0_tx_pin>:
 8007e70:	48028200 0000000e 08007e64              ...H....d~..

08007e7c <UART_0_config>:
 8007e7c:	08007e58 08002b39 08006cb5 08006cc1     X~..9+...l...l..
	...
 8007ea0:	08007e70 00000001 00000100              p~..........

08007eac <SPI_enkoder_MOSI>:
 8007eac:	48028100 00000005                       ...H....

08007eb4 <SPI_enkoder_MISO>:
 8007eb4:	48028100 00000004                       ...H....

08007ebc <SPI_enkoder_SCLKOUT>:
 8007ebc:	48028100 0000000a                       ...H....

08007ec4 <SPI_enkoder_SCLKOUT_Config>:
 8007ec4:	00000090 00000001 00000001 00000000     ................
 8007ed4:	00000000                                ....

08007ed8 <SPI_enkoder_SS_0>:
 8007ed8:	48028100 00000008                       ...H....

08007ee0 <SPI_enkoder_SS_0_Config>:
 8007ee0:	00000090 00000001 00000001 00000000     ................
 8007ef0:	00020000                                ....

08007ef4 <SPI_enkoder_SS_1>:
 8007ef4:	48028100 0000000b                       ...H....

08007efc <SPI_enkoder_Config>:
 8007efc:	2000005c 0800419d 08007eac 20000034     \.. .A...~..4.. 
 8007f0c:	08007eb4 20000368 00000000 00000000     .~..h.. ........
	...
 8007f24:	08007ebc 08007ec4 08007ed8 08007ef4     .~...~...~...~..
	...
 8007f4c:	08007ee0 20000048 00000000 00000000     .~..H.. ........
	...
 8007f78:	00000303 00000000 02000202 00000002     ................

08007f88 <SVPWM_PhUHighPin>:
 8007f88:	48028000 00000003                       ...H....

08007f90 <SVPWM_PhULowPin>:
 8007f90:	48028000 00000000                       ...H....

08007f98 <SVPWM_PhVHighPin>:
 8007f98:	48028000 00000004                       ...H....

08007fa0 <SVPWM_PhVLowPin>:
 8007fa0:	48028000 00000001                       ...H....

08007fa8 <SVPWM_PhWHighPin>:
 8007fa8:	48028000 00000005                       ...H....

08007fb0 <SVPWM_PhWLowPin>:
 8007fb0:	48028000 00000002                       ...H....

08007fb8 <SVPWM_PhUHiOutPinConf>:
 8007fb8:	00000098 00010000 00000000              ............

08007fc4 <SVPWM_PhULoOutPinConf>:
 8007fc4:	00000098 00010000 00000000              ............

08007fd0 <SVPWM_PhVHiOutPinConf>:
 8007fd0:	00000098 00010000 00000000              ............

08007fdc <SVPWM_PhVLoOutPinConf>:
 8007fdc:	00000098 00010000 00000000              ............

08007fe8 <SVPWM_PhWHiOutPinConf>:
 8007fe8:	00000098 00010000 00000000              ............

08007ff4 <SVPWM_PhWLoOutPinConf>:
 8007ff4:	00000098 00010000 00000000              ............

08008000 <SVPWM_InverterPin>:
 8008000:	48028100 00000001                       ...H....

08008008 <SVPWM_InvPinConf>:
 8008008:	00000080 00010000 00000000              ............

08008014 <SVPWM_TrapPin>:
 8008014:	48028000 00000007                       ...H....

0800801c <SVPWM_TrapPinConf>:
 800801c:	00000000 00010000 00000000              ............

08008028 <SVPWM_TrapConfig>:
 8008028:	00010000                                ....

0800802c <SVPWM_PhU>:
 800802c:	40020300 00000002                       ...@....

08008034 <SVPWM_PhV>:
 8008034:	40020200 00000001                       ...@....

0800803c <SVPWM_PhW>:
 800803c:	40020100 00000000                       ...@....

08008044 <SVPWM_CurrentTrig>:
 8008044:	40020400 00000003                       ...@....

0800804c <SVPWM_StartConfig>:
 800804c:	00000107                                ....

08008050 <SVPWM_TimerInitHandle>:
 8008050:	00000001 00000000 00000014 00000000     ................

08008060 <SVPWM_TimerInit_CurrentTrig>:
 8008060:	20000001 0000000f 00000000 00000000     ... ............

08008070 <SVPWM_AppConfig>:
 8008070:	4002023c 4002013c 01000000 01000000     <..@<..@........
 8008080:	01020002 00010101 00004e20 07270e00     ........ N....'.
 8008090:	00000100 00001111 00000000 00000000     ................
 80080a0:	00000000 00000002 03938700 00000727     ............'...
 80080b0:	00bb0000 01000001 00000000              ............

080080bc <Sinus60_tab>:
 80080bc:	00210000 00640043 00a70086 00ea00c9     ..!.C.d.........
 80080cc:	012d010c 0170014f 01b30192 01f601d5     ..-.O.p.........
 80080dc:	02390218 027c025b 02bf029e 030202e1     ..9.[.|.........
 80080ec:	03450324 03880367 03cb03aa 040e03ed     $.E.g...........
 80080fc:	04510430 04940473 04d704b6 051a04f9     0.Q.s...........
 800810c:	055d053b 05a0057e 05e305c1 06260604     ;.].~.........&.
 800811c:	06690647 06ac068a 06ef06cd 07320710     G.i...........2.
 800812c:	07740753 07b70796 07fa07d9 083d081c     S.t...........=.
 800813c:	0880085f 08c308a1 090608e4 09490927     _...........'.I.
 800814c:	098b096a 09ce09ad 0a1109f0 0a540a32     j...........2.T.
 800815c:	0a970a75 0ad90ab8 0b1c0afb 0b5f0b3e     u...........>._.
 800816c:	0ba20b80 0be40bc3 0c270c06 0c6a0c49     ..........'.I.j.
 800817c:	0cad0c8b 0cef0cce 0d320d11 0d750d53     ..........2.S.u.
 800818c:	0db70d96 0dfa0dd9 0e3c0e1b 0e7f0e5e     ..........<.^...
 800819c:	0ec20ea0 0f040ee3 0f470f25 0f890f68     ........%.G.h...
 80081ac:	0fcc0fab 100e0fed 10511030 10931072     ........0.Q.r...
 80081bc:	10d610b4 111810f7 115b1139 119d117c     ........9.[.|...
 80081cc:	11df11be 12221200 12641243 12a61285     ......".C.d.....
 80081dc:	12e912c7 132b130a 136d134c 13af138e     ......+.L.m.....
 80081ec:	13f213d0 14341413 14761455 14b81497     ......4.U.v.....
 80081fc:	14fa14d9 153c151b 157e155d 15c0159f     ......<.].~.....
 800820c:	160215e1 16441623 16861665 16c816a7     ....#.D.e.......
 800821c:	170a16e9 174c172b 178e176d 17d017af     ....+.L.m.......
 800822c:	181217f1 18541833 18951875 18d718b6     ....3.T.u.......
 800823c:	191918f8 195b193a 199c197b 19de19bd     ....:.[.{.......
 800824c:	1a2019ff 1a611a40 1aa31a82 1ae41ac3     .. .@.a.........
 800825c:	1b261b05 1b671b46 1ba91b88 1bea1bc9     ..&.F.g.........
 800826c:	1c2b1c0b 1c6d1c4c 1cae1c8e 1cef1ccf     ..+.L.m.........
 800827c:	1d311d10 1d721d51 1db31d93 1df41dd4     ..1.Q.r.........
 800828c:	1e351e15 1e771e56 1eb81e97 1ef91ed8     ..5.V.w.........
 800829c:	1f3a1f19 1f7b1f5a 1fbc1f9b 1ffd1fdc     ..:.Z.{.........
 80082ac:	203d201d 207e205e 20bf209f 210020df     . = ^ ~ . . . .!
 80082bc:	21412120 21812161 21c221a2 220321e2      !A!a!.!.!.!.!."
 80082cc:	22432223 22842263 22c422a4 230522e4     #"C"c".".".".".#
 80082dc:	23452325 23862365 23c623a6 240623e6     %#E#e#.#.#.#.#.$
 80082ec:	24472426 24872467 24c724a7 250724e7     &$G$g$.$.$.$.$.%
 80082fc:	25472527 25872567 25c725a7 260725e7     '%G%g%.%.%.%.%.&
 800830c:	26472627 26872667 26c726a7 270726e7     '&G&g&.&.&.&.&.'
 800831c:	27472727 27872767 27c627a7 280627e6     ''G'g'.'.'.'.'.(
 800832c:	28462826 28852866 28c528a5 290428e5     &(F(f(.(.(.(.(.)
 800833c:	29442924 29832964 29c329a3 2a0229e2     $)D)d).).).).).*
 800834c:	2a412a22 2a802a61 2ac02aa0 2aff2adf     "*A*a*.*.*.*.*.*
 800835c:	2b3e2b1e 2b7d2b5d 2bbc2b9c 2bfb2bdb     .+>+]+}+.+.+.+.+
 800836c:	2c3a2c1a 2c792c59 2cb82c98 2cf62cd7     .,:,Y,y,.,.,.,.,
 800837c:	2d352d16 2d742d54 2db22d93 2df12dd2     .-5-T-t-.-.-.-.-
 800838c:	2e2f2e10 2e6e2e4f 2eac2e8d 2eeb2ecc     ../.O.n.........
 800839c:	2f292f0a 2f672f48 2fa62f86 2fe42fc5     ./)/H/g/././././
 80083ac:	30223003 30603041 309e307f 30dc30bd     .0"0A0`0.0.0.0.0
 80083bc:	311a30fb 31583139 31963177 31d331b4     .0.191X1w1.1.1.1
 80083cc:	321131f2 324f3230 328c326d 32ca32ab     .1.202O2m2.2.2.2
 80083dc:	330732e9 33453326 33823363 33bf33a1     .2.3&3E3c3.3.3.3
 80083ec:	33fd33de 343a341b 34773458 34b43496     .3.3.4:4X4w4.4.4
 80083fc:	34f134d3 352e3510 356b354d 35a8358a     .4.4.5.5M5k5.5.5
 800840c:	35e535c6 36223603 365e3640 369b367d     .5.5.6"6@6^6}6.6
 800841c:	36d736b9 371436f6 37503732 378d376f     .6.6.6.727P7o7.7
 800842c:	37c937ab 380637e7 38423824 387e3860     .7.7.7.8$8B8`8~8
 800843c:	38ba389c 38f638d8 39323914 396e3950     .8.8.8.8.929P9n9
 800844c:	39aa398c 39e639c8 3a213a04 3a5d3a3f     .9.9.9.9.:!:?:]:
 800845c:	3a993a7b 3ad43ab6 3b103af2 3b4b3b2d     {:.:.:.:.:.;-;K;
 800846c:	3b863b69 3bc23ba4 3bfd3bdf 3c383c1b     i;.;.;.;.;.;.<8<
 800847c:	3c733c56 3cae3c91 3ce93ccc 3d243d07     V<s<.<.<.<.<.=$=
 800848c:	3d5f3d42 3d9a3d7c 3dd53db7 3e0f3df2     B=_=|=.=.=.=.=.>
 800849c:	3e4a3e2c 3e843e67 3ebf3ea2 3ef93edc     ,>J>g>.>.>.>.>.>
 80084ac:	3f333f16 3f6e3f51 3fa83f8b 3fe23fc5     .?3?Q?n?.?.?.?.?
 80084bc:	401c3fff 40564039 40904073 40ca40ad     .?.@9@V@s@.@.@.@
 80084cc:	410340e7 413d4120 4177415a 41b04194     .@.A A=AZAwA.A.A
 80084dc:	41ea41cd 42234207 425d4240 42964279     .A.A.B#B@B]ByB.B
 80084ec:	42cf42b2 430842ec 43414325 437a435e     .B.B.B.C%CAC^CzC
 80084fc:	43b34397 43ec43d0 44254408 445d4441     .C.C.C.C.D%DAD]D
 800850c:	4496447a 44cf44b2 450744eb 453f4523     zD.D.D.D.D.E#E?E
 800851c:	4578455c 45b04594 45e845cc 46204604     \ExE.E.E.E.E.F F
 800852c:	4658463c 46904674 46c846ac 470046e4     <FXFtF.F.F.F.F.G
 800853c:	4738471c 476f4754 47a7478b 47de47c3     .G8GTGoG.G.G.G.G
 800854c:	481647fa 484d4832 48844869 48bc48a0     .G.H2HMHiH.H.H.H
 800855c:	48f348d7 492a490e 49614945 4998497c     .H.H.I*IEIaI|I.I
 800856c:	49ce49b3 4a0549ea 4a3c4a20 4a724a57     .I.I.I.J J<JWJrJ
 800857c:	4aa94a8e 4adf4ac4 4b154afa 4b4c4b31     .J.J.J.J.J.K1KLK
 800858c:	4b824b67 4bb84b9d 4bee4bd3 4c244c09     gK.K.K.K.K.K.L$L
 800859c:	4c5a4c3f 4c8f4c75 4cc54caa 4cfb4ce0     ?LZLuL.L.L.L.L.L
 80085ac:	4d304d15 4d664d4b 4d9b4d80 4dd04db6     .M0MKMfM.M.M.M.M
 80085bc:	4e054deb 4e3a4e20 4e6f4e55 4ea44e8a     .M.N N:NUNoN.N.N
 80085cc:	4ed94ebf 4f0e4ef4 4f434f28 4f774f5d     .N.N.N.O(OCO]OwO
 80085dc:	4fac4f91 4fe04fc6 50144ffa 5049502f     .O.O.O.O.O.P/PIP
 80085ec:	507d5063 50b15097 50e550cb 511950ff     cP}P.P.P.P.P.P.Q
 80085fc:	514d5133 51805166 51b4519a 51e751ce     3QMQfQ.Q.Q.Q.Q.Q
 800860c:	521b5201 524e5235 52825268 52b5529b     .R.R5RNRhR.R.R.R
 800861c:	52e852ce 531b5301 534e5334 53815367     .R.R.S.S4SNSgS.S
 800862c:	53b3539a 53e653cd 541953ff 544b5432     .S.S.S.S.S.T2TKT
 800863c:	547d5464 54b05497 54e254c9 551454fb     dT}T.T.T.T.T.T.U
 800864c:	5546552d 5578555f 55aa5591 55dc55c3     -UFU_UxU.U.U.U.U
 800865c:	560d55f4 563f5626 56705658 56a25689     .U.V&V?VXVpV.V.V
 800866c:	56d356ba 570456ec 5735571d 5766574e     .V.V.V.W.W5WNWfW
 800867c:	5797577f 57c857b0 57f957e0 58295811     .W.W.W.W.W.W.X)X
 800868c:	585a5842 588a5872 58bb58a3 58eb58d3     BXZXrX.X.X.X.X.X
 800869c:	591b5903 594b5933 597b5963 59ab5993     .Y.Y3YKYcY{Y.Y.Y
 80086ac:	59db59c3 5a0a59f3 5a3a5a22 5a6a5a52     .Y.Y.Y.Z"Z:ZRZjZ
 80086bc:	5a995a81 5ac85ab1 5af75ae0 5b275b0f     .Z.Z.Z.Z.Z.Z.['[
 80086cc:	5b565b3e 5b845b6d 5bb35b9c 5be25bcb     >[V[m[.[.[.[.[.[
 80086dc:	5c115bf9 5c3f5c28 5c6d5c56 5c9c5c85     .[.\(\?\V\m\.\.\
 80086ec:	5cca5cb3 5cf85ce1 5d265d0f 5d545d3d     .\.\.\.\.]&]=]T]
 80086fc:	5d825d6b 5db05d99 5ddd5dc6 5e0b5df4     k].].].].].].].^
 800870c:	5e385e21 5e655e4f 5e935e7c 5ec05ea9     !^8^O^e^|^.^.^.^
 800871c:	5eed5ed6 5f1a5f03 5f465f30 5f735f5d     .^.^._._0_F_]_s_
 800872c:	5fa05f89 5fcc5fb6 5ff95fe2 6025600f     ._._._._._._.`%`
 800873c:	6051603b 607d6067 60a96093 60d560bf     ;`Q`g`}`.`.`.`.`
 800874c:	610160eb 612c6117 61586142 6184616e     .`.a.a,aBaXana.a
 800875c:	61af6199 61da61c5 620561f0 6230621b     .a.a.a.a.a.b.b0b
 800876c:	625b6246 62866271 62b1629b 62db62c6     Fb[bqb.b.b.b.b.b
 800877c:	630662f1 6330631b 635b6346 63856370     .b.c.c0cFc[cpc.c
 800878c:	63af639a 63d963c4 640363ee 642d6418     .c.c.c.c.c.d.d-d
 800879c:	64566441 6480646b 64a96495 64d364be     AdVdkd.d.d.d.d.d
 80087ac:	64fc64e7 65256510 654e6539 65776562     .d.d.e%e9eNebewe
 80087bc:	65a0658b 65c865b4 65f165dd 66196605     .e.e.e.e.e.e.f.f
 80087cc:	6642662e 666a6656 6692667e 66ba66a6     .fBfVfjf~f.f.f.f
 80087dc:	66e266ce 670a66f6 6732671e 67596745     .f.f.f.g.g2gEgYg
 80087ec:	6781676d 67a86794 67cf67bc 67f667e3     mg.g.g.g.g.g.g.g
 80087fc:	681e680a 68446831 686b6858 6892687f     .h.h1hDhXhkh.h.h
 800880c:	68b968a5 68df68cc 690568f2 692c6919     .h.h.h.h.h.i.i,i
 800881c:	6952693f 69786965 699e698b 69c469b1     ?iRieixi.i.i.i.i
 800882c:	69e969d6 6a0f69fc 6a346a22 6a5a6a47     .i.i.i.j"j4jGjZj
 800883c:	6a7f6a6c 6aa46a91 6ac96ab6 6aee6adb     lj.j.j.j.j.j.j.j
 800884c:	6b136b00 6b376b25 6b5c6b4a 6b806b6e     .k.k%k7kJk\knk.k
 800885c:	6ba56b92 6bc96bb7 6bed6bdb 6c116bff     .k.k.k.k.k.k.k.l
 800886c:	6c356c23 6c586c47 6c7c6c6a 6ca06c8e     #l5lGlXljl|l.l.l
 800887c:	6cc36cb1 6ce66cd5 6d096cf8 6d2c6d1b     .l.l.l.l.l.m.m,m
 800888c:	6d4f6d3e 6d726d61 6d956d84 6db76da6     >mOmamrm.m.m.m.m
 800889c:	6dda6dc9 6dfc6deb 6e1e6e0d 6e416e30     .m.m.m.m.n.n0nAn
 80088ac:	6e636e52 6e846e73 6ea66e95 6ec86eb7     Rncnsn.n.n.n.n.n
 80088bc:	00006ed9                                .n..

080088c0 <MOTOR_LIB_E>:
 80088c0:	20000000 12e4051d 09fb385b 051111d4     ... ....[8......
 80088d0:	028b0d43 0145d7e1 00a2f61e 00517c55     C.....E.....U|Q.
 80088e0:	0028be53 00145f2e 000a2f98 000517cc     S.(.._.../......
 80088f0:	00028be6 000145f3 0000a2f9 0000517c     .....E......|Q..
 8008900:	000028be 0000145f 00000a2f 00000517     .(.._.../.......
 8008910:	0000028b 00000145 000000a2              ....E.......

0800891c <INTERRUPT_0>:
 800891c:	0100033e                                >...

08008920 <TIM_IRQ>:
 8008920:	01000139                                9...

08008924 <group_init_handle0>:
	...

08008938 <group_init_handle1>:
	...

0800894c <group_init_handle2>:
	...

08008960 <group_init_handle3>:
	...

08008974 <global_config>:
 8008974:	00000000 00000003 00000000 00000000     ................
	...

0800898c <LED>:
 800898c:	48028100 00000080 00010000 00000004     ...H............
 800899c:	00000000                                ....

080089a0 <DC_CAL>:
 80089a0:	48028000 00000080 00010000 00000000     ...H............
 80089b0:	00000006                                ....

080089b4 <SIGNAL>:
 80089b4:	48028200 00000080 00010000 00000000     ...H............
 80089c4:	0000000f 01040250 00010000 00000000     ....P...........
 80089d4:	00010000 01010101                       ........

080089dc <ADC_QUEUE_0_reqsrc_config_0>:
 80089dc:	00000013 00000002 00000000 00000001     ................

080089ec <ADC_QUEUE_0_init_config_0>:
 80089ec:	0000000c 00004800 00000004              .....H......

080089f8 <ADC_QUEUE_1_reqsrc_config_1>:
 80089f8:	00000019 00000002 00000000 00000001     ................

08008a08 <ADC_QUEUE_1_init_config_1>:
 8008a08:	0000000c 00004800 00000004              .....H......

08008a14 <ADC_QUEUE_2_reqsrc_config_2>:
 8008a14:	0000001a 00000002 00000000 00000001     ................

08008a24 <ADC_QUEUE_2_init_config_2>:
 8008a24:	0000000c 00004800 00000004              .....H......

08008a30 <group_ptrs>:
 8008a30:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08008a40 <ADC_U_Channel_A_ch_config>:
 8008a40:	002f0400 00000000 0000ff01              ../.........

08008a4c <ADC_U_Channel_A_res_config>:
 8008a4c:	80000000                                ....

08008a50 <ADC_U_Channel_A_handle>:
 8008a50:	08008a40 08008a4c 00000000              @...L.......

08008a5c <ADC_U_Channel_A_queue_entry_0>:
 8008a5c:	00000000 01010000 00000000              ............

08008a68 <ADC_U>:
 8008a68:	20000294 20000290 08005f15 20000230     ... ... ._..0.. 
 8008a78:	20000298 01010002 00000001              ... ........

08008a84 <ADC_V_Channel_A_ch_config>:
 8008a84:	00230000 00000000 0000ff01              ..#.........

08008a90 <ADC_V_Channel_A_res_config>:
 8008a90:	80000000                                ....

08008a94 <ADC_V_Channel_A_handle>:
 8008a94:	08008a84 08008a90 00000201              ............

08008aa0 <ADC_V_Channel_A_queue_entry_0>:
 8008aa0:	00000000 01010200 00000000              ............

08008aac <ADC_V>:
 8008aac:	200002a0 2000029c 08005f29 20000250     ... ... )_..P.. 
 8008abc:	200002a4 01010102 00000001              ... ........

08008ac8 <ADC_W_Channel_A_ch_config>:
 8008ac8:	00200400 00000000 0000ff01              .. .........

08008ad4 <ADC_W_Channel_A_res_config>:
 8008ad4:	80000000                                ....

08008ad8 <ADC_W_Channel_A_handle>:
 8008ad8:	08008ac8 08008ad4 00000002              ............

08008ae4 <ADC_W_Channel_A_queue_entry_0>:
 8008ae4:	00000000 01010000 00000000              ............

08008af0 <ADC_W>:
 8008af0:	200002ac 200002a8 08005f3d 20000270     ... ... =_..p.. 
 8008b00:	200002b0 01010202 00000001 74727173     ... ........sqrt
 8008b10:	00000066 00000043                       f...C...

Disassembly of section .ram_code:

10000800 <PWM_SVM_lSymCompValUpdate>:
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        (uint16_t)(HandlePtr->v_tb + (uint16_t)((uint16_t) HandlePtr->tb >> (uint16_t) 1) + (uint16_t) HandlePtr->ta));

}
static void PWM_SVM_lSymCompValUpdate(PWM_SVM_t* const HandlePtr)
{
10000800:	b480      	push	{r7}
10000802:	b083      	sub	sp, #12
10000804:	af00      	add	r7, sp, #0
10000806:	6078      	str	r0, [r7, #4]
  /*Update the compare register with appropriate value  based on sector*/
  switch ((HandlePtr->sector & 7U))
10000808:	687b      	ldr	r3, [r7, #4]
1000080a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
1000080e:	f003 0307 	and.w	r3, r3, #7
10000812:	2b04      	cmp	r3, #4
10000814:	f200 8086 	bhi.w	10000924 <__initial_sp+0x124>
10000818:	a201      	add	r2, pc, #4	; (adr r2, 10000820 <__initial_sp+0x20>)
1000081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000081e:	bf00      	nop
10000820:	10000835 	.word	0x10000835
10000824:	10000865 	.word	0x10000865
10000828:	10000895 	.word	0x10000895
1000082c:	100008c5 	.word	0x100008c5
10000830:	100008f5 	.word	0x100008f5
    {
    case 0:/*sector 0*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
10000834:	687b      	ldr	r3, [r7, #4]
10000836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000838:	687a      	ldr	r2, [r7, #4]
1000083a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000083e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
10000840:	687b      	ldr	r3, [r7, #4]
10000842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10000844:	687a      	ldr	r2, [r7, #4]
10000846:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000084a:	4611      	mov	r1, r2
1000084c:	687a      	ldr	r2, [r7, #4]
1000084e:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
10000852:	440a      	add	r2, r1
10000854:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
10000856:	687b      	ldr	r3, [r7, #4]
10000858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000085a:	687a      	ldr	r2, [r7, #4]
1000085c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000860:	601a      	str	r2, [r3, #0]
       break;
10000862:	e077      	b.n	10000954 <__initial_sp+0x154>
    case 1:/*sector 1*/
      *HandlePtr->phaseu_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->ta);
10000864:	687b      	ldr	r3, [r7, #4]
10000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000868:	687a      	ldr	r2, [r7, #4]
1000086a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000086e:	4611      	mov	r1, r2
10000870:	687a      	ldr	r2, [r7, #4]
10000872:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
10000876:	440a      	add	r2, r1
10000878:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb);
1000087a:	687b      	ldr	r3, [r7, #4]
1000087c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000087e:	687a      	ldr	r2, [r7, #4]
10000880:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000884:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
10000886:	687b      	ldr	r3, [r7, #4]
10000888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000088a:	687a      	ldr	r2, [r7, #4]
1000088c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000890:	601a      	str	r2, [r3, #0]
       break;
10000892:	e05f      	b.n	10000954 <__initial_sp+0x154>
    case 2:/*sector 2*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
10000894:	687b      	ldr	r3, [r7, #4]
10000896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000898:	687a      	ldr	r2, [r7, #4]
1000089a:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1000089e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_tb;
100008a0:	687b      	ldr	r3, [r7, #4]
100008a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100008a4:	687a      	ldr	r2, [r7, #4]
100008a6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008aa:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
100008ac:	687b      	ldr	r3, [r7, #4]
100008ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100008b0:	687a      	ldr	r2, [r7, #4]
100008b2:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008b6:	4611      	mov	r1, r2
100008b8:	687a      	ldr	r2, [r7, #4]
100008ba:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
100008be:	440a      	add	r2, r1
100008c0:	601a      	str	r2, [r3, #0]
       break;
100008c2:	e047      	b.n	10000954 <__initial_sp+0x154>
    case 3:/*sector 3*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
100008c4:	687b      	ldr	r3, [r7, #4]
100008c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100008c8:	687a      	ldr	r2, [r7, #4]
100008ca:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
100008ce:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t)( HandlePtr->v_tb+ HandlePtr->ta);
100008d0:	687b      	ldr	r3, [r7, #4]
100008d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100008d4:	687a      	ldr	r2, [r7, #4]
100008d6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008da:	4611      	mov	r1, r2
100008dc:	687a      	ldr	r2, [r7, #4]
100008de:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
100008e2:	440a      	add	r2, r1
100008e4:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
100008e6:	687b      	ldr	r3, [r7, #4]
100008e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100008ea:	687a      	ldr	r2, [r7, #4]
100008ec:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008f0:	601a      	str	r2, [r3, #0]
       break;
100008f2:	e02f      	b.n	10000954 <__initial_sp+0x154>
    case 4:/*sector 4*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->tb;
100008f4:	687b      	ldr	r3, [r7, #4]
100008f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100008f8:	687a      	ldr	r2, [r7, #4]
100008fa:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008fe:	4611      	mov	r1, r2
10000900:	687a      	ldr	r2, [r7, #4]
10000902:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
10000906:	440a      	add	r2, r1
10000908:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
1000090a:	687b      	ldr	r3, [r7, #4]
1000090c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000090e:	687a      	ldr	r2, [r7, #4]
10000910:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000914:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
10000916:	687b      	ldr	r3, [r7, #4]
10000918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000091a:	687a      	ldr	r2, [r7, #4]
1000091c:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000920:	601a      	str	r2, [r3, #0]
       break;
10000922:	e017      	b.n	10000954 <__initial_sp+0x154>
    default:/*sector 5*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
10000924:	687b      	ldr	r3, [r7, #4]
10000926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000928:	687a      	ldr	r2, [r7, #4]
1000092a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000092e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
10000930:	687b      	ldr	r3, [r7, #4]
10000932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10000934:	687a      	ldr	r2, [r7, #4]
10000936:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1000093a:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->ta;
1000093c:	687b      	ldr	r3, [r7, #4]
1000093e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10000940:	687a      	ldr	r2, [r7, #4]
10000942:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000946:	4611      	mov	r1, r2
10000948:	687a      	ldr	r2, [r7, #4]
1000094a:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1000094e:	440a      	add	r2, r1
10000950:	601a      	str	r2, [r3, #0]
      break;
10000952:	bf00      	nop
    }
}
10000954:	370c      	adds	r7, #12
10000956:	46bd      	mov	sp, r7
10000958:	f85d 7b04 	ldr.w	r7, [sp], #4
1000095c:	4770      	bx	lr
1000095e:	bf00      	nop

10000960 <PWM_SVM_CalCmpValueSym7>:

/**
 * This function calculates the CCU8 slice compare valuefor Symmetric 7-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym7(PWM_SVM_t* const HandlePtr)
{
10000960:	b580      	push	{r7, lr}
10000962:	b082      	sub	sp, #8
10000964:	af00      	add	r7, sp, #0
10000966:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < (uint16_t) HandlePtr->tmin)
10000968:	687b      	ldr	r3, [r7, #4]
1000096a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1000096e:	687b      	ldr	r3, [r7, #4]
10000970:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000974:	429a      	cmp	r2, r3
10000976:	d205      	bcs.n	10000984 <PWM_SVM_CalCmpValueSym7+0x24>
  {
    HandlePtr->ta = (uint16_t) HandlePtr->tmin;
10000978:	687b      	ldr	r3, [r7, #4]
1000097a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1000097e:	687b      	ldr	r3, [r7, #4]
10000980:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < (uint16_t) HandlePtr->tmin)
10000984:	687b      	ldr	r3, [r7, #4]
10000986:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
1000098a:	687b      	ldr	r3, [r7, #4]
1000098c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000990:	429a      	cmp	r2, r3
10000992:	d205      	bcs.n	100009a0 <PWM_SVM_CalCmpValueSym7+0x40>
  {
    HandlePtr->tb = (uint16_t) HandlePtr->tmin;
10000994:	687b      	ldr	r3, [r7, #4]
10000996:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1000099a:	687b      	ldr	r3, [r7, #4]
1000099c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }

  HandlePtr->v_ta = (uint16_t)(((uint32_t) HandlePtr->period + (uint16_t) HandlePtr->ta) + (uint16_t) HandlePtr->tb)
100009a0:	687b      	ldr	r3, [r7, #4]
100009a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100009a6:	b29a      	uxth	r2, r3
100009a8:	687b      	ldr	r3, [r7, #4]
100009aa:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
100009ae:	4413      	add	r3, r2
100009b0:	b29a      	uxth	r2, r3
100009b2:	687b      	ldr	r3, [r7, #4]
100009b4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
100009b8:	4413      	add	r3, r2
100009ba:	b29b      	uxth	r3, r3
100009bc:	085b      	lsrs	r3, r3, #1
100009be:	b29a      	uxth	r2, r3
100009c0:	687b      	ldr	r3, [r7, #4]
100009c2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
                     >> (uint16_t) 1;
  HandlePtr->v_tb = (uint16_t)((uint16_t) HandlePtr->period - ((uint16_t) HandlePtr->ta + (uint16_t) HandlePtr->tb))
100009c6:	687b      	ldr	r3, [r7, #4]
100009c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100009cc:	b29a      	uxth	r2, r3
100009ce:	687b      	ldr	r3, [r7, #4]
100009d0:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	; 0xae
100009d4:	687b      	ldr	r3, [r7, #4]
100009d6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
100009da:	440b      	add	r3, r1
100009dc:	b29b      	uxth	r3, r3
100009de:	1ad3      	subs	r3, r2, r3
100009e0:	b29b      	uxth	r3, r3
100009e2:	085b      	lsrs	r3, r3, #1
100009e4:	b29a      	uxth	r2, r3
100009e6:	687b      	ldr	r3, [r7, #4]
100009e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
100009ec:	6878      	ldr	r0, [r7, #4]
100009ee:	f7ff ff07 	bl	10000800 <PWM_SVM_lSymCompValUpdate>

}
100009f2:	3708      	adds	r7, #8
100009f4:	46bd      	mov	sp, r7
100009f6:	bd80      	pop	{r7, pc}

100009f8 <PWM_SVM_CalCmpValueSym5>:

/**
 * This function calculates the CCU8 slice compare value for Symmetric 5-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym5(PWM_SVM_t* const HandlePtr)
{
100009f8:	b580      	push	{r7, lr}
100009fa:	b082      	sub	sp, #8
100009fc:	af00      	add	r7, sp, #0
100009fe:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < HandlePtr->tmin)
10000a00:	687b      	ldr	r3, [r7, #4]
10000a02:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
10000a06:	687b      	ldr	r3, [r7, #4]
10000a08:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000a0c:	429a      	cmp	r2, r3
10000a0e:	d205      	bcs.n	10000a1c <PWM_SVM_CalCmpValueSym5+0x24>
  {
    HandlePtr->ta = HandlePtr->tmin;
10000a10:	687b      	ldr	r3, [r7, #4]
10000a12:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
10000a16:	687b      	ldr	r3, [r7, #4]
10000a18:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < HandlePtr->tmin)
10000a1c:	687b      	ldr	r3, [r7, #4]
10000a1e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
10000a22:	687b      	ldr	r3, [r7, #4]
10000a24:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000a28:	429a      	cmp	r2, r3
10000a2a:	d205      	bcs.n	10000a38 <PWM_SVM_CalCmpValueSym5+0x40>
  {
    HandlePtr->tb = HandlePtr->tmin;
10000a2c:	687b      	ldr	r3, [r7, #4]
10000a2e:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
10000a32:	687b      	ldr	r3, [r7, #4]
10000a34:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }
  HandlePtr->v_ta = (uint16_t) HandlePtr->period + 1U;
10000a38:	687b      	ldr	r3, [r7, #4]
10000a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000a3e:	b29b      	uxth	r3, r3
10000a40:	3301      	adds	r3, #1
10000a42:	b29a      	uxth	r2, r3
10000a44:	687b      	ldr	r3, [r7, #4]
10000a46:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  HandlePtr->v_tb = ((uint16_t) HandlePtr->period - HandlePtr->ta) - HandlePtr->tb;
10000a4a:	687b      	ldr	r3, [r7, #4]
10000a4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000a50:	b29a      	uxth	r2, r3
10000a52:	687b      	ldr	r3, [r7, #4]
10000a54:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000a58:	1ad3      	subs	r3, r2, r3
10000a5a:	b29a      	uxth	r2, r3
10000a5c:	687b      	ldr	r3, [r7, #4]
10000a5e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000a62:	1ad3      	subs	r3, r2, r3
10000a64:	b29a      	uxth	r2, r3
10000a66:	687b      	ldr	r3, [r7, #4]
10000a68:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
10000a6c:	6878      	ldr	r0, [r7, #4]
10000a6e:	f7ff fec7 	bl	10000800 <PWM_SVM_lSymCompValUpdate>
}
10000a72:	3708      	adds	r7, #8
10000a74:	46bd      	mov	sp, r7
10000a76:	bd80      	pop	{r7, pc}

10000a78 <PWM_SVM_TimecalcUsingLUT>:
#if(1U == PWM_SVM_IS_LUT_ENABLE)
/*
 * SVM Segment Time calculation using Look up table
 */
void PWM_SVM_TimecalcUsingLUT(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
10000a78:	b480      	push	{r7}
10000a7a:	b08b      	sub	sp, #44	; 0x2c
10000a7c:	af00      	add	r7, sp, #0
10000a7e:	60f8      	str	r0, [r7, #12]
10000a80:	460b      	mov	r3, r1
10000a82:	607a      	str	r2, [r7, #4]
10000a84:	817b      	strh	r3, [r7, #10]
  uint16_t ta_tb,ta;
  uint32_t Dividend_Sine, Divisor_Sine;        /*Ts x sin(θrel), sin(θrel)+sin(60°-θrel)*/
  XMC_ASSERT("PWM_SVM_lTimecalcUsingLUT:NULL Handle Pointer",
      (HandlePtr != (PWM_SVM_t *)NULL));

  angletemp = (uint32_t)((Angle & (uint32_t)0xFFFFFF) >> 14U) * 6U;
10000a86:	687b      	ldr	r3, [r7, #4]
10000a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
10000a8c:	0b9a      	lsrs	r2, r3, #14
10000a8e:	4613      	mov	r3, r2
10000a90:	005b      	lsls	r3, r3, #1
10000a92:	4413      	add	r3, r2
10000a94:	005b      	lsls	r3, r3, #1
10000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HandlePtr->sector_angle = (uint32_t)(angletemp & (uint32_t) 0x003FF);
10000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000a9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
10000a9e:	68fb      	ldr	r3, [r7, #12]
10000aa0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  HandlePtr->sector = (uint32_t)((angletemp >> 10U) & 7U);
10000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000aa6:	0a9b      	lsrs	r3, r3, #10
10000aa8:	f003 0207 	and.w	r2, r3, #7
10000aac:	68fb      	ldr	r3, [r7, #12]
10000aae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  if ((uint16_t)Amplitude > (HandlePtr->max_amplitude))
10000ab2:	68fb      	ldr	r3, [r7, #12]
10000ab4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
10000ab8:	897a      	ldrh	r2, [r7, #10]
10000aba:	429a      	cmp	r2, r3
10000abc:	d903      	bls.n	10000ac6 <PWM_SVM_TimecalcUsingLUT+0x4e>
  {
    Amplitude = HandlePtr->max_amplitude;
10000abe:	68fb      	ldr	r3, [r7, #12]
10000ac0:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
10000ac4:	817b      	strh	r3, [r7, #10]
  }
  HandlePtr->tb = (uint16_t)((Amplitude* Sinus60_tab[1023U - HandlePtr->sector_angle])>> 15U);
10000ac6:	897a      	ldrh	r2, [r7, #10]
10000ac8:	68fb      	ldr	r3, [r7, #12]
10000aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000ace:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
10000ad2:	3303      	adds	r3, #3
10000ad4:	4949      	ldr	r1, [pc, #292]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000ad6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
10000ada:	fb03 f302 	mul.w	r3, r3, r2
10000ade:	13db      	asrs	r3, r3, #15
10000ae0:	b29a      	uxth	r2, r3
10000ae2:	68fb      	ldr	r3, [r7, #12]
10000ae4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  HandlePtr->tb = (uint16_t)((HandlePtr->tb * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
10000ae8:	68fb      	ldr	r3, [r7, #12]
10000aea:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000aee:	461a      	mov	r2, r3
10000af0:	68fb      	ldr	r3, [r7, #12]
10000af2:	681b      	ldr	r3, [r3, #0]
10000af4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
10000af8:	fb03 f302 	mul.w	r3, r3, r2
10000afc:	129b      	asrs	r3, r3, #10
10000afe:	b29a      	uxth	r2, r3
10000b00:	68fb      	ldr	r3, [r7, #12]
10000b02:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

  HandlePtr->ta = (uint16_t)((Amplitude* Sinus60_tab[HandlePtr->sector_angle])>> 15U);
10000b06:	897b      	ldrh	r3, [r7, #10]
10000b08:	68fa      	ldr	r2, [r7, #12]
10000b0a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
10000b0e:	493b      	ldr	r1, [pc, #236]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
10000b14:	fb02 f303 	mul.w	r3, r2, r3
10000b18:	13db      	asrs	r3, r3, #15
10000b1a:	b29a      	uxth	r2, r3
10000b1c:	68fb      	ldr	r3, [r7, #12]
10000b1e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  HandlePtr->ta = (uint16_t)((HandlePtr->ta * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
10000b22:	68fb      	ldr	r3, [r7, #12]
10000b24:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000b28:	461a      	mov	r2, r3
10000b2a:	68fb      	ldr	r3, [r7, #12]
10000b2c:	681b      	ldr	r3, [r3, #0]
10000b2e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
10000b32:	fb03 f302 	mul.w	r3, r3, r2
10000b36:	129b      	asrs	r3, r3, #10
10000b38:	b29a      	uxth	r2, r3
10000b3a:	68fb      	ldr	r3, [r7, #12]
10000b3c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ta_tb = HandlePtr->ta + HandlePtr->tb;
10000b40:	68fb      	ldr	r3, [r7, #12]
10000b42:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
10000b46:	68fb      	ldr	r3, [r7, #12]
10000b48:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000b4c:	4413      	add	r3, r2
10000b4e:	847b      	strh	r3, [r7, #34]	; 0x22
  HandlePtr->t0 = (uint16_t)(HandlePtr->period - ta_tb);
10000b50:	68fb      	ldr	r3, [r7, #12]
10000b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b56:	b29a      	uxth	r2, r3
10000b58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10000b5a:	1ad3      	subs	r3, r2, r3
10000b5c:	b29a      	uxth	r2, r3
10000b5e:	68fb      	ldr	r3, [r7, #12]
10000b60:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  if (ta_tb > (HandlePtr->period))
10000b64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
10000b66:	68fb      	ldr	r3, [r7, #12]
10000b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b6c:	429a      	cmp	r2, r3
10000b6e:	d93f      	bls.n	10000bf0 <PWM_SVM_TimecalcUsingLUT+0x178>
  {
    if (HandlePtr->over_modulation_enable == 1U)
10000b70:	68fb      	ldr	r3, [r7, #12]
10000b72:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
10000b76:	2b01      	cmp	r3, #1
10000b78:	d13a      	bne.n	10000bf0 <PWM_SVM_TimecalcUsingLUT+0x178>
      /* Above Ta and Tb are not used for SVM PWM.*/

      /* Calculate new T1 and T2 of maximum Vref on SVM Hexagon edges,
       * where T0 = 0 (i.e.: T1+T2 = PERIOD_REG). Relative angle θrel kept the same.
       */
      Dividend_Sine = HandlePtr->period * Sinus60_tab[HandlePtr->sector_angle];
10000b7a:	68fb      	ldr	r3, [r7, #12]
10000b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b80:	68fa      	ldr	r2, [r7, #12]
10000b82:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
10000b86:	491d      	ldr	r1, [pc, #116]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
10000b8c:	fb02 f303 	mul.w	r3, r2, r3
10000b90:	61fb      	str	r3, [r7, #28]
      Divisor_Sine  = Sinus60_tab[HandlePtr->sector_angle] + Sinus60_tab[1023U - HandlePtr->sector_angle];
10000b92:	68fb      	ldr	r3, [r7, #12]
10000b94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000b98:	4a18      	ldr	r2, [pc, #96]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
10000b9e:	4619      	mov	r1, r3
10000ba0:	68fb      	ldr	r3, [r7, #12]
10000ba2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000ba6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
10000baa:	3303      	adds	r3, #3
10000bac:	4a13      	ldr	r2, [pc, #76]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
10000bb2:	440b      	add	r3, r1
10000bb4:	61bb      	str	r3, [r7, #24]
      /* Unsigned Div. Dividend << SHIFT_OVERMODULATION, Quotient >> SHIFT_OVERMODULATION, Divisor no shift.*/
      MATH->DIVCON = (0x00008004 | (PWM_SVM_SHIFT_OVERMODULATION << 16U) | (PWM_SVM_SHIFT_OVERMODULATION << 8U));
      MATH->DVD = Dividend_Sine;
      MATH->DVS = Divisor_Sine;
      #else
      ta = (uint16_t)(Dividend_Sine/Divisor_Sine);
10000bb6:	69fa      	ldr	r2, [r7, #28]
10000bb8:	69bb      	ldr	r3, [r7, #24]
10000bba:	fbb2 f3f3 	udiv	r3, r2, r3
10000bbe:	82fb      	strh	r3, [r7, #22]
      #endif
      /*###* CPU computes the following simultaneously when DIV #2 is computing ###*/
      HandlePtr->t0 = 0U;
10000bc0:	68fb      	ldr	r3, [r7, #12]
10000bc2:	2200      	movs	r2, #0
10000bc4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
      ta_tb = (uint16_t)HandlePtr->period;                /* Make sure below T0/2 >= 0.*/
10000bc8:	68fb      	ldr	r3, [r7, #12]
10000bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000bce:	847b      	strh	r3, [r7, #34]	; 0x22
      #if defined (MATH)
      /*###* Results of DIV #2 for T2 of Over-Modulation ###*/
      while (MATH->DIVST) continue;          /* Wait if DIV is still running calculation.*/
      ta = MATH->QUOT;     /* Read DIV Quotient result. T2 = Ts x sin(theta) / (sin(theta)+sin(60-theta)).*/
      #endif
      HandlePtr->ta = ta;
10000bd0:	68fb      	ldr	r3, [r7, #12]
10000bd2:	8afa      	ldrh	r2, [r7, #22]
10000bd4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
      /* Ta + Tb = PERIOD_REG for Vref on SVM Hexagon edges.*/
      HandlePtr->tb = (uint16_t)(HandlePtr->period - HandlePtr->ta);
10000bd8:	68fb      	ldr	r3, [r7, #12]
10000bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000bde:	b29a      	uxth	r2, r3
10000be0:	68fb      	ldr	r3, [r7, #12]
10000be2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000be6:	1ad3      	subs	r3, r2, r3
10000be8:	b29a      	uxth	r2, r3
10000bea:	68fb      	ldr	r3, [r7, #12]
10000bec:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

    }
  }
}
10000bf0:	372c      	adds	r7, #44	; 0x2c
10000bf2:	46bd      	mov	sp, r7
10000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
10000bf8:	4770      	bx	lr
10000bfa:	bf00      	nop
10000bfc:	080080bc 	.word	0x080080bc

10000c00 <PWM_SVM_SVMUpdate>:
 * This is the SVM algorithm for sinusoidal commutation.
 * It updates the compare registers of the CCU8 slices as per calculated
 * duty cycle.
 */
void PWM_SVM_SVMUpdate(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
10000c00:	b580      	push	{r7, lr}
10000c02:	b086      	sub	sp, #24
10000c04:	af00      	add	r7, sp, #0
10000c06:	60f8      	str	r0, [r7, #12]
10000c08:	460b      	mov	r3, r1
10000c0a:	607a      	str	r2, [r7, #4]
10000c0c:	817b      	strh	r3, [r7, #10]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
10000c0e:	68fb      	ldr	r3, [r7, #12]
10000c10:	681b      	ldr	r3, [r3, #0]
10000c12:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_SVM_SVMUpdate:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));

  /*This function calculates segment time ta, tb using CORDIC or LUT as per UI configuration */
  HandlePtr->seg_time_calc_ptr(HandlePtr, (uint16_t) Amplitude, (uint32_t) Angle);
10000c14:	68fb      	ldr	r3, [r7, #12]
10000c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10000c1a:	897a      	ldrh	r2, [r7, #10]
10000c1c:	68f8      	ldr	r0, [r7, #12]
10000c1e:	4611      	mov	r1, r2
10000c20:	687a      	ldr	r2, [r7, #4]
10000c22:	4798      	blx	r3
  /*This function calculates and updates compare values in compare register*/
  HandlePtr->svm_schemesel_ptr(HandlePtr);
10000c24:	68fb      	ldr	r3, [r7, #12]
10000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000c2a:	68f8      	ldr	r0, [r7, #12]
10000c2c:	4798      	blx	r3

  /*Enable the shadow transfer for all three slice*/
  HandlePtr->global_ptr->GCSS |= svmptr->shadow_transfer_mask;
10000c2e:	68fb      	ldr	r3, [r7, #12]
10000c30:	685b      	ldr	r3, [r3, #4]
10000c32:	68fa      	ldr	r2, [r7, #12]
10000c34:	6852      	ldr	r2, [r2, #4]
10000c36:	6911      	ldr	r1, [r2, #16]
10000c38:	697a      	ldr	r2, [r7, #20]
10000c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
10000c3c:	430a      	orrs	r2, r1
10000c3e:	611a      	str	r2, [r3, #16]
}
10000c40:	3718      	adds	r7, #24
10000c42:	46bd      	mov	sp, r7
10000c44:	bd80      	pop	{r7, pc}
10000c46:	bf00      	nop
